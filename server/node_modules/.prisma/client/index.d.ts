
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model users_meta
 * 
 */
export type users_meta = $Result.DefaultSelection<Prisma.$users_metaPayload>
/**
 * Model addresses
 * 
 */
export type addresses = $Result.DefaultSelection<Prisma.$addressesPayload>
/**
 * Model products
 * 
 */
export type products = $Result.DefaultSelection<Prisma.$productsPayload>
/**
 * Model productGalleries
 * 
 */
export type productGalleries = $Result.DefaultSelection<Prisma.$productGalleriesPayload>
/**
 * Model productCategories
 * 
 */
export type productCategories = $Result.DefaultSelection<Prisma.$productCategoriesPayload>
/**
 * Model categoriesOnProducts
 * 
 */
export type categoriesOnProducts = $Result.DefaultSelection<Prisma.$categoriesOnProductsPayload>
/**
 * Model productCarts
 * 
 */
export type productCarts = $Result.DefaultSelection<Prisma.$productCartsPayload>
/**
 * Model productReviews
 * 
 */
export type productReviews = $Result.DefaultSelection<Prisma.$productReviewsPayload>
/**
 * Model media
 * 
 */
export type media = $Result.DefaultSelection<Prisma.$mediaPayload>
/**
 * Model orders
 * 
 */
export type orders = $Result.DefaultSelection<Prisma.$ordersPayload>
/**
 * Model orderItems
 * 
 */
export type orderItems = $Result.DefaultSelection<Prisma.$orderItemsPayload>
/**
 * Model wishlists
 * 
 */
export type wishlists = $Result.DefaultSelection<Prisma.$wishlistsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  customer: 'customer',
  administrator: 'administrator'
};

export type Role = (typeof Role)[keyof typeof Role]


export const AddressType: {
  home: 'home',
  office: 'office'
};

export type AddressType = (typeof AddressType)[keyof typeof AddressType]


export const StockStatus: {
  in_stock: 'in_stock',
  out_of_stock: 'out_of_stock',
  on_waitlist_order: 'on_waitlist_order'
};

export type StockStatus = (typeof StockStatus)[keyof typeof StockStatus]


export const ProductStatus: {
  publish: 'publish',
  draft: 'draft',
  pending: 'pending',
  trash: 'trash'
};

export type ProductStatus = (typeof ProductStatus)[keyof typeof ProductStatus]


export const ProductReviewStatus: {
  pending: 'pending',
  published: 'published',
  trash: 'trash'
};

export type ProductReviewStatus = (typeof ProductReviewStatus)[keyof typeof ProductReviewStatus]


export const OrderStatus: {
  pending: 'pending',
  processing: 'processing',
  cancelled: 'cancelled',
  completed: 'completed',
  refunded: 'refunded'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]


export const PaymentStatus: {
  pending: 'pending',
  paid: 'paid',
  failed: 'failed'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type AddressType = $Enums.AddressType

export const AddressType: typeof $Enums.AddressType

export type StockStatus = $Enums.StockStatus

export const StockStatus: typeof $Enums.StockStatus

export type ProductStatus = $Enums.ProductStatus

export const ProductStatus: typeof $Enums.ProductStatus

export type ProductReviewStatus = $Enums.ProductReviewStatus

export const ProductReviewStatus: typeof $Enums.ProductReviewStatus

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;

  /**
   * `prisma.users_meta`: Exposes CRUD operations for the **users_meta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users_metas
    * const users_metas = await prisma.users_meta.findMany()
    * ```
    */
  get users_meta(): Prisma.users_metaDelegate<ExtArgs>;

  /**
   * `prisma.addresses`: Exposes CRUD operations for the **addresses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.addresses.findMany()
    * ```
    */
  get addresses(): Prisma.addressesDelegate<ExtArgs>;

  /**
   * `prisma.products`: Exposes CRUD operations for the **products** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.products.findMany()
    * ```
    */
  get products(): Prisma.productsDelegate<ExtArgs>;

  /**
   * `prisma.productGalleries`: Exposes CRUD operations for the **productGalleries** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductGalleries
    * const productGalleries = await prisma.productGalleries.findMany()
    * ```
    */
  get productGalleries(): Prisma.productGalleriesDelegate<ExtArgs>;

  /**
   * `prisma.productCategories`: Exposes CRUD operations for the **productCategories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductCategories
    * const productCategories = await prisma.productCategories.findMany()
    * ```
    */
  get productCategories(): Prisma.productCategoriesDelegate<ExtArgs>;

  /**
   * `prisma.categoriesOnProducts`: Exposes CRUD operations for the **categoriesOnProducts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategoriesOnProducts
    * const categoriesOnProducts = await prisma.categoriesOnProducts.findMany()
    * ```
    */
  get categoriesOnProducts(): Prisma.categoriesOnProductsDelegate<ExtArgs>;

  /**
   * `prisma.productCarts`: Exposes CRUD operations for the **productCarts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductCarts
    * const productCarts = await prisma.productCarts.findMany()
    * ```
    */
  get productCarts(): Prisma.productCartsDelegate<ExtArgs>;

  /**
   * `prisma.productReviews`: Exposes CRUD operations for the **productReviews** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductReviews
    * const productReviews = await prisma.productReviews.findMany()
    * ```
    */
  get productReviews(): Prisma.productReviewsDelegate<ExtArgs>;

  /**
   * `prisma.media`: Exposes CRUD operations for the **media** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Media
    * const media = await prisma.media.findMany()
    * ```
    */
  get media(): Prisma.mediaDelegate<ExtArgs>;

  /**
   * `prisma.orders`: Exposes CRUD operations for the **orders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.orders.findMany()
    * ```
    */
  get orders(): Prisma.ordersDelegate<ExtArgs>;

  /**
   * `prisma.orderItems`: Exposes CRUD operations for the **orderItems** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderItems
    * const orderItems = await prisma.orderItems.findMany()
    * ```
    */
  get orderItems(): Prisma.orderItemsDelegate<ExtArgs>;

  /**
   * `prisma.wishlists`: Exposes CRUD operations for the **wishlists** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wishlists
    * const wishlists = await prisma.wishlists.findMany()
    * ```
    */
  get wishlists(): Prisma.wishlistsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    users_meta: 'users_meta',
    addresses: 'addresses',
    products: 'products',
    productGalleries: 'productGalleries',
    productCategories: 'productCategories',
    categoriesOnProducts: 'categoriesOnProducts',
    productCarts: 'productCarts',
    productReviews: 'productReviews',
    media: 'media',
    orders: 'orders',
    orderItems: 'orderItems',
    wishlists: 'wishlists'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'users_meta' | 'addresses' | 'products' | 'productGalleries' | 'productCategories' | 'categoriesOnProducts' | 'productCarts' | 'productReviews' | 'media' | 'orders' | 'orderItems' | 'wishlists'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      users_meta: {
        payload: Prisma.$users_metaPayload<ExtArgs>
        fields: Prisma.users_metaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.users_metaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$users_metaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.users_metaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$users_metaPayload>
          }
          findFirst: {
            args: Prisma.users_metaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$users_metaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.users_metaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$users_metaPayload>
          }
          findMany: {
            args: Prisma.users_metaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$users_metaPayload>[]
          }
          create: {
            args: Prisma.users_metaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$users_metaPayload>
          }
          createMany: {
            args: Prisma.users_metaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.users_metaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$users_metaPayload>
          }
          update: {
            args: Prisma.users_metaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$users_metaPayload>
          }
          deleteMany: {
            args: Prisma.users_metaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.users_metaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.users_metaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$users_metaPayload>
          }
          aggregate: {
            args: Prisma.Users_metaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers_meta>
          }
          groupBy: {
            args: Prisma.users_metaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Users_metaGroupByOutputType>[]
          }
          count: {
            args: Prisma.users_metaCountArgs<ExtArgs>,
            result: $Utils.Optional<Users_metaCountAggregateOutputType> | number
          }
        }
      }
      addresses: {
        payload: Prisma.$addressesPayload<ExtArgs>
        fields: Prisma.addressesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.addressesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$addressesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.addressesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$addressesPayload>
          }
          findFirst: {
            args: Prisma.addressesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$addressesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.addressesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$addressesPayload>
          }
          findMany: {
            args: Prisma.addressesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$addressesPayload>[]
          }
          create: {
            args: Prisma.addressesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$addressesPayload>
          }
          createMany: {
            args: Prisma.addressesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.addressesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$addressesPayload>
          }
          update: {
            args: Prisma.addressesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$addressesPayload>
          }
          deleteMany: {
            args: Prisma.addressesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.addressesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.addressesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$addressesPayload>
          }
          aggregate: {
            args: Prisma.AddressesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAddresses>
          }
          groupBy: {
            args: Prisma.addressesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AddressesGroupByOutputType>[]
          }
          count: {
            args: Prisma.addressesCountArgs<ExtArgs>,
            result: $Utils.Optional<AddressesCountAggregateOutputType> | number
          }
        }
      }
      products: {
        payload: Prisma.$productsPayload<ExtArgs>
        fields: Prisma.productsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          findFirst: {
            args: Prisma.productsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          findMany: {
            args: Prisma.productsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>[]
          }
          create: {
            args: Prisma.productsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          createMany: {
            args: Prisma.productsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.productsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          update: {
            args: Prisma.productsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          deleteMany: {
            args: Prisma.productsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.productsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.productsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          aggregate: {
            args: Prisma.ProductsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProducts>
          }
          groupBy: {
            args: Prisma.productsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductsGroupByOutputType>[]
          }
          count: {
            args: Prisma.productsCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductsCountAggregateOutputType> | number
          }
        }
      }
      productGalleries: {
        payload: Prisma.$productGalleriesPayload<ExtArgs>
        fields: Prisma.productGalleriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productGalleriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productGalleriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productGalleriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productGalleriesPayload>
          }
          findFirst: {
            args: Prisma.productGalleriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productGalleriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productGalleriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productGalleriesPayload>
          }
          findMany: {
            args: Prisma.productGalleriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productGalleriesPayload>[]
          }
          create: {
            args: Prisma.productGalleriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productGalleriesPayload>
          }
          createMany: {
            args: Prisma.productGalleriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.productGalleriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productGalleriesPayload>
          }
          update: {
            args: Prisma.productGalleriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productGalleriesPayload>
          }
          deleteMany: {
            args: Prisma.productGalleriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.productGalleriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.productGalleriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productGalleriesPayload>
          }
          aggregate: {
            args: Prisma.ProductGalleriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProductGalleries>
          }
          groupBy: {
            args: Prisma.productGalleriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductGalleriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.productGalleriesCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductGalleriesCountAggregateOutputType> | number
          }
        }
      }
      productCategories: {
        payload: Prisma.$productCategoriesPayload<ExtArgs>
        fields: Prisma.productCategoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productCategoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productCategoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productCategoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productCategoriesPayload>
          }
          findFirst: {
            args: Prisma.productCategoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productCategoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productCategoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productCategoriesPayload>
          }
          findMany: {
            args: Prisma.productCategoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productCategoriesPayload>[]
          }
          create: {
            args: Prisma.productCategoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productCategoriesPayload>
          }
          createMany: {
            args: Prisma.productCategoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.productCategoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productCategoriesPayload>
          }
          update: {
            args: Prisma.productCategoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productCategoriesPayload>
          }
          deleteMany: {
            args: Prisma.productCategoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.productCategoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.productCategoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productCategoriesPayload>
          }
          aggregate: {
            args: Prisma.ProductCategoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProductCategories>
          }
          groupBy: {
            args: Prisma.productCategoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductCategoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.productCategoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductCategoriesCountAggregateOutputType> | number
          }
        }
      }
      categoriesOnProducts: {
        payload: Prisma.$categoriesOnProductsPayload<ExtArgs>
        fields: Prisma.categoriesOnProductsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoriesOnProductsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesOnProductsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriesOnProductsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesOnProductsPayload>
          }
          findFirst: {
            args: Prisma.categoriesOnProductsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesOnProductsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriesOnProductsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesOnProductsPayload>
          }
          findMany: {
            args: Prisma.categoriesOnProductsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesOnProductsPayload>[]
          }
          create: {
            args: Prisma.categoriesOnProductsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesOnProductsPayload>
          }
          createMany: {
            args: Prisma.categoriesOnProductsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.categoriesOnProductsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesOnProductsPayload>
          }
          update: {
            args: Prisma.categoriesOnProductsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesOnProductsPayload>
          }
          deleteMany: {
            args: Prisma.categoriesOnProductsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.categoriesOnProductsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.categoriesOnProductsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesOnProductsPayload>
          }
          aggregate: {
            args: Prisma.CategoriesOnProductsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategoriesOnProducts>
          }
          groupBy: {
            args: Prisma.categoriesOnProductsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesOnProductsGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoriesOnProductsCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesOnProductsCountAggregateOutputType> | number
          }
        }
      }
      productCarts: {
        payload: Prisma.$productCartsPayload<ExtArgs>
        fields: Prisma.productCartsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productCartsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productCartsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productCartsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productCartsPayload>
          }
          findFirst: {
            args: Prisma.productCartsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productCartsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productCartsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productCartsPayload>
          }
          findMany: {
            args: Prisma.productCartsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productCartsPayload>[]
          }
          create: {
            args: Prisma.productCartsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productCartsPayload>
          }
          createMany: {
            args: Prisma.productCartsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.productCartsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productCartsPayload>
          }
          update: {
            args: Prisma.productCartsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productCartsPayload>
          }
          deleteMany: {
            args: Prisma.productCartsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.productCartsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.productCartsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productCartsPayload>
          }
          aggregate: {
            args: Prisma.ProductCartsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProductCarts>
          }
          groupBy: {
            args: Prisma.productCartsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductCartsGroupByOutputType>[]
          }
          count: {
            args: Prisma.productCartsCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductCartsCountAggregateOutputType> | number
          }
        }
      }
      productReviews: {
        payload: Prisma.$productReviewsPayload<ExtArgs>
        fields: Prisma.productReviewsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productReviewsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productReviewsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productReviewsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productReviewsPayload>
          }
          findFirst: {
            args: Prisma.productReviewsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productReviewsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productReviewsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productReviewsPayload>
          }
          findMany: {
            args: Prisma.productReviewsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productReviewsPayload>[]
          }
          create: {
            args: Prisma.productReviewsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productReviewsPayload>
          }
          createMany: {
            args: Prisma.productReviewsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.productReviewsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productReviewsPayload>
          }
          update: {
            args: Prisma.productReviewsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productReviewsPayload>
          }
          deleteMany: {
            args: Prisma.productReviewsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.productReviewsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.productReviewsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productReviewsPayload>
          }
          aggregate: {
            args: Prisma.ProductReviewsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProductReviews>
          }
          groupBy: {
            args: Prisma.productReviewsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductReviewsGroupByOutputType>[]
          }
          count: {
            args: Prisma.productReviewsCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductReviewsCountAggregateOutputType> | number
          }
        }
      }
      media: {
        payload: Prisma.$mediaPayload<ExtArgs>
        fields: Prisma.mediaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.mediaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mediaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.mediaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mediaPayload>
          }
          findFirst: {
            args: Prisma.mediaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mediaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.mediaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mediaPayload>
          }
          findMany: {
            args: Prisma.mediaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mediaPayload>[]
          }
          create: {
            args: Prisma.mediaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mediaPayload>
          }
          createMany: {
            args: Prisma.mediaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.mediaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mediaPayload>
          }
          update: {
            args: Prisma.mediaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mediaPayload>
          }
          deleteMany: {
            args: Prisma.mediaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.mediaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.mediaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mediaPayload>
          }
          aggregate: {
            args: Prisma.MediaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMedia>
          }
          groupBy: {
            args: Prisma.mediaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MediaGroupByOutputType>[]
          }
          count: {
            args: Prisma.mediaCountArgs<ExtArgs>,
            result: $Utils.Optional<MediaCountAggregateOutputType> | number
          }
        }
      }
      orders: {
        payload: Prisma.$ordersPayload<ExtArgs>
        fields: Prisma.ordersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ordersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ordersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          findFirst: {
            args: Prisma.ordersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ordersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          findMany: {
            args: Prisma.ordersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>[]
          }
          create: {
            args: Prisma.ordersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          createMany: {
            args: Prisma.ordersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ordersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          update: {
            args: Prisma.ordersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          deleteMany: {
            args: Prisma.ordersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ordersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ordersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          aggregate: {
            args: Prisma.OrdersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrders>
          }
          groupBy: {
            args: Prisma.ordersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrdersGroupByOutputType>[]
          }
          count: {
            args: Prisma.ordersCountArgs<ExtArgs>,
            result: $Utils.Optional<OrdersCountAggregateOutputType> | number
          }
        }
      }
      orderItems: {
        payload: Prisma.$orderItemsPayload<ExtArgs>
        fields: Prisma.orderItemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.orderItemsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$orderItemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.orderItemsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$orderItemsPayload>
          }
          findFirst: {
            args: Prisma.orderItemsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$orderItemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.orderItemsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$orderItemsPayload>
          }
          findMany: {
            args: Prisma.orderItemsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$orderItemsPayload>[]
          }
          create: {
            args: Prisma.orderItemsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$orderItemsPayload>
          }
          createMany: {
            args: Prisma.orderItemsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.orderItemsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$orderItemsPayload>
          }
          update: {
            args: Prisma.orderItemsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$orderItemsPayload>
          }
          deleteMany: {
            args: Prisma.orderItemsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.orderItemsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.orderItemsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$orderItemsPayload>
          }
          aggregate: {
            args: Prisma.OrderItemsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrderItems>
          }
          groupBy: {
            args: Prisma.orderItemsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrderItemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.orderItemsCountArgs<ExtArgs>,
            result: $Utils.Optional<OrderItemsCountAggregateOutputType> | number
          }
        }
      }
      wishlists: {
        payload: Prisma.$wishlistsPayload<ExtArgs>
        fields: Prisma.wishlistsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.wishlistsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$wishlistsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.wishlistsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$wishlistsPayload>
          }
          findFirst: {
            args: Prisma.wishlistsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$wishlistsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.wishlistsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$wishlistsPayload>
          }
          findMany: {
            args: Prisma.wishlistsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$wishlistsPayload>[]
          }
          create: {
            args: Prisma.wishlistsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$wishlistsPayload>
          }
          createMany: {
            args: Prisma.wishlistsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.wishlistsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$wishlistsPayload>
          }
          update: {
            args: Prisma.wishlistsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$wishlistsPayload>
          }
          deleteMany: {
            args: Prisma.wishlistsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.wishlistsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.wishlistsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$wishlistsPayload>
          }
          aggregate: {
            args: Prisma.WishlistsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWishlists>
          }
          groupBy: {
            args: Prisma.wishlistsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WishlistsGroupByOutputType>[]
          }
          count: {
            args: Prisma.wishlistsCountArgs<ExtArgs>,
            result: $Utils.Optional<WishlistsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Users_metaCountOutputType
   */

  export type Users_metaCountOutputType = {
    products: number
    carts: number
    media: number
    addresses: number
    orders: number
    wishlists: number
    product_reviews: number
  }

  export type Users_metaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | Users_metaCountOutputTypeCountProductsArgs
    carts?: boolean | Users_metaCountOutputTypeCountCartsArgs
    media?: boolean | Users_metaCountOutputTypeCountMediaArgs
    addresses?: boolean | Users_metaCountOutputTypeCountAddressesArgs
    orders?: boolean | Users_metaCountOutputTypeCountOrdersArgs
    wishlists?: boolean | Users_metaCountOutputTypeCountWishlistsArgs
    product_reviews?: boolean | Users_metaCountOutputTypeCountProduct_reviewsArgs
  }

  // Custom InputTypes
  /**
   * Users_metaCountOutputType without action
   */
  export type Users_metaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users_metaCountOutputType
     */
    select?: Users_metaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Users_metaCountOutputType without action
   */
  export type Users_metaCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }

  /**
   * Users_metaCountOutputType without action
   */
  export type Users_metaCountOutputTypeCountCartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productCartsWhereInput
  }

  /**
   * Users_metaCountOutputType without action
   */
  export type Users_metaCountOutputTypeCountMediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: mediaWhereInput
  }

  /**
   * Users_metaCountOutputType without action
   */
  export type Users_metaCountOutputTypeCountAddressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: addressesWhereInput
  }

  /**
   * Users_metaCountOutputType without action
   */
  export type Users_metaCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
  }

  /**
   * Users_metaCountOutputType without action
   */
  export type Users_metaCountOutputTypeCountWishlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: wishlistsWhereInput
  }

  /**
   * Users_metaCountOutputType without action
   */
  export type Users_metaCountOutputTypeCountProduct_reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productReviewsWhereInput
  }


  /**
   * Count Type AddressesCountOutputType
   */

  export type AddressesCountOutputType = {
    billing_orders: number
    shipping_orders: number
  }

  export type AddressesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billing_orders?: boolean | AddressesCountOutputTypeCountBilling_ordersArgs
    shipping_orders?: boolean | AddressesCountOutputTypeCountShipping_ordersArgs
  }

  // Custom InputTypes
  /**
   * AddressesCountOutputType without action
   */
  export type AddressesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressesCountOutputType
     */
    select?: AddressesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AddressesCountOutputType without action
   */
  export type AddressesCountOutputTypeCountBilling_ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
  }

  /**
   * AddressesCountOutputType without action
   */
  export type AddressesCountOutputTypeCountShipping_ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
  }


  /**
   * Count Type ProductsCountOutputType
   */

  export type ProductsCountOutputType = {
    categories: number
    carts: number
    galleries: number
    order_items: number
    wishlists: number
    reviews: number
  }

  export type ProductsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | ProductsCountOutputTypeCountCategoriesArgs
    carts?: boolean | ProductsCountOutputTypeCountCartsArgs
    galleries?: boolean | ProductsCountOutputTypeCountGalleriesArgs
    order_items?: boolean | ProductsCountOutputTypeCountOrder_itemsArgs
    wishlists?: boolean | ProductsCountOutputTypeCountWishlistsArgs
    reviews?: boolean | ProductsCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCountOutputType
     */
    select?: ProductsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriesOnProductsWhereInput
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountCartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productCartsWhereInput
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountGalleriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productGalleriesWhereInput
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountOrder_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderItemsWhereInput
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountWishlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: wishlistsWhereInput
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productReviewsWhereInput
  }


  /**
   * Count Type ProductCategoriesCountOutputType
   */

  export type ProductCategoriesCountOutputType = {
    products: number
  }

  export type ProductCategoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | ProductCategoriesCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * ProductCategoriesCountOutputType without action
   */
  export type ProductCategoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategoriesCountOutputType
     */
    select?: ProductCategoriesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCategoriesCountOutputType without action
   */
  export type ProductCategoriesCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriesOnProductsWhereInput
  }


  /**
   * Count Type MediaCountOutputType
   */

  export type MediaCountOutputType = {
    productCategories: number
    product: number
    galleries: number
  }

  export type MediaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productCategories?: boolean | MediaCountOutputTypeCountProductCategoriesArgs
    product?: boolean | MediaCountOutputTypeCountProductArgs
    galleries?: boolean | MediaCountOutputTypeCountGalleriesArgs
  }

  // Custom InputTypes
  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaCountOutputType
     */
    select?: MediaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountProductCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productCategoriesWhereInput
  }

  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }

  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountGalleriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productGalleriesWhereInput
  }


  /**
   * Count Type OrdersCountOutputType
   */

  export type OrdersCountOutputType = {
    items: number
  }

  export type OrdersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | OrdersCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersCountOutputType
     */
    select?: OrdersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderItemsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    email: string
    password: string
    createdAt: Date
    updatedAt: Date
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meta?: boolean | users$metaArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta?: boolean | users$metaArgs<ExtArgs>
  }


  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      meta: Prisma.$users_metaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    meta<T extends users$metaArgs<ExtArgs> = {}>(args?: Subset<T, users$metaArgs<ExtArgs>>): Prisma__users_metaClient<$Result.GetResult<Prisma.$users_metaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'Int'>
    readonly email: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly createdAt: FieldRef<"users", 'DateTime'>
    readonly updatedAt: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }

  /**
   * users.meta
   */
  export type users$metaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_meta
     */
    select?: users_metaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_metaInclude<ExtArgs> | null
    where?: users_metaWhereInput
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model users_meta
   */

  export type AggregateUsers_meta = {
    _count: Users_metaCountAggregateOutputType | null
    _avg: Users_metaAvgAggregateOutputType | null
    _sum: Users_metaSumAggregateOutputType | null
    _min: Users_metaMinAggregateOutputType | null
    _max: Users_metaMaxAggregateOutputType | null
  }

  export type Users_metaAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type Users_metaSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type Users_metaMinAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    photo: string | null
    phone: string | null
    role: $Enums.Role | null
    access_token: string | null
    isVerified: boolean | null
    isInTrash: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type Users_metaMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    photo: string | null
    phone: string | null
    role: $Enums.Role | null
    access_token: string | null
    isVerified: boolean | null
    isInTrash: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type Users_metaCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    photo: number
    phone: number
    role: number
    access_token: number
    isVerified: number
    isInTrash: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type Users_metaAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type Users_metaSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type Users_metaMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    photo?: true
    phone?: true
    role?: true
    access_token?: true
    isVerified?: true
    isInTrash?: true
    createdAt?: true
    updatedAt?: true
  }

  export type Users_metaMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    photo?: true
    phone?: true
    role?: true
    access_token?: true
    isVerified?: true
    isInTrash?: true
    createdAt?: true
    updatedAt?: true
  }

  export type Users_metaCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    photo?: true
    phone?: true
    role?: true
    access_token?: true
    isVerified?: true
    isInTrash?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type Users_metaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users_meta to aggregate.
     */
    where?: users_metaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_metas to fetch.
     */
    orderBy?: users_metaOrderByWithRelationInput | users_metaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: users_metaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_metas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_metas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users_metas
    **/
    _count?: true | Users_metaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Users_metaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Users_metaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Users_metaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Users_metaMaxAggregateInputType
  }

  export type GetUsers_metaAggregateType<T extends Users_metaAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers_meta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers_meta[P]>
      : GetScalarType<T[P], AggregateUsers_meta[P]>
  }




  export type users_metaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: users_metaWhereInput
    orderBy?: users_metaOrderByWithAggregationInput | users_metaOrderByWithAggregationInput[]
    by: Users_metaScalarFieldEnum[] | Users_metaScalarFieldEnum
    having?: users_metaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Users_metaCountAggregateInputType | true
    _avg?: Users_metaAvgAggregateInputType
    _sum?: Users_metaSumAggregateInputType
    _min?: Users_metaMinAggregateInputType
    _max?: Users_metaMaxAggregateInputType
  }

  export type Users_metaGroupByOutputType = {
    id: number
    userId: number
    name: string | null
    photo: string | null
    phone: string | null
    role: $Enums.Role
    access_token: string | null
    isVerified: boolean
    isInTrash: boolean
    createdAt: Date
    updatedAt: Date
    _count: Users_metaCountAggregateOutputType | null
    _avg: Users_metaAvgAggregateOutputType | null
    _sum: Users_metaSumAggregateOutputType | null
    _min: Users_metaMinAggregateOutputType | null
    _max: Users_metaMaxAggregateOutputType | null
  }

  type GetUsers_metaGroupByPayload<T extends users_metaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Users_metaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Users_metaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Users_metaGroupByOutputType[P]>
            : GetScalarType<T[P], Users_metaGroupByOutputType[P]>
        }
      >
    >


  export type users_metaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    photo?: boolean
    phone?: boolean
    role?: boolean
    access_token?: boolean
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    products?: boolean | users_meta$productsArgs<ExtArgs>
    carts?: boolean | users_meta$cartsArgs<ExtArgs>
    media?: boolean | users_meta$mediaArgs<ExtArgs>
    addresses?: boolean | users_meta$addressesArgs<ExtArgs>
    orders?: boolean | users_meta$ordersArgs<ExtArgs>
    wishlists?: boolean | users_meta$wishlistsArgs<ExtArgs>
    product_reviews?: boolean | users_meta$product_reviewsArgs<ExtArgs>
    _count?: boolean | Users_metaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users_meta"]>

  export type users_metaSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    photo?: boolean
    phone?: boolean
    role?: boolean
    access_token?: boolean
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type users_metaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    products?: boolean | users_meta$productsArgs<ExtArgs>
    carts?: boolean | users_meta$cartsArgs<ExtArgs>
    media?: boolean | users_meta$mediaArgs<ExtArgs>
    addresses?: boolean | users_meta$addressesArgs<ExtArgs>
    orders?: boolean | users_meta$ordersArgs<ExtArgs>
    wishlists?: boolean | users_meta$wishlistsArgs<ExtArgs>
    product_reviews?: boolean | users_meta$product_reviewsArgs<ExtArgs>
    _count?: boolean | Users_metaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $users_metaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users_meta"
    objects: {
      user: Prisma.$usersPayload<ExtArgs>
      products: Prisma.$productsPayload<ExtArgs>[]
      carts: Prisma.$productCartsPayload<ExtArgs>[]
      media: Prisma.$mediaPayload<ExtArgs>[]
      addresses: Prisma.$addressesPayload<ExtArgs>[]
      orders: Prisma.$ordersPayload<ExtArgs>[]
      wishlists: Prisma.$wishlistsPayload<ExtArgs>[]
      product_reviews: Prisma.$productReviewsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      name: string | null
      photo: string | null
      phone: string | null
      role: $Enums.Role
      access_token: string | null
      isVerified: boolean
      isInTrash: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["users_meta"]>
    composites: {}
  }


  type users_metaGetPayload<S extends boolean | null | undefined | users_metaDefaultArgs> = $Result.GetResult<Prisma.$users_metaPayload, S>

  type users_metaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<users_metaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Users_metaCountAggregateInputType | true
    }

  export interface users_metaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users_meta'], meta: { name: 'users_meta' } }
    /**
     * Find zero or one Users_meta that matches the filter.
     * @param {users_metaFindUniqueArgs} args - Arguments to find a Users_meta
     * @example
     * // Get one Users_meta
     * const users_meta = await prisma.users_meta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends users_metaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, users_metaFindUniqueArgs<ExtArgs>>
    ): Prisma__users_metaClient<$Result.GetResult<Prisma.$users_metaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users_meta that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {users_metaFindUniqueOrThrowArgs} args - Arguments to find a Users_meta
     * @example
     * // Get one Users_meta
     * const users_meta = await prisma.users_meta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends users_metaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, users_metaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__users_metaClient<$Result.GetResult<Prisma.$users_metaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users_meta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_metaFindFirstArgs} args - Arguments to find a Users_meta
     * @example
     * // Get one Users_meta
     * const users_meta = await prisma.users_meta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends users_metaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, users_metaFindFirstArgs<ExtArgs>>
    ): Prisma__users_metaClient<$Result.GetResult<Prisma.$users_metaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users_meta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_metaFindFirstOrThrowArgs} args - Arguments to find a Users_meta
     * @example
     * // Get one Users_meta
     * const users_meta = await prisma.users_meta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends users_metaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, users_metaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__users_metaClient<$Result.GetResult<Prisma.$users_metaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users_metas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_metaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users_metas
     * const users_metas = await prisma.users_meta.findMany()
     * 
     * // Get first 10 Users_metas
     * const users_metas = await prisma.users_meta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const users_metaWithIdOnly = await prisma.users_meta.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends users_metaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, users_metaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$users_metaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users_meta.
     * @param {users_metaCreateArgs} args - Arguments to create a Users_meta.
     * @example
     * // Create one Users_meta
     * const Users_meta = await prisma.users_meta.create({
     *   data: {
     *     // ... data to create a Users_meta
     *   }
     * })
     * 
    **/
    create<T extends users_metaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, users_metaCreateArgs<ExtArgs>>
    ): Prisma__users_metaClient<$Result.GetResult<Prisma.$users_metaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users_metas.
     * @param {users_metaCreateManyArgs} args - Arguments to create many Users_metas.
     * @example
     * // Create many Users_metas
     * const users_meta = await prisma.users_meta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends users_metaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, users_metaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users_meta.
     * @param {users_metaDeleteArgs} args - Arguments to delete one Users_meta.
     * @example
     * // Delete one Users_meta
     * const Users_meta = await prisma.users_meta.delete({
     *   where: {
     *     // ... filter to delete one Users_meta
     *   }
     * })
     * 
    **/
    delete<T extends users_metaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, users_metaDeleteArgs<ExtArgs>>
    ): Prisma__users_metaClient<$Result.GetResult<Prisma.$users_metaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users_meta.
     * @param {users_metaUpdateArgs} args - Arguments to update one Users_meta.
     * @example
     * // Update one Users_meta
     * const users_meta = await prisma.users_meta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends users_metaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, users_metaUpdateArgs<ExtArgs>>
    ): Prisma__users_metaClient<$Result.GetResult<Prisma.$users_metaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users_metas.
     * @param {users_metaDeleteManyArgs} args - Arguments to filter Users_metas to delete.
     * @example
     * // Delete a few Users_metas
     * const { count } = await prisma.users_meta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends users_metaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, users_metaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users_metas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_metaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users_metas
     * const users_meta = await prisma.users_meta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends users_metaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, users_metaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users_meta.
     * @param {users_metaUpsertArgs} args - Arguments to update or create a Users_meta.
     * @example
     * // Update or create a Users_meta
     * const users_meta = await prisma.users_meta.upsert({
     *   create: {
     *     // ... data to create a Users_meta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users_meta we want to update
     *   }
     * })
    **/
    upsert<T extends users_metaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, users_metaUpsertArgs<ExtArgs>>
    ): Prisma__users_metaClient<$Result.GetResult<Prisma.$users_metaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users_metas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_metaCountArgs} args - Arguments to filter Users_metas to count.
     * @example
     * // Count the number of Users_metas
     * const count = await prisma.users_meta.count({
     *   where: {
     *     // ... the filter for the Users_metas we want to count
     *   }
     * })
    **/
    count<T extends users_metaCountArgs>(
      args?: Subset<T, users_metaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Users_metaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users_meta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_metaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Users_metaAggregateArgs>(args: Subset<T, Users_metaAggregateArgs>): Prisma.PrismaPromise<GetUsers_metaAggregateType<T>>

    /**
     * Group by Users_meta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_metaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends users_metaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: users_metaGroupByArgs['orderBy'] }
        : { orderBy?: users_metaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, users_metaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsers_metaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users_meta model
   */
  readonly fields: users_metaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users_meta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__users_metaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    products<T extends users_meta$productsArgs<ExtArgs> = {}>(args?: Subset<T, users_meta$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findMany'> | Null>;

    carts<T extends users_meta$cartsArgs<ExtArgs> = {}>(args?: Subset<T, users_meta$cartsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productCartsPayload<ExtArgs>, T, 'findMany'> | Null>;

    media<T extends users_meta$mediaArgs<ExtArgs> = {}>(args?: Subset<T, users_meta$mediaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mediaPayload<ExtArgs>, T, 'findMany'> | Null>;

    addresses<T extends users_meta$addressesArgs<ExtArgs> = {}>(args?: Subset<T, users_meta$addressesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'findMany'> | Null>;

    orders<T extends users_meta$ordersArgs<ExtArgs> = {}>(args?: Subset<T, users_meta$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findMany'> | Null>;

    wishlists<T extends users_meta$wishlistsArgs<ExtArgs> = {}>(args?: Subset<T, users_meta$wishlistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$wishlistsPayload<ExtArgs>, T, 'findMany'> | Null>;

    product_reviews<T extends users_meta$product_reviewsArgs<ExtArgs> = {}>(args?: Subset<T, users_meta$product_reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productReviewsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the users_meta model
   */ 
  interface users_metaFieldRefs {
    readonly id: FieldRef<"users_meta", 'Int'>
    readonly userId: FieldRef<"users_meta", 'Int'>
    readonly name: FieldRef<"users_meta", 'String'>
    readonly photo: FieldRef<"users_meta", 'String'>
    readonly phone: FieldRef<"users_meta", 'String'>
    readonly role: FieldRef<"users_meta", 'Role'>
    readonly access_token: FieldRef<"users_meta", 'String'>
    readonly isVerified: FieldRef<"users_meta", 'Boolean'>
    readonly isInTrash: FieldRef<"users_meta", 'Boolean'>
    readonly createdAt: FieldRef<"users_meta", 'DateTime'>
    readonly updatedAt: FieldRef<"users_meta", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users_meta findUnique
   */
  export type users_metaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_meta
     */
    select?: users_metaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_metaInclude<ExtArgs> | null
    /**
     * Filter, which users_meta to fetch.
     */
    where: users_metaWhereUniqueInput
  }

  /**
   * users_meta findUniqueOrThrow
   */
  export type users_metaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_meta
     */
    select?: users_metaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_metaInclude<ExtArgs> | null
    /**
     * Filter, which users_meta to fetch.
     */
    where: users_metaWhereUniqueInput
  }

  /**
   * users_meta findFirst
   */
  export type users_metaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_meta
     */
    select?: users_metaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_metaInclude<ExtArgs> | null
    /**
     * Filter, which users_meta to fetch.
     */
    where?: users_metaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_metas to fetch.
     */
    orderBy?: users_metaOrderByWithRelationInput | users_metaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users_metas.
     */
    cursor?: users_metaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_metas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_metas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users_metas.
     */
    distinct?: Users_metaScalarFieldEnum | Users_metaScalarFieldEnum[]
  }

  /**
   * users_meta findFirstOrThrow
   */
  export type users_metaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_meta
     */
    select?: users_metaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_metaInclude<ExtArgs> | null
    /**
     * Filter, which users_meta to fetch.
     */
    where?: users_metaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_metas to fetch.
     */
    orderBy?: users_metaOrderByWithRelationInput | users_metaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users_metas.
     */
    cursor?: users_metaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_metas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_metas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users_metas.
     */
    distinct?: Users_metaScalarFieldEnum | Users_metaScalarFieldEnum[]
  }

  /**
   * users_meta findMany
   */
  export type users_metaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_meta
     */
    select?: users_metaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_metaInclude<ExtArgs> | null
    /**
     * Filter, which users_metas to fetch.
     */
    where?: users_metaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_metas to fetch.
     */
    orderBy?: users_metaOrderByWithRelationInput | users_metaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users_metas.
     */
    cursor?: users_metaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_metas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_metas.
     */
    skip?: number
    distinct?: Users_metaScalarFieldEnum | Users_metaScalarFieldEnum[]
  }

  /**
   * users_meta create
   */
  export type users_metaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_meta
     */
    select?: users_metaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_metaInclude<ExtArgs> | null
    /**
     * The data needed to create a users_meta.
     */
    data: XOR<users_metaCreateInput, users_metaUncheckedCreateInput>
  }

  /**
   * users_meta createMany
   */
  export type users_metaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users_metas.
     */
    data: users_metaCreateManyInput | users_metaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users_meta update
   */
  export type users_metaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_meta
     */
    select?: users_metaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_metaInclude<ExtArgs> | null
    /**
     * The data needed to update a users_meta.
     */
    data: XOR<users_metaUpdateInput, users_metaUncheckedUpdateInput>
    /**
     * Choose, which users_meta to update.
     */
    where: users_metaWhereUniqueInput
  }

  /**
   * users_meta updateMany
   */
  export type users_metaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users_metas.
     */
    data: XOR<users_metaUpdateManyMutationInput, users_metaUncheckedUpdateManyInput>
    /**
     * Filter which users_metas to update
     */
    where?: users_metaWhereInput
  }

  /**
   * users_meta upsert
   */
  export type users_metaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_meta
     */
    select?: users_metaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_metaInclude<ExtArgs> | null
    /**
     * The filter to search for the users_meta to update in case it exists.
     */
    where: users_metaWhereUniqueInput
    /**
     * In case the users_meta found by the `where` argument doesn't exist, create a new users_meta with this data.
     */
    create: XOR<users_metaCreateInput, users_metaUncheckedCreateInput>
    /**
     * In case the users_meta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<users_metaUpdateInput, users_metaUncheckedUpdateInput>
  }

  /**
   * users_meta delete
   */
  export type users_metaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_meta
     */
    select?: users_metaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_metaInclude<ExtArgs> | null
    /**
     * Filter which users_meta to delete.
     */
    where: users_metaWhereUniqueInput
  }

  /**
   * users_meta deleteMany
   */
  export type users_metaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users_metas to delete
     */
    where?: users_metaWhereInput
  }

  /**
   * users_meta.products
   */
  export type users_meta$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * users_meta.carts
   */
  export type users_meta$cartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCarts
     */
    select?: productCartsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCartsInclude<ExtArgs> | null
    where?: productCartsWhereInput
    orderBy?: productCartsOrderByWithRelationInput | productCartsOrderByWithRelationInput[]
    cursor?: productCartsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductCartsScalarFieldEnum | ProductCartsScalarFieldEnum[]
  }

  /**
   * users_meta.media
   */
  export type users_meta$mediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the media
     */
    select?: mediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mediaInclude<ExtArgs> | null
    where?: mediaWhereInput
    orderBy?: mediaOrderByWithRelationInput | mediaOrderByWithRelationInput[]
    cursor?: mediaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }

  /**
   * users_meta.addresses
   */
  export type users_meta$addressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressesInclude<ExtArgs> | null
    where?: addressesWhereInput
    orderBy?: addressesOrderByWithRelationInput | addressesOrderByWithRelationInput[]
    cursor?: addressesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AddressesScalarFieldEnum | AddressesScalarFieldEnum[]
  }

  /**
   * users_meta.orders
   */
  export type users_meta$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * users_meta.wishlists
   */
  export type users_meta$wishlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wishlists
     */
    select?: wishlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wishlistsInclude<ExtArgs> | null
    where?: wishlistsWhereInput
    orderBy?: wishlistsOrderByWithRelationInput | wishlistsOrderByWithRelationInput[]
    cursor?: wishlistsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WishlistsScalarFieldEnum | WishlistsScalarFieldEnum[]
  }

  /**
   * users_meta.product_reviews
   */
  export type users_meta$product_reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productReviews
     */
    select?: productReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productReviewsInclude<ExtArgs> | null
    where?: productReviewsWhereInput
    orderBy?: productReviewsOrderByWithRelationInput | productReviewsOrderByWithRelationInput[]
    cursor?: productReviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductReviewsScalarFieldEnum | ProductReviewsScalarFieldEnum[]
  }

  /**
   * users_meta without action
   */
  export type users_metaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_meta
     */
    select?: users_metaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_metaInclude<ExtArgs> | null
  }


  /**
   * Model addresses
   */

  export type AggregateAddresses = {
    _count: AddressesCountAggregateOutputType | null
    _avg: AddressesAvgAggregateOutputType | null
    _sum: AddressesSumAggregateOutputType | null
    _min: AddressesMinAggregateOutputType | null
    _max: AddressesMaxAggregateOutputType | null
  }

  export type AddressesAvgAggregateOutputType = {
    id: number | null
    zip_code: number | null
    userId: number | null
  }

  export type AddressesSumAggregateOutputType = {
    id: number | null
    zip_code: number | null
    userId: number | null
  }

  export type AddressesMinAggregateOutputType = {
    id: number | null
    type: $Enums.AddressType | null
    full_name: string | null
    email: string | null
    phone: string | null
    street_address: string | null
    street_address_2: string | null
    district: string | null
    country: string | null
    zip_code: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AddressesMaxAggregateOutputType = {
    id: number | null
    type: $Enums.AddressType | null
    full_name: string | null
    email: string | null
    phone: string | null
    street_address: string | null
    street_address_2: string | null
    district: string | null
    country: string | null
    zip_code: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AddressesCountAggregateOutputType = {
    id: number
    type: number
    full_name: number
    email: number
    phone: number
    street_address: number
    street_address_2: number
    district: number
    country: number
    zip_code: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AddressesAvgAggregateInputType = {
    id?: true
    zip_code?: true
    userId?: true
  }

  export type AddressesSumAggregateInputType = {
    id?: true
    zip_code?: true
    userId?: true
  }

  export type AddressesMinAggregateInputType = {
    id?: true
    type?: true
    full_name?: true
    email?: true
    phone?: true
    street_address?: true
    street_address_2?: true
    district?: true
    country?: true
    zip_code?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AddressesMaxAggregateInputType = {
    id?: true
    type?: true
    full_name?: true
    email?: true
    phone?: true
    street_address?: true
    street_address_2?: true
    district?: true
    country?: true
    zip_code?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AddressesCountAggregateInputType = {
    id?: true
    type?: true
    full_name?: true
    email?: true
    phone?: true
    street_address?: true
    street_address_2?: true
    district?: true
    country?: true
    zip_code?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AddressesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which addresses to aggregate.
     */
    where?: addressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     */
    orderBy?: addressesOrderByWithRelationInput | addressesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: addressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned addresses
    **/
    _count?: true | AddressesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AddressesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AddressesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressesMaxAggregateInputType
  }

  export type GetAddressesAggregateType<T extends AddressesAggregateArgs> = {
        [P in keyof T & keyof AggregateAddresses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddresses[P]>
      : GetScalarType<T[P], AggregateAddresses[P]>
  }




  export type addressesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: addressesWhereInput
    orderBy?: addressesOrderByWithAggregationInput | addressesOrderByWithAggregationInput[]
    by: AddressesScalarFieldEnum[] | AddressesScalarFieldEnum
    having?: addressesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressesCountAggregateInputType | true
    _avg?: AddressesAvgAggregateInputType
    _sum?: AddressesSumAggregateInputType
    _min?: AddressesMinAggregateInputType
    _max?: AddressesMaxAggregateInputType
  }

  export type AddressesGroupByOutputType = {
    id: number
    type: $Enums.AddressType
    full_name: string
    email: string
    phone: string
    street_address: string
    street_address_2: string | null
    district: string
    country: string
    zip_code: number
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: AddressesCountAggregateOutputType | null
    _avg: AddressesAvgAggregateOutputType | null
    _sum: AddressesSumAggregateOutputType | null
    _min: AddressesMinAggregateOutputType | null
    _max: AddressesMaxAggregateOutputType | null
  }

  type GetAddressesGroupByPayload<T extends addressesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressesGroupByOutputType[P]>
            : GetScalarType<T[P], AddressesGroupByOutputType[P]>
        }
      >
    >


  export type addressesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    full_name?: boolean
    email?: boolean
    phone?: boolean
    street_address?: boolean
    street_address_2?: boolean
    district?: boolean
    country?: boolean
    zip_code?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | users_metaDefaultArgs<ExtArgs>
    billing_orders?: boolean | addresses$billing_ordersArgs<ExtArgs>
    shipping_orders?: boolean | addresses$shipping_ordersArgs<ExtArgs>
    _count?: boolean | AddressesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["addresses"]>

  export type addressesSelectScalar = {
    id?: boolean
    type?: boolean
    full_name?: boolean
    email?: boolean
    phone?: boolean
    street_address?: boolean
    street_address_2?: boolean
    district?: boolean
    country?: boolean
    zip_code?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type addressesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | users_metaDefaultArgs<ExtArgs>
    billing_orders?: boolean | addresses$billing_ordersArgs<ExtArgs>
    shipping_orders?: boolean | addresses$shipping_ordersArgs<ExtArgs>
    _count?: boolean | AddressesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $addressesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "addresses"
    objects: {
      user: Prisma.$users_metaPayload<ExtArgs>
      billing_orders: Prisma.$ordersPayload<ExtArgs>[]
      shipping_orders: Prisma.$ordersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: $Enums.AddressType
      full_name: string
      email: string
      phone: string
      street_address: string
      street_address_2: string | null
      district: string
      country: string
      zip_code: number
      userId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["addresses"]>
    composites: {}
  }


  type addressesGetPayload<S extends boolean | null | undefined | addressesDefaultArgs> = $Result.GetResult<Prisma.$addressesPayload, S>

  type addressesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<addressesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AddressesCountAggregateInputType | true
    }

  export interface addressesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['addresses'], meta: { name: 'addresses' } }
    /**
     * Find zero or one Addresses that matches the filter.
     * @param {addressesFindUniqueArgs} args - Arguments to find a Addresses
     * @example
     * // Get one Addresses
     * const addresses = await prisma.addresses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends addressesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, addressesFindUniqueArgs<ExtArgs>>
    ): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Addresses that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {addressesFindUniqueOrThrowArgs} args - Arguments to find a Addresses
     * @example
     * // Get one Addresses
     * const addresses = await prisma.addresses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends addressesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, addressesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressesFindFirstArgs} args - Arguments to find a Addresses
     * @example
     * // Get one Addresses
     * const addresses = await prisma.addresses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends addressesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, addressesFindFirstArgs<ExtArgs>>
    ): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Addresses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressesFindFirstOrThrowArgs} args - Arguments to find a Addresses
     * @example
     * // Get one Addresses
     * const addresses = await prisma.addresses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends addressesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, addressesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.addresses.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.addresses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressesWithIdOnly = await prisma.addresses.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends addressesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, addressesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Addresses.
     * @param {addressesCreateArgs} args - Arguments to create a Addresses.
     * @example
     * // Create one Addresses
     * const Addresses = await prisma.addresses.create({
     *   data: {
     *     // ... data to create a Addresses
     *   }
     * })
     * 
    **/
    create<T extends addressesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, addressesCreateArgs<ExtArgs>>
    ): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Addresses.
     * @param {addressesCreateManyArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const addresses = await prisma.addresses.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends addressesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, addressesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Addresses.
     * @param {addressesDeleteArgs} args - Arguments to delete one Addresses.
     * @example
     * // Delete one Addresses
     * const Addresses = await prisma.addresses.delete({
     *   where: {
     *     // ... filter to delete one Addresses
     *   }
     * })
     * 
    **/
    delete<T extends addressesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, addressesDeleteArgs<ExtArgs>>
    ): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Addresses.
     * @param {addressesUpdateArgs} args - Arguments to update one Addresses.
     * @example
     * // Update one Addresses
     * const addresses = await prisma.addresses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends addressesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, addressesUpdateArgs<ExtArgs>>
    ): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Addresses.
     * @param {addressesDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.addresses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends addressesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, addressesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const addresses = await prisma.addresses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends addressesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, addressesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Addresses.
     * @param {addressesUpsertArgs} args - Arguments to update or create a Addresses.
     * @example
     * // Update or create a Addresses
     * const addresses = await prisma.addresses.upsert({
     *   create: {
     *     // ... data to create a Addresses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Addresses we want to update
     *   }
     * })
    **/
    upsert<T extends addressesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, addressesUpsertArgs<ExtArgs>>
    ): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressesCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.addresses.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends addressesCountArgs>(
      args?: Subset<T, addressesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressesAggregateArgs>(args: Subset<T, AddressesAggregateArgs>): Prisma.PrismaPromise<GetAddressesAggregateType<T>>

    /**
     * Group by Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends addressesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: addressesGroupByArgs['orderBy'] }
        : { orderBy?: addressesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, addressesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the addresses model
   */
  readonly fields: addressesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for addresses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__addressesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends users_metaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, users_metaDefaultArgs<ExtArgs>>): Prisma__users_metaClient<$Result.GetResult<Prisma.$users_metaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    billing_orders<T extends addresses$billing_ordersArgs<ExtArgs> = {}>(args?: Subset<T, addresses$billing_ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findMany'> | Null>;

    shipping_orders<T extends addresses$shipping_ordersArgs<ExtArgs> = {}>(args?: Subset<T, addresses$shipping_ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the addresses model
   */ 
  interface addressesFieldRefs {
    readonly id: FieldRef<"addresses", 'Int'>
    readonly type: FieldRef<"addresses", 'AddressType'>
    readonly full_name: FieldRef<"addresses", 'String'>
    readonly email: FieldRef<"addresses", 'String'>
    readonly phone: FieldRef<"addresses", 'String'>
    readonly street_address: FieldRef<"addresses", 'String'>
    readonly street_address_2: FieldRef<"addresses", 'String'>
    readonly district: FieldRef<"addresses", 'String'>
    readonly country: FieldRef<"addresses", 'String'>
    readonly zip_code: FieldRef<"addresses", 'Int'>
    readonly userId: FieldRef<"addresses", 'Int'>
    readonly createdAt: FieldRef<"addresses", 'DateTime'>
    readonly updatedAt: FieldRef<"addresses", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * addresses findUnique
   */
  export type addressesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressesInclude<ExtArgs> | null
    /**
     * Filter, which addresses to fetch.
     */
    where: addressesWhereUniqueInput
  }

  /**
   * addresses findUniqueOrThrow
   */
  export type addressesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressesInclude<ExtArgs> | null
    /**
     * Filter, which addresses to fetch.
     */
    where: addressesWhereUniqueInput
  }

  /**
   * addresses findFirst
   */
  export type addressesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressesInclude<ExtArgs> | null
    /**
     * Filter, which addresses to fetch.
     */
    where?: addressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     */
    orderBy?: addressesOrderByWithRelationInput | addressesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for addresses.
     */
    cursor?: addressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of addresses.
     */
    distinct?: AddressesScalarFieldEnum | AddressesScalarFieldEnum[]
  }

  /**
   * addresses findFirstOrThrow
   */
  export type addressesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressesInclude<ExtArgs> | null
    /**
     * Filter, which addresses to fetch.
     */
    where?: addressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     */
    orderBy?: addressesOrderByWithRelationInput | addressesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for addresses.
     */
    cursor?: addressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of addresses.
     */
    distinct?: AddressesScalarFieldEnum | AddressesScalarFieldEnum[]
  }

  /**
   * addresses findMany
   */
  export type addressesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressesInclude<ExtArgs> | null
    /**
     * Filter, which addresses to fetch.
     */
    where?: addressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     */
    orderBy?: addressesOrderByWithRelationInput | addressesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing addresses.
     */
    cursor?: addressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     */
    skip?: number
    distinct?: AddressesScalarFieldEnum | AddressesScalarFieldEnum[]
  }

  /**
   * addresses create
   */
  export type addressesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressesInclude<ExtArgs> | null
    /**
     * The data needed to create a addresses.
     */
    data: XOR<addressesCreateInput, addressesUncheckedCreateInput>
  }

  /**
   * addresses createMany
   */
  export type addressesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many addresses.
     */
    data: addressesCreateManyInput | addressesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * addresses update
   */
  export type addressesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressesInclude<ExtArgs> | null
    /**
     * The data needed to update a addresses.
     */
    data: XOR<addressesUpdateInput, addressesUncheckedUpdateInput>
    /**
     * Choose, which addresses to update.
     */
    where: addressesWhereUniqueInput
  }

  /**
   * addresses updateMany
   */
  export type addressesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update addresses.
     */
    data: XOR<addressesUpdateManyMutationInput, addressesUncheckedUpdateManyInput>
    /**
     * Filter which addresses to update
     */
    where?: addressesWhereInput
  }

  /**
   * addresses upsert
   */
  export type addressesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressesInclude<ExtArgs> | null
    /**
     * The filter to search for the addresses to update in case it exists.
     */
    where: addressesWhereUniqueInput
    /**
     * In case the addresses found by the `where` argument doesn't exist, create a new addresses with this data.
     */
    create: XOR<addressesCreateInput, addressesUncheckedCreateInput>
    /**
     * In case the addresses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<addressesUpdateInput, addressesUncheckedUpdateInput>
  }

  /**
   * addresses delete
   */
  export type addressesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressesInclude<ExtArgs> | null
    /**
     * Filter which addresses to delete.
     */
    where: addressesWhereUniqueInput
  }

  /**
   * addresses deleteMany
   */
  export type addressesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which addresses to delete
     */
    where?: addressesWhereInput
  }

  /**
   * addresses.billing_orders
   */
  export type addresses$billing_ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * addresses.shipping_orders
   */
  export type addresses$shipping_ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * addresses without action
   */
  export type addressesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressesInclude<ExtArgs> | null
  }


  /**
   * Model products
   */

  export type AggregateProducts = {
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  export type ProductsAvgAggregateOutputType = {
    id: number | null
    authorId: number | null
    price: number | null
    regular_price: number | null
    sale_price: number | null
    stock_quantity: number | null
    thumbnailId: number | null
    weight: number | null
    length: number | null
    width: number | null
    height: number | null
  }

  export type ProductsSumAggregateOutputType = {
    id: number | null
    authorId: number | null
    price: number | null
    regular_price: number | null
    sale_price: number | null
    stock_quantity: number | null
    thumbnailId: number | null
    weight: number | null
    length: number | null
    width: number | null
    height: number | null
  }

  export type ProductsMinAggregateOutputType = {
    id: number | null
    authorId: number | null
    name: string | null
    slug: string | null
    price: number | null
    regular_price: number | null
    sale_price: number | null
    stock_quantity: number | null
    stock_status: $Enums.StockStatus | null
    sku: string | null
    description: string | null
    short_description: string | null
    thumbnailId: number | null
    weight: number | null
    length: number | null
    width: number | null
    height: number | null
    status: $Enums.ProductStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductsMaxAggregateOutputType = {
    id: number | null
    authorId: number | null
    name: string | null
    slug: string | null
    price: number | null
    regular_price: number | null
    sale_price: number | null
    stock_quantity: number | null
    stock_status: $Enums.StockStatus | null
    sku: string | null
    description: string | null
    short_description: string | null
    thumbnailId: number | null
    weight: number | null
    length: number | null
    width: number | null
    height: number | null
    status: $Enums.ProductStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductsCountAggregateOutputType = {
    id: number
    authorId: number
    name: number
    slug: number
    price: number
    regular_price: number
    sale_price: number
    stock_quantity: number
    stock_status: number
    sku: number
    description: number
    short_description: number
    thumbnailId: number
    weight: number
    length: number
    width: number
    height: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductsAvgAggregateInputType = {
    id?: true
    authorId?: true
    price?: true
    regular_price?: true
    sale_price?: true
    stock_quantity?: true
    thumbnailId?: true
    weight?: true
    length?: true
    width?: true
    height?: true
  }

  export type ProductsSumAggregateInputType = {
    id?: true
    authorId?: true
    price?: true
    regular_price?: true
    sale_price?: true
    stock_quantity?: true
    thumbnailId?: true
    weight?: true
    length?: true
    width?: true
    height?: true
  }

  export type ProductsMinAggregateInputType = {
    id?: true
    authorId?: true
    name?: true
    slug?: true
    price?: true
    regular_price?: true
    sale_price?: true
    stock_quantity?: true
    stock_status?: true
    sku?: true
    description?: true
    short_description?: true
    thumbnailId?: true
    weight?: true
    length?: true
    width?: true
    height?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductsMaxAggregateInputType = {
    id?: true
    authorId?: true
    name?: true
    slug?: true
    price?: true
    regular_price?: true
    sale_price?: true
    stock_quantity?: true
    stock_status?: true
    sku?: true
    description?: true
    short_description?: true
    thumbnailId?: true
    weight?: true
    length?: true
    width?: true
    height?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductsCountAggregateInputType = {
    id?: true
    authorId?: true
    name?: true
    slug?: true
    price?: true
    regular_price?: true
    sale_price?: true
    stock_quantity?: true
    stock_status?: true
    sku?: true
    description?: true
    short_description?: true
    thumbnailId?: true
    weight?: true
    length?: true
    width?: true
    height?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to aggregate.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsMaxAggregateInputType
  }

  export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts[P]>
      : GetScalarType<T[P], AggregateProducts[P]>
  }




  export type productsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
    orderBy?: productsOrderByWithAggregationInput | productsOrderByWithAggregationInput[]
    by: ProductsScalarFieldEnum[] | ProductsScalarFieldEnum
    having?: productsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsCountAggregateInputType | true
    _avg?: ProductsAvgAggregateInputType
    _sum?: ProductsSumAggregateInputType
    _min?: ProductsMinAggregateInputType
    _max?: ProductsMaxAggregateInputType
  }

  export type ProductsGroupByOutputType = {
    id: number
    authorId: number
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price: number | null
    stock_quantity: number | null
    stock_status: $Enums.StockStatus
    sku: string | null
    description: string | null
    short_description: string | null
    thumbnailId: number | null
    weight: number | null
    length: number | null
    width: number | null
    height: number | null
    status: $Enums.ProductStatus
    createdAt: Date
    updatedAt: Date
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  type GetProductsGroupByPayload<T extends productsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsGroupByOutputType[P]>
        }
      >
    >


  export type productsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authorId?: boolean
    name?: boolean
    slug?: boolean
    price?: boolean
    regular_price?: boolean
    sale_price?: boolean
    stock_quantity?: boolean
    stock_status?: boolean
    sku?: boolean
    description?: boolean
    short_description?: boolean
    thumbnailId?: boolean
    weight?: boolean
    length?: boolean
    width?: boolean
    height?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    author?: boolean | users_metaDefaultArgs<ExtArgs>
    thumbnail?: boolean | products$thumbnailArgs<ExtArgs>
    categories?: boolean | products$categoriesArgs<ExtArgs>
    carts?: boolean | products$cartsArgs<ExtArgs>
    galleries?: boolean | products$galleriesArgs<ExtArgs>
    order_items?: boolean | products$order_itemsArgs<ExtArgs>
    wishlists?: boolean | products$wishlistsArgs<ExtArgs>
    reviews?: boolean | products$reviewsArgs<ExtArgs>
    _count?: boolean | ProductsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["products"]>

  export type productsSelectScalar = {
    id?: boolean
    authorId?: boolean
    name?: boolean
    slug?: boolean
    price?: boolean
    regular_price?: boolean
    sale_price?: boolean
    stock_quantity?: boolean
    stock_status?: boolean
    sku?: boolean
    description?: boolean
    short_description?: boolean
    thumbnailId?: boolean
    weight?: boolean
    length?: boolean
    width?: boolean
    height?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type productsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | users_metaDefaultArgs<ExtArgs>
    thumbnail?: boolean | products$thumbnailArgs<ExtArgs>
    categories?: boolean | products$categoriesArgs<ExtArgs>
    carts?: boolean | products$cartsArgs<ExtArgs>
    galleries?: boolean | products$galleriesArgs<ExtArgs>
    order_items?: boolean | products$order_itemsArgs<ExtArgs>
    wishlists?: boolean | products$wishlistsArgs<ExtArgs>
    reviews?: boolean | products$reviewsArgs<ExtArgs>
    _count?: boolean | ProductsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $productsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "products"
    objects: {
      author: Prisma.$users_metaPayload<ExtArgs>
      thumbnail: Prisma.$mediaPayload<ExtArgs> | null
      categories: Prisma.$categoriesOnProductsPayload<ExtArgs>[]
      carts: Prisma.$productCartsPayload<ExtArgs>[]
      galleries: Prisma.$productGalleriesPayload<ExtArgs>[]
      order_items: Prisma.$orderItemsPayload<ExtArgs>[]
      wishlists: Prisma.$wishlistsPayload<ExtArgs>[]
      reviews: Prisma.$productReviewsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      authorId: number
      name: string
      slug: string
      price: number
      regular_price: number
      sale_price: number | null
      stock_quantity: number | null
      stock_status: $Enums.StockStatus
      sku: string | null
      description: string | null
      short_description: string | null
      thumbnailId: number | null
      weight: number | null
      length: number | null
      width: number | null
      height: number | null
      status: $Enums.ProductStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["products"]>
    composites: {}
  }


  type productsGetPayload<S extends boolean | null | undefined | productsDefaultArgs> = $Result.GetResult<Prisma.$productsPayload, S>

  type productsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<productsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductsCountAggregateInputType | true
    }

  export interface productsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['products'], meta: { name: 'products' } }
    /**
     * Find zero or one Products that matches the filter.
     * @param {productsFindUniqueArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, productsFindUniqueArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Products that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {productsFindUniqueOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindFirstArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Products that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.products.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.products.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsWithIdOnly = await prisma.products.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Products.
     * @param {productsCreateArgs} args - Arguments to create a Products.
     * @example
     * // Create one Products
     * const Products = await prisma.products.create({
     *   data: {
     *     // ... data to create a Products
     *   }
     * })
     * 
    **/
    create<T extends productsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, productsCreateArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     * @param {productsCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const products = await prisma.products.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends productsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Products.
     * @param {productsDeleteArgs} args - Arguments to delete one Products.
     * @example
     * // Delete one Products
     * const Products = await prisma.products.delete({
     *   where: {
     *     // ... filter to delete one Products
     *   }
     * })
     * 
    **/
    delete<T extends productsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, productsDeleteArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Products.
     * @param {productsUpdateArgs} args - Arguments to update one Products.
     * @example
     * // Update one Products
     * const products = await prisma.products.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, productsUpdateArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {productsDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.products.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, productsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Products.
     * @param {productsUpsertArgs} args - Arguments to update or create a Products.
     * @example
     * // Update or create a Products
     * const products = await prisma.products.upsert({
     *   create: {
     *     // ... data to create a Products
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products we want to update
     *   }
     * })
    **/
    upsert<T extends productsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, productsUpsertArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.products.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productsCountArgs>(
      args?: Subset<T, productsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsAggregateArgs>(args: Subset<T, ProductsAggregateArgs>): Prisma.PrismaPromise<GetProductsAggregateType<T>>

    /**
     * Group by Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productsGroupByArgs['orderBy'] }
        : { orderBy?: productsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the products model
   */
  readonly fields: productsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for products.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    author<T extends users_metaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, users_metaDefaultArgs<ExtArgs>>): Prisma__users_metaClient<$Result.GetResult<Prisma.$users_metaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    thumbnail<T extends products$thumbnailArgs<ExtArgs> = {}>(args?: Subset<T, products$thumbnailArgs<ExtArgs>>): Prisma__mediaClient<$Result.GetResult<Prisma.$mediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    categories<T extends products$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, products$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriesOnProductsPayload<ExtArgs>, T, 'findMany'> | Null>;

    carts<T extends products$cartsArgs<ExtArgs> = {}>(args?: Subset<T, products$cartsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productCartsPayload<ExtArgs>, T, 'findMany'> | Null>;

    galleries<T extends products$galleriesArgs<ExtArgs> = {}>(args?: Subset<T, products$galleriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productGalleriesPayload<ExtArgs>, T, 'findMany'> | Null>;

    order_items<T extends products$order_itemsArgs<ExtArgs> = {}>(args?: Subset<T, products$order_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderItemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    wishlists<T extends products$wishlistsArgs<ExtArgs> = {}>(args?: Subset<T, products$wishlistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$wishlistsPayload<ExtArgs>, T, 'findMany'> | Null>;

    reviews<T extends products$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, products$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productReviewsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the products model
   */ 
  interface productsFieldRefs {
    readonly id: FieldRef<"products", 'Int'>
    readonly authorId: FieldRef<"products", 'Int'>
    readonly name: FieldRef<"products", 'String'>
    readonly slug: FieldRef<"products", 'String'>
    readonly price: FieldRef<"products", 'Float'>
    readonly regular_price: FieldRef<"products", 'Float'>
    readonly sale_price: FieldRef<"products", 'Float'>
    readonly stock_quantity: FieldRef<"products", 'Int'>
    readonly stock_status: FieldRef<"products", 'StockStatus'>
    readonly sku: FieldRef<"products", 'String'>
    readonly description: FieldRef<"products", 'String'>
    readonly short_description: FieldRef<"products", 'String'>
    readonly thumbnailId: FieldRef<"products", 'Int'>
    readonly weight: FieldRef<"products", 'Float'>
    readonly length: FieldRef<"products", 'Float'>
    readonly width: FieldRef<"products", 'Float'>
    readonly height: FieldRef<"products", 'Float'>
    readonly status: FieldRef<"products", 'ProductStatus'>
    readonly createdAt: FieldRef<"products", 'DateTime'>
    readonly updatedAt: FieldRef<"products", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * products findUnique
   */
  export type productsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products findUniqueOrThrow
   */
  export type productsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products findFirst
   */
  export type productsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * products findFirstOrThrow
   */
  export type productsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * products findMany
   */
  export type productsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * products create
   */
  export type productsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The data needed to create a products.
     */
    data: XOR<productsCreateInput, productsUncheckedCreateInput>
  }

  /**
   * products createMany
   */
  export type productsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many products.
     */
    data: productsCreateManyInput | productsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * products update
   */
  export type productsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The data needed to update a products.
     */
    data: XOR<productsUpdateInput, productsUncheckedUpdateInput>
    /**
     * Choose, which products to update.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products updateMany
   */
  export type productsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update products.
     */
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productsWhereInput
  }

  /**
   * products upsert
   */
  export type productsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The filter to search for the products to update in case it exists.
     */
    where: productsWhereUniqueInput
    /**
     * In case the products found by the `where` argument doesn't exist, create a new products with this data.
     */
    create: XOR<productsCreateInput, productsUncheckedCreateInput>
    /**
     * In case the products was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productsUpdateInput, productsUncheckedUpdateInput>
  }

  /**
   * products delete
   */
  export type productsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter which products to delete.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products deleteMany
   */
  export type productsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to delete
     */
    where?: productsWhereInput
  }

  /**
   * products.thumbnail
   */
  export type products$thumbnailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the media
     */
    select?: mediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mediaInclude<ExtArgs> | null
    where?: mediaWhereInput
  }

  /**
   * products.categories
   */
  export type products$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesOnProducts
     */
    select?: categoriesOnProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesOnProductsInclude<ExtArgs> | null
    where?: categoriesOnProductsWhereInput
    orderBy?: categoriesOnProductsOrderByWithRelationInput | categoriesOnProductsOrderByWithRelationInput[]
    cursor?: categoriesOnProductsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoriesOnProductsScalarFieldEnum | CategoriesOnProductsScalarFieldEnum[]
  }

  /**
   * products.carts
   */
  export type products$cartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCarts
     */
    select?: productCartsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCartsInclude<ExtArgs> | null
    where?: productCartsWhereInput
    orderBy?: productCartsOrderByWithRelationInput | productCartsOrderByWithRelationInput[]
    cursor?: productCartsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductCartsScalarFieldEnum | ProductCartsScalarFieldEnum[]
  }

  /**
   * products.galleries
   */
  export type products$galleriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productGalleries
     */
    select?: productGalleriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productGalleriesInclude<ExtArgs> | null
    where?: productGalleriesWhereInput
    orderBy?: productGalleriesOrderByWithRelationInput | productGalleriesOrderByWithRelationInput[]
    cursor?: productGalleriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductGalleriesScalarFieldEnum | ProductGalleriesScalarFieldEnum[]
  }

  /**
   * products.order_items
   */
  export type products$order_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderItems
     */
    select?: orderItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderItemsInclude<ExtArgs> | null
    where?: orderItemsWhereInput
    orderBy?: orderItemsOrderByWithRelationInput | orderItemsOrderByWithRelationInput[]
    cursor?: orderItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemsScalarFieldEnum | OrderItemsScalarFieldEnum[]
  }

  /**
   * products.wishlists
   */
  export type products$wishlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wishlists
     */
    select?: wishlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wishlistsInclude<ExtArgs> | null
    where?: wishlistsWhereInput
    orderBy?: wishlistsOrderByWithRelationInput | wishlistsOrderByWithRelationInput[]
    cursor?: wishlistsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WishlistsScalarFieldEnum | WishlistsScalarFieldEnum[]
  }

  /**
   * products.reviews
   */
  export type products$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productReviews
     */
    select?: productReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productReviewsInclude<ExtArgs> | null
    where?: productReviewsWhereInput
    orderBy?: productReviewsOrderByWithRelationInput | productReviewsOrderByWithRelationInput[]
    cursor?: productReviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductReviewsScalarFieldEnum | ProductReviewsScalarFieldEnum[]
  }

  /**
   * products without action
   */
  export type productsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
  }


  /**
   * Model productGalleries
   */

  export type AggregateProductGalleries = {
    _count: ProductGalleriesCountAggregateOutputType | null
    _avg: ProductGalleriesAvgAggregateOutputType | null
    _sum: ProductGalleriesSumAggregateOutputType | null
    _min: ProductGalleriesMinAggregateOutputType | null
    _max: ProductGalleriesMaxAggregateOutputType | null
  }

  export type ProductGalleriesAvgAggregateOutputType = {
    productId: number | null
    mediaId: number | null
  }

  export type ProductGalleriesSumAggregateOutputType = {
    productId: number | null
    mediaId: number | null
  }

  export type ProductGalleriesMinAggregateOutputType = {
    productId: number | null
    mediaId: number | null
  }

  export type ProductGalleriesMaxAggregateOutputType = {
    productId: number | null
    mediaId: number | null
  }

  export type ProductGalleriesCountAggregateOutputType = {
    productId: number
    mediaId: number
    _all: number
  }


  export type ProductGalleriesAvgAggregateInputType = {
    productId?: true
    mediaId?: true
  }

  export type ProductGalleriesSumAggregateInputType = {
    productId?: true
    mediaId?: true
  }

  export type ProductGalleriesMinAggregateInputType = {
    productId?: true
    mediaId?: true
  }

  export type ProductGalleriesMaxAggregateInputType = {
    productId?: true
    mediaId?: true
  }

  export type ProductGalleriesCountAggregateInputType = {
    productId?: true
    mediaId?: true
    _all?: true
  }

  export type ProductGalleriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which productGalleries to aggregate.
     */
    where?: productGalleriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productGalleries to fetch.
     */
    orderBy?: productGalleriesOrderByWithRelationInput | productGalleriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productGalleriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productGalleries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productGalleries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned productGalleries
    **/
    _count?: true | ProductGalleriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductGalleriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductGalleriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductGalleriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductGalleriesMaxAggregateInputType
  }

  export type GetProductGalleriesAggregateType<T extends ProductGalleriesAggregateArgs> = {
        [P in keyof T & keyof AggregateProductGalleries]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductGalleries[P]>
      : GetScalarType<T[P], AggregateProductGalleries[P]>
  }




  export type productGalleriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productGalleriesWhereInput
    orderBy?: productGalleriesOrderByWithAggregationInput | productGalleriesOrderByWithAggregationInput[]
    by: ProductGalleriesScalarFieldEnum[] | ProductGalleriesScalarFieldEnum
    having?: productGalleriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductGalleriesCountAggregateInputType | true
    _avg?: ProductGalleriesAvgAggregateInputType
    _sum?: ProductGalleriesSumAggregateInputType
    _min?: ProductGalleriesMinAggregateInputType
    _max?: ProductGalleriesMaxAggregateInputType
  }

  export type ProductGalleriesGroupByOutputType = {
    productId: number
    mediaId: number
    _count: ProductGalleriesCountAggregateOutputType | null
    _avg: ProductGalleriesAvgAggregateOutputType | null
    _sum: ProductGalleriesSumAggregateOutputType | null
    _min: ProductGalleriesMinAggregateOutputType | null
    _max: ProductGalleriesMaxAggregateOutputType | null
  }

  type GetProductGalleriesGroupByPayload<T extends productGalleriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGalleriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGalleriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGalleriesGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGalleriesGroupByOutputType[P]>
        }
      >
    >


  export type productGalleriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    productId?: boolean
    mediaId?: boolean
    product?: boolean | productsDefaultArgs<ExtArgs>
    media?: boolean | mediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productGalleries"]>

  export type productGalleriesSelectScalar = {
    productId?: boolean
    mediaId?: boolean
  }


  export type productGalleriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | productsDefaultArgs<ExtArgs>
    media?: boolean | mediaDefaultArgs<ExtArgs>
  }


  export type $productGalleriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "productGalleries"
    objects: {
      product: Prisma.$productsPayload<ExtArgs>
      media: Prisma.$mediaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      productId: number
      mediaId: number
    }, ExtArgs["result"]["productGalleries"]>
    composites: {}
  }


  type productGalleriesGetPayload<S extends boolean | null | undefined | productGalleriesDefaultArgs> = $Result.GetResult<Prisma.$productGalleriesPayload, S>

  type productGalleriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<productGalleriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductGalleriesCountAggregateInputType | true
    }

  export interface productGalleriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['productGalleries'], meta: { name: 'productGalleries' } }
    /**
     * Find zero or one ProductGalleries that matches the filter.
     * @param {productGalleriesFindUniqueArgs} args - Arguments to find a ProductGalleries
     * @example
     * // Get one ProductGalleries
     * const productGalleries = await prisma.productGalleries.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productGalleriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, productGalleriesFindUniqueArgs<ExtArgs>>
    ): Prisma__productGalleriesClient<$Result.GetResult<Prisma.$productGalleriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProductGalleries that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {productGalleriesFindUniqueOrThrowArgs} args - Arguments to find a ProductGalleries
     * @example
     * // Get one ProductGalleries
     * const productGalleries = await prisma.productGalleries.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productGalleriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productGalleriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__productGalleriesClient<$Result.GetResult<Prisma.$productGalleriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProductGalleries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productGalleriesFindFirstArgs} args - Arguments to find a ProductGalleries
     * @example
     * // Get one ProductGalleries
     * const productGalleries = await prisma.productGalleries.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productGalleriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, productGalleriesFindFirstArgs<ExtArgs>>
    ): Prisma__productGalleriesClient<$Result.GetResult<Prisma.$productGalleriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProductGalleries that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productGalleriesFindFirstOrThrowArgs} args - Arguments to find a ProductGalleries
     * @example
     * // Get one ProductGalleries
     * const productGalleries = await prisma.productGalleries.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productGalleriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productGalleriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__productGalleriesClient<$Result.GetResult<Prisma.$productGalleriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProductGalleries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productGalleriesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductGalleries
     * const productGalleries = await prisma.productGalleries.findMany()
     * 
     * // Get first 10 ProductGalleries
     * const productGalleries = await prisma.productGalleries.findMany({ take: 10 })
     * 
     * // Only select the `productId`
     * const productGalleriesWithProductIdOnly = await prisma.productGalleries.findMany({ select: { productId: true } })
     * 
    **/
    findMany<T extends productGalleriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productGalleriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productGalleriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProductGalleries.
     * @param {productGalleriesCreateArgs} args - Arguments to create a ProductGalleries.
     * @example
     * // Create one ProductGalleries
     * const ProductGalleries = await prisma.productGalleries.create({
     *   data: {
     *     // ... data to create a ProductGalleries
     *   }
     * })
     * 
    **/
    create<T extends productGalleriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, productGalleriesCreateArgs<ExtArgs>>
    ): Prisma__productGalleriesClient<$Result.GetResult<Prisma.$productGalleriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProductGalleries.
     * @param {productGalleriesCreateManyArgs} args - Arguments to create many ProductGalleries.
     * @example
     * // Create many ProductGalleries
     * const productGalleries = await prisma.productGalleries.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends productGalleriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productGalleriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductGalleries.
     * @param {productGalleriesDeleteArgs} args - Arguments to delete one ProductGalleries.
     * @example
     * // Delete one ProductGalleries
     * const ProductGalleries = await prisma.productGalleries.delete({
     *   where: {
     *     // ... filter to delete one ProductGalleries
     *   }
     * })
     * 
    **/
    delete<T extends productGalleriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, productGalleriesDeleteArgs<ExtArgs>>
    ): Prisma__productGalleriesClient<$Result.GetResult<Prisma.$productGalleriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProductGalleries.
     * @param {productGalleriesUpdateArgs} args - Arguments to update one ProductGalleries.
     * @example
     * // Update one ProductGalleries
     * const productGalleries = await prisma.productGalleries.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productGalleriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, productGalleriesUpdateArgs<ExtArgs>>
    ): Prisma__productGalleriesClient<$Result.GetResult<Prisma.$productGalleriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProductGalleries.
     * @param {productGalleriesDeleteManyArgs} args - Arguments to filter ProductGalleries to delete.
     * @example
     * // Delete a few ProductGalleries
     * const { count } = await prisma.productGalleries.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productGalleriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productGalleriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductGalleries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productGalleriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductGalleries
     * const productGalleries = await prisma.productGalleries.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productGalleriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, productGalleriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductGalleries.
     * @param {productGalleriesUpsertArgs} args - Arguments to update or create a ProductGalleries.
     * @example
     * // Update or create a ProductGalleries
     * const productGalleries = await prisma.productGalleries.upsert({
     *   create: {
     *     // ... data to create a ProductGalleries
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductGalleries we want to update
     *   }
     * })
    **/
    upsert<T extends productGalleriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, productGalleriesUpsertArgs<ExtArgs>>
    ): Prisma__productGalleriesClient<$Result.GetResult<Prisma.$productGalleriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProductGalleries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productGalleriesCountArgs} args - Arguments to filter ProductGalleries to count.
     * @example
     * // Count the number of ProductGalleries
     * const count = await prisma.productGalleries.count({
     *   where: {
     *     // ... the filter for the ProductGalleries we want to count
     *   }
     * })
    **/
    count<T extends productGalleriesCountArgs>(
      args?: Subset<T, productGalleriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductGalleriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductGalleries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGalleriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductGalleriesAggregateArgs>(args: Subset<T, ProductGalleriesAggregateArgs>): Prisma.PrismaPromise<GetProductGalleriesAggregateType<T>>

    /**
     * Group by ProductGalleries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productGalleriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productGalleriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productGalleriesGroupByArgs['orderBy'] }
        : { orderBy?: productGalleriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productGalleriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGalleriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the productGalleries model
   */
  readonly fields: productGalleriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for productGalleries.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productGalleriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    media<T extends mediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, mediaDefaultArgs<ExtArgs>>): Prisma__mediaClient<$Result.GetResult<Prisma.$mediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the productGalleries model
   */ 
  interface productGalleriesFieldRefs {
    readonly productId: FieldRef<"productGalleries", 'Int'>
    readonly mediaId: FieldRef<"productGalleries", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * productGalleries findUnique
   */
  export type productGalleriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productGalleries
     */
    select?: productGalleriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productGalleriesInclude<ExtArgs> | null
    /**
     * Filter, which productGalleries to fetch.
     */
    where: productGalleriesWhereUniqueInput
  }

  /**
   * productGalleries findUniqueOrThrow
   */
  export type productGalleriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productGalleries
     */
    select?: productGalleriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productGalleriesInclude<ExtArgs> | null
    /**
     * Filter, which productGalleries to fetch.
     */
    where: productGalleriesWhereUniqueInput
  }

  /**
   * productGalleries findFirst
   */
  export type productGalleriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productGalleries
     */
    select?: productGalleriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productGalleriesInclude<ExtArgs> | null
    /**
     * Filter, which productGalleries to fetch.
     */
    where?: productGalleriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productGalleries to fetch.
     */
    orderBy?: productGalleriesOrderByWithRelationInput | productGalleriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productGalleries.
     */
    cursor?: productGalleriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productGalleries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productGalleries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productGalleries.
     */
    distinct?: ProductGalleriesScalarFieldEnum | ProductGalleriesScalarFieldEnum[]
  }

  /**
   * productGalleries findFirstOrThrow
   */
  export type productGalleriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productGalleries
     */
    select?: productGalleriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productGalleriesInclude<ExtArgs> | null
    /**
     * Filter, which productGalleries to fetch.
     */
    where?: productGalleriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productGalleries to fetch.
     */
    orderBy?: productGalleriesOrderByWithRelationInput | productGalleriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productGalleries.
     */
    cursor?: productGalleriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productGalleries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productGalleries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productGalleries.
     */
    distinct?: ProductGalleriesScalarFieldEnum | ProductGalleriesScalarFieldEnum[]
  }

  /**
   * productGalleries findMany
   */
  export type productGalleriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productGalleries
     */
    select?: productGalleriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productGalleriesInclude<ExtArgs> | null
    /**
     * Filter, which productGalleries to fetch.
     */
    where?: productGalleriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productGalleries to fetch.
     */
    orderBy?: productGalleriesOrderByWithRelationInput | productGalleriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing productGalleries.
     */
    cursor?: productGalleriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productGalleries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productGalleries.
     */
    skip?: number
    distinct?: ProductGalleriesScalarFieldEnum | ProductGalleriesScalarFieldEnum[]
  }

  /**
   * productGalleries create
   */
  export type productGalleriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productGalleries
     */
    select?: productGalleriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productGalleriesInclude<ExtArgs> | null
    /**
     * The data needed to create a productGalleries.
     */
    data: XOR<productGalleriesCreateInput, productGalleriesUncheckedCreateInput>
  }

  /**
   * productGalleries createMany
   */
  export type productGalleriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many productGalleries.
     */
    data: productGalleriesCreateManyInput | productGalleriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * productGalleries update
   */
  export type productGalleriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productGalleries
     */
    select?: productGalleriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productGalleriesInclude<ExtArgs> | null
    /**
     * The data needed to update a productGalleries.
     */
    data: XOR<productGalleriesUpdateInput, productGalleriesUncheckedUpdateInput>
    /**
     * Choose, which productGalleries to update.
     */
    where: productGalleriesWhereUniqueInput
  }

  /**
   * productGalleries updateMany
   */
  export type productGalleriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update productGalleries.
     */
    data: XOR<productGalleriesUpdateManyMutationInput, productGalleriesUncheckedUpdateManyInput>
    /**
     * Filter which productGalleries to update
     */
    where?: productGalleriesWhereInput
  }

  /**
   * productGalleries upsert
   */
  export type productGalleriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productGalleries
     */
    select?: productGalleriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productGalleriesInclude<ExtArgs> | null
    /**
     * The filter to search for the productGalleries to update in case it exists.
     */
    where: productGalleriesWhereUniqueInput
    /**
     * In case the productGalleries found by the `where` argument doesn't exist, create a new productGalleries with this data.
     */
    create: XOR<productGalleriesCreateInput, productGalleriesUncheckedCreateInput>
    /**
     * In case the productGalleries was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productGalleriesUpdateInput, productGalleriesUncheckedUpdateInput>
  }

  /**
   * productGalleries delete
   */
  export type productGalleriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productGalleries
     */
    select?: productGalleriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productGalleriesInclude<ExtArgs> | null
    /**
     * Filter which productGalleries to delete.
     */
    where: productGalleriesWhereUniqueInput
  }

  /**
   * productGalleries deleteMany
   */
  export type productGalleriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which productGalleries to delete
     */
    where?: productGalleriesWhereInput
  }

  /**
   * productGalleries without action
   */
  export type productGalleriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productGalleries
     */
    select?: productGalleriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productGalleriesInclude<ExtArgs> | null
  }


  /**
   * Model productCategories
   */

  export type AggregateProductCategories = {
    _count: ProductCategoriesCountAggregateOutputType | null
    _avg: ProductCategoriesAvgAggregateOutputType | null
    _sum: ProductCategoriesSumAggregateOutputType | null
    _min: ProductCategoriesMinAggregateOutputType | null
    _max: ProductCategoriesMaxAggregateOutputType | null
  }

  export type ProductCategoriesAvgAggregateOutputType = {
    id: number | null
    photoId: number | null
  }

  export type ProductCategoriesSumAggregateOutputType = {
    id: number | null
    photoId: number | null
  }

  export type ProductCategoriesMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    photoId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductCategoriesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    photoId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductCategoriesCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    photoId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductCategoriesAvgAggregateInputType = {
    id?: true
    photoId?: true
  }

  export type ProductCategoriesSumAggregateInputType = {
    id?: true
    photoId?: true
  }

  export type ProductCategoriesMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    photoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductCategoriesMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    photoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductCategoriesCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    photoId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductCategoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which productCategories to aggregate.
     */
    where?: productCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productCategories to fetch.
     */
    orderBy?: productCategoriesOrderByWithRelationInput | productCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned productCategories
    **/
    _count?: true | ProductCategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductCategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductCategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductCategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductCategoriesMaxAggregateInputType
  }

  export type GetProductCategoriesAggregateType<T extends ProductCategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateProductCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductCategories[P]>
      : GetScalarType<T[P], AggregateProductCategories[P]>
  }




  export type productCategoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productCategoriesWhereInput
    orderBy?: productCategoriesOrderByWithAggregationInput | productCategoriesOrderByWithAggregationInput[]
    by: ProductCategoriesScalarFieldEnum[] | ProductCategoriesScalarFieldEnum
    having?: productCategoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCategoriesCountAggregateInputType | true
    _avg?: ProductCategoriesAvgAggregateInputType
    _sum?: ProductCategoriesSumAggregateInputType
    _min?: ProductCategoriesMinAggregateInputType
    _max?: ProductCategoriesMaxAggregateInputType
  }

  export type ProductCategoriesGroupByOutputType = {
    id: number
    name: string
    slug: string
    photoId: number | null
    createdAt: Date
    updatedAt: Date
    _count: ProductCategoriesCountAggregateOutputType | null
    _avg: ProductCategoriesAvgAggregateOutputType | null
    _sum: ProductCategoriesSumAggregateOutputType | null
    _min: ProductCategoriesMinAggregateOutputType | null
    _max: ProductCategoriesMaxAggregateOutputType | null
  }

  type GetProductCategoriesGroupByPayload<T extends productCategoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductCategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductCategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductCategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], ProductCategoriesGroupByOutputType[P]>
        }
      >
    >


  export type productCategoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    photoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    photo?: boolean | productCategories$photoArgs<ExtArgs>
    products?: boolean | productCategories$productsArgs<ExtArgs>
    _count?: boolean | ProductCategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productCategories"]>

  export type productCategoriesSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    photoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type productCategoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    photo?: boolean | productCategories$photoArgs<ExtArgs>
    products?: boolean | productCategories$productsArgs<ExtArgs>
    _count?: boolean | ProductCategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $productCategoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "productCategories"
    objects: {
      photo: Prisma.$mediaPayload<ExtArgs> | null
      products: Prisma.$categoriesOnProductsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      slug: string
      photoId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["productCategories"]>
    composites: {}
  }


  type productCategoriesGetPayload<S extends boolean | null | undefined | productCategoriesDefaultArgs> = $Result.GetResult<Prisma.$productCategoriesPayload, S>

  type productCategoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<productCategoriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCategoriesCountAggregateInputType | true
    }

  export interface productCategoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['productCategories'], meta: { name: 'productCategories' } }
    /**
     * Find zero or one ProductCategories that matches the filter.
     * @param {productCategoriesFindUniqueArgs} args - Arguments to find a ProductCategories
     * @example
     * // Get one ProductCategories
     * const productCategories = await prisma.productCategories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productCategoriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, productCategoriesFindUniqueArgs<ExtArgs>>
    ): Prisma__productCategoriesClient<$Result.GetResult<Prisma.$productCategoriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProductCategories that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {productCategoriesFindUniqueOrThrowArgs} args - Arguments to find a ProductCategories
     * @example
     * // Get one ProductCategories
     * const productCategories = await prisma.productCategories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productCategoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productCategoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__productCategoriesClient<$Result.GetResult<Prisma.$productCategoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProductCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCategoriesFindFirstArgs} args - Arguments to find a ProductCategories
     * @example
     * // Get one ProductCategories
     * const productCategories = await prisma.productCategories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productCategoriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, productCategoriesFindFirstArgs<ExtArgs>>
    ): Prisma__productCategoriesClient<$Result.GetResult<Prisma.$productCategoriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProductCategories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCategoriesFindFirstOrThrowArgs} args - Arguments to find a ProductCategories
     * @example
     * // Get one ProductCategories
     * const productCategories = await prisma.productCategories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productCategoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productCategoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__productCategoriesClient<$Result.GetResult<Prisma.$productCategoriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProductCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCategoriesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductCategories
     * const productCategories = await prisma.productCategories.findMany()
     * 
     * // Get first 10 ProductCategories
     * const productCategories = await prisma.productCategories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productCategoriesWithIdOnly = await prisma.productCategories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productCategoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productCategoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productCategoriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProductCategories.
     * @param {productCategoriesCreateArgs} args - Arguments to create a ProductCategories.
     * @example
     * // Create one ProductCategories
     * const ProductCategories = await prisma.productCategories.create({
     *   data: {
     *     // ... data to create a ProductCategories
     *   }
     * })
     * 
    **/
    create<T extends productCategoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, productCategoriesCreateArgs<ExtArgs>>
    ): Prisma__productCategoriesClient<$Result.GetResult<Prisma.$productCategoriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProductCategories.
     * @param {productCategoriesCreateManyArgs} args - Arguments to create many ProductCategories.
     * @example
     * // Create many ProductCategories
     * const productCategories = await prisma.productCategories.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends productCategoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productCategoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductCategories.
     * @param {productCategoriesDeleteArgs} args - Arguments to delete one ProductCategories.
     * @example
     * // Delete one ProductCategories
     * const ProductCategories = await prisma.productCategories.delete({
     *   where: {
     *     // ... filter to delete one ProductCategories
     *   }
     * })
     * 
    **/
    delete<T extends productCategoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, productCategoriesDeleteArgs<ExtArgs>>
    ): Prisma__productCategoriesClient<$Result.GetResult<Prisma.$productCategoriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProductCategories.
     * @param {productCategoriesUpdateArgs} args - Arguments to update one ProductCategories.
     * @example
     * // Update one ProductCategories
     * const productCategories = await prisma.productCategories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productCategoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, productCategoriesUpdateArgs<ExtArgs>>
    ): Prisma__productCategoriesClient<$Result.GetResult<Prisma.$productCategoriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProductCategories.
     * @param {productCategoriesDeleteManyArgs} args - Arguments to filter ProductCategories to delete.
     * @example
     * // Delete a few ProductCategories
     * const { count } = await prisma.productCategories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productCategoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productCategoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCategoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductCategories
     * const productCategories = await prisma.productCategories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productCategoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, productCategoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductCategories.
     * @param {productCategoriesUpsertArgs} args - Arguments to update or create a ProductCategories.
     * @example
     * // Update or create a ProductCategories
     * const productCategories = await prisma.productCategories.upsert({
     *   create: {
     *     // ... data to create a ProductCategories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductCategories we want to update
     *   }
     * })
    **/
    upsert<T extends productCategoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, productCategoriesUpsertArgs<ExtArgs>>
    ): Prisma__productCategoriesClient<$Result.GetResult<Prisma.$productCategoriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProductCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCategoriesCountArgs} args - Arguments to filter ProductCategories to count.
     * @example
     * // Count the number of ProductCategories
     * const count = await prisma.productCategories.count({
     *   where: {
     *     // ... the filter for the ProductCategories we want to count
     *   }
     * })
    **/
    count<T extends productCategoriesCountArgs>(
      args?: Subset<T, productCategoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductCategoriesAggregateArgs>(args: Subset<T, ProductCategoriesAggregateArgs>): Prisma.PrismaPromise<GetProductCategoriesAggregateType<T>>

    /**
     * Group by ProductCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCategoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productCategoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productCategoriesGroupByArgs['orderBy'] }
        : { orderBy?: productCategoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productCategoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the productCategories model
   */
  readonly fields: productCategoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for productCategories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productCategoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    photo<T extends productCategories$photoArgs<ExtArgs> = {}>(args?: Subset<T, productCategories$photoArgs<ExtArgs>>): Prisma__mediaClient<$Result.GetResult<Prisma.$mediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    products<T extends productCategories$productsArgs<ExtArgs> = {}>(args?: Subset<T, productCategories$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriesOnProductsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the productCategories model
   */ 
  interface productCategoriesFieldRefs {
    readonly id: FieldRef<"productCategories", 'Int'>
    readonly name: FieldRef<"productCategories", 'String'>
    readonly slug: FieldRef<"productCategories", 'String'>
    readonly photoId: FieldRef<"productCategories", 'Int'>
    readonly createdAt: FieldRef<"productCategories", 'DateTime'>
    readonly updatedAt: FieldRef<"productCategories", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * productCategories findUnique
   */
  export type productCategoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCategories
     */
    select?: productCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which productCategories to fetch.
     */
    where: productCategoriesWhereUniqueInput
  }

  /**
   * productCategories findUniqueOrThrow
   */
  export type productCategoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCategories
     */
    select?: productCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which productCategories to fetch.
     */
    where: productCategoriesWhereUniqueInput
  }

  /**
   * productCategories findFirst
   */
  export type productCategoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCategories
     */
    select?: productCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which productCategories to fetch.
     */
    where?: productCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productCategories to fetch.
     */
    orderBy?: productCategoriesOrderByWithRelationInput | productCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productCategories.
     */
    cursor?: productCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productCategories.
     */
    distinct?: ProductCategoriesScalarFieldEnum | ProductCategoriesScalarFieldEnum[]
  }

  /**
   * productCategories findFirstOrThrow
   */
  export type productCategoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCategories
     */
    select?: productCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which productCategories to fetch.
     */
    where?: productCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productCategories to fetch.
     */
    orderBy?: productCategoriesOrderByWithRelationInput | productCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productCategories.
     */
    cursor?: productCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productCategories.
     */
    distinct?: ProductCategoriesScalarFieldEnum | ProductCategoriesScalarFieldEnum[]
  }

  /**
   * productCategories findMany
   */
  export type productCategoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCategories
     */
    select?: productCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which productCategories to fetch.
     */
    where?: productCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productCategories to fetch.
     */
    orderBy?: productCategoriesOrderByWithRelationInput | productCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing productCategories.
     */
    cursor?: productCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productCategories.
     */
    skip?: number
    distinct?: ProductCategoriesScalarFieldEnum | ProductCategoriesScalarFieldEnum[]
  }

  /**
   * productCategories create
   */
  export type productCategoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCategories
     */
    select?: productCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCategoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a productCategories.
     */
    data: XOR<productCategoriesCreateInput, productCategoriesUncheckedCreateInput>
  }

  /**
   * productCategories createMany
   */
  export type productCategoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many productCategories.
     */
    data: productCategoriesCreateManyInput | productCategoriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * productCategories update
   */
  export type productCategoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCategories
     */
    select?: productCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCategoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a productCategories.
     */
    data: XOR<productCategoriesUpdateInput, productCategoriesUncheckedUpdateInput>
    /**
     * Choose, which productCategories to update.
     */
    where: productCategoriesWhereUniqueInput
  }

  /**
   * productCategories updateMany
   */
  export type productCategoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update productCategories.
     */
    data: XOR<productCategoriesUpdateManyMutationInput, productCategoriesUncheckedUpdateManyInput>
    /**
     * Filter which productCategories to update
     */
    where?: productCategoriesWhereInput
  }

  /**
   * productCategories upsert
   */
  export type productCategoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCategories
     */
    select?: productCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCategoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the productCategories to update in case it exists.
     */
    where: productCategoriesWhereUniqueInput
    /**
     * In case the productCategories found by the `where` argument doesn't exist, create a new productCategories with this data.
     */
    create: XOR<productCategoriesCreateInput, productCategoriesUncheckedCreateInput>
    /**
     * In case the productCategories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productCategoriesUpdateInput, productCategoriesUncheckedUpdateInput>
  }

  /**
   * productCategories delete
   */
  export type productCategoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCategories
     */
    select?: productCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCategoriesInclude<ExtArgs> | null
    /**
     * Filter which productCategories to delete.
     */
    where: productCategoriesWhereUniqueInput
  }

  /**
   * productCategories deleteMany
   */
  export type productCategoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which productCategories to delete
     */
    where?: productCategoriesWhereInput
  }

  /**
   * productCategories.photo
   */
  export type productCategories$photoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the media
     */
    select?: mediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mediaInclude<ExtArgs> | null
    where?: mediaWhereInput
  }

  /**
   * productCategories.products
   */
  export type productCategories$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesOnProducts
     */
    select?: categoriesOnProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesOnProductsInclude<ExtArgs> | null
    where?: categoriesOnProductsWhereInput
    orderBy?: categoriesOnProductsOrderByWithRelationInput | categoriesOnProductsOrderByWithRelationInput[]
    cursor?: categoriesOnProductsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoriesOnProductsScalarFieldEnum | CategoriesOnProductsScalarFieldEnum[]
  }

  /**
   * productCategories without action
   */
  export type productCategoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCategories
     */
    select?: productCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCategoriesInclude<ExtArgs> | null
  }


  /**
   * Model categoriesOnProducts
   */

  export type AggregateCategoriesOnProducts = {
    _count: CategoriesOnProductsCountAggregateOutputType | null
    _avg: CategoriesOnProductsAvgAggregateOutputType | null
    _sum: CategoriesOnProductsSumAggregateOutputType | null
    _min: CategoriesOnProductsMinAggregateOutputType | null
    _max: CategoriesOnProductsMaxAggregateOutputType | null
  }

  export type CategoriesOnProductsAvgAggregateOutputType = {
    productId: number | null
    categoryId: number | null
  }

  export type CategoriesOnProductsSumAggregateOutputType = {
    productId: number | null
    categoryId: number | null
  }

  export type CategoriesOnProductsMinAggregateOutputType = {
    productId: number | null
    categoryId: number | null
  }

  export type CategoriesOnProductsMaxAggregateOutputType = {
    productId: number | null
    categoryId: number | null
  }

  export type CategoriesOnProductsCountAggregateOutputType = {
    productId: number
    categoryId: number
    _all: number
  }


  export type CategoriesOnProductsAvgAggregateInputType = {
    productId?: true
    categoryId?: true
  }

  export type CategoriesOnProductsSumAggregateInputType = {
    productId?: true
    categoryId?: true
  }

  export type CategoriesOnProductsMinAggregateInputType = {
    productId?: true
    categoryId?: true
  }

  export type CategoriesOnProductsMaxAggregateInputType = {
    productId?: true
    categoryId?: true
  }

  export type CategoriesOnProductsCountAggregateInputType = {
    productId?: true
    categoryId?: true
    _all?: true
  }

  export type CategoriesOnProductsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categoriesOnProducts to aggregate.
     */
    where?: categoriesOnProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categoriesOnProducts to fetch.
     */
    orderBy?: categoriesOnProductsOrderByWithRelationInput | categoriesOnProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriesOnProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categoriesOnProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categoriesOnProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categoriesOnProducts
    **/
    _count?: true | CategoriesOnProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesOnProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesOnProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesOnProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesOnProductsMaxAggregateInputType
  }

  export type GetCategoriesOnProductsAggregateType<T extends CategoriesOnProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoriesOnProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoriesOnProducts[P]>
      : GetScalarType<T[P], AggregateCategoriesOnProducts[P]>
  }




  export type categoriesOnProductsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriesOnProductsWhereInput
    orderBy?: categoriesOnProductsOrderByWithAggregationInput | categoriesOnProductsOrderByWithAggregationInput[]
    by: CategoriesOnProductsScalarFieldEnum[] | CategoriesOnProductsScalarFieldEnum
    having?: categoriesOnProductsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesOnProductsCountAggregateInputType | true
    _avg?: CategoriesOnProductsAvgAggregateInputType
    _sum?: CategoriesOnProductsSumAggregateInputType
    _min?: CategoriesOnProductsMinAggregateInputType
    _max?: CategoriesOnProductsMaxAggregateInputType
  }

  export type CategoriesOnProductsGroupByOutputType = {
    productId: number
    categoryId: number
    _count: CategoriesOnProductsCountAggregateOutputType | null
    _avg: CategoriesOnProductsAvgAggregateOutputType | null
    _sum: CategoriesOnProductsSumAggregateOutputType | null
    _min: CategoriesOnProductsMinAggregateOutputType | null
    _max: CategoriesOnProductsMaxAggregateOutputType | null
  }

  type GetCategoriesOnProductsGroupByPayload<T extends categoriesOnProductsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriesOnProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesOnProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesOnProductsGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesOnProductsGroupByOutputType[P]>
        }
      >
    >


  export type categoriesOnProductsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    productId?: boolean
    categoryId?: boolean
    product?: boolean | productsDefaultArgs<ExtArgs>
    category?: boolean | productCategoriesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoriesOnProducts"]>

  export type categoriesOnProductsSelectScalar = {
    productId?: boolean
    categoryId?: boolean
  }


  export type categoriesOnProductsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | productsDefaultArgs<ExtArgs>
    category?: boolean | productCategoriesDefaultArgs<ExtArgs>
  }


  export type $categoriesOnProductsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "categoriesOnProducts"
    objects: {
      product: Prisma.$productsPayload<ExtArgs>
      category: Prisma.$productCategoriesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      productId: number
      categoryId: number
    }, ExtArgs["result"]["categoriesOnProducts"]>
    composites: {}
  }


  type categoriesOnProductsGetPayload<S extends boolean | null | undefined | categoriesOnProductsDefaultArgs> = $Result.GetResult<Prisma.$categoriesOnProductsPayload, S>

  type categoriesOnProductsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<categoriesOnProductsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriesOnProductsCountAggregateInputType | true
    }

  export interface categoriesOnProductsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categoriesOnProducts'], meta: { name: 'categoriesOnProducts' } }
    /**
     * Find zero or one CategoriesOnProducts that matches the filter.
     * @param {categoriesOnProductsFindUniqueArgs} args - Arguments to find a CategoriesOnProducts
     * @example
     * // Get one CategoriesOnProducts
     * const categoriesOnProducts = await prisma.categoriesOnProducts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoriesOnProductsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesOnProductsFindUniqueArgs<ExtArgs>>
    ): Prisma__categoriesOnProductsClient<$Result.GetResult<Prisma.$categoriesOnProductsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CategoriesOnProducts that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {categoriesOnProductsFindUniqueOrThrowArgs} args - Arguments to find a CategoriesOnProducts
     * @example
     * // Get one CategoriesOnProducts
     * const categoriesOnProducts = await prisma.categoriesOnProducts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoriesOnProductsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesOnProductsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__categoriesOnProductsClient<$Result.GetResult<Prisma.$categoriesOnProductsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CategoriesOnProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesOnProductsFindFirstArgs} args - Arguments to find a CategoriesOnProducts
     * @example
     * // Get one CategoriesOnProducts
     * const categoriesOnProducts = await prisma.categoriesOnProducts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoriesOnProductsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesOnProductsFindFirstArgs<ExtArgs>>
    ): Prisma__categoriesOnProductsClient<$Result.GetResult<Prisma.$categoriesOnProductsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CategoriesOnProducts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesOnProductsFindFirstOrThrowArgs} args - Arguments to find a CategoriesOnProducts
     * @example
     * // Get one CategoriesOnProducts
     * const categoriesOnProducts = await prisma.categoriesOnProducts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoriesOnProductsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesOnProductsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__categoriesOnProductsClient<$Result.GetResult<Prisma.$categoriesOnProductsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CategoriesOnProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesOnProductsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategoriesOnProducts
     * const categoriesOnProducts = await prisma.categoriesOnProducts.findMany()
     * 
     * // Get first 10 CategoriesOnProducts
     * const categoriesOnProducts = await prisma.categoriesOnProducts.findMany({ take: 10 })
     * 
     * // Only select the `productId`
     * const categoriesOnProductsWithProductIdOnly = await prisma.categoriesOnProducts.findMany({ select: { productId: true } })
     * 
    **/
    findMany<T extends categoriesOnProductsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesOnProductsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriesOnProductsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CategoriesOnProducts.
     * @param {categoriesOnProductsCreateArgs} args - Arguments to create a CategoriesOnProducts.
     * @example
     * // Create one CategoriesOnProducts
     * const CategoriesOnProducts = await prisma.categoriesOnProducts.create({
     *   data: {
     *     // ... data to create a CategoriesOnProducts
     *   }
     * })
     * 
    **/
    create<T extends categoriesOnProductsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesOnProductsCreateArgs<ExtArgs>>
    ): Prisma__categoriesOnProductsClient<$Result.GetResult<Prisma.$categoriesOnProductsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CategoriesOnProducts.
     * @param {categoriesOnProductsCreateManyArgs} args - Arguments to create many CategoriesOnProducts.
     * @example
     * // Create many CategoriesOnProducts
     * const categoriesOnProducts = await prisma.categoriesOnProducts.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends categoriesOnProductsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesOnProductsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CategoriesOnProducts.
     * @param {categoriesOnProductsDeleteArgs} args - Arguments to delete one CategoriesOnProducts.
     * @example
     * // Delete one CategoriesOnProducts
     * const CategoriesOnProducts = await prisma.categoriesOnProducts.delete({
     *   where: {
     *     // ... filter to delete one CategoriesOnProducts
     *   }
     * })
     * 
    **/
    delete<T extends categoriesOnProductsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesOnProductsDeleteArgs<ExtArgs>>
    ): Prisma__categoriesOnProductsClient<$Result.GetResult<Prisma.$categoriesOnProductsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CategoriesOnProducts.
     * @param {categoriesOnProductsUpdateArgs} args - Arguments to update one CategoriesOnProducts.
     * @example
     * // Update one CategoriesOnProducts
     * const categoriesOnProducts = await prisma.categoriesOnProducts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoriesOnProductsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesOnProductsUpdateArgs<ExtArgs>>
    ): Prisma__categoriesOnProductsClient<$Result.GetResult<Prisma.$categoriesOnProductsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CategoriesOnProducts.
     * @param {categoriesOnProductsDeleteManyArgs} args - Arguments to filter CategoriesOnProducts to delete.
     * @example
     * // Delete a few CategoriesOnProducts
     * const { count } = await prisma.categoriesOnProducts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoriesOnProductsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesOnProductsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoriesOnProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesOnProductsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategoriesOnProducts
     * const categoriesOnProducts = await prisma.categoriesOnProducts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoriesOnProductsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesOnProductsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CategoriesOnProducts.
     * @param {categoriesOnProductsUpsertArgs} args - Arguments to update or create a CategoriesOnProducts.
     * @example
     * // Update or create a CategoriesOnProducts
     * const categoriesOnProducts = await prisma.categoriesOnProducts.upsert({
     *   create: {
     *     // ... data to create a CategoriesOnProducts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategoriesOnProducts we want to update
     *   }
     * })
    **/
    upsert<T extends categoriesOnProductsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesOnProductsUpsertArgs<ExtArgs>>
    ): Prisma__categoriesOnProductsClient<$Result.GetResult<Prisma.$categoriesOnProductsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CategoriesOnProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesOnProductsCountArgs} args - Arguments to filter CategoriesOnProducts to count.
     * @example
     * // Count the number of CategoriesOnProducts
     * const count = await prisma.categoriesOnProducts.count({
     *   where: {
     *     // ... the filter for the CategoriesOnProducts we want to count
     *   }
     * })
    **/
    count<T extends categoriesOnProductsCountArgs>(
      args?: Subset<T, categoriesOnProductsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesOnProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategoriesOnProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesOnProductsAggregateArgs>(args: Subset<T, CategoriesOnProductsAggregateArgs>): Prisma.PrismaPromise<GetCategoriesOnProductsAggregateType<T>>

    /**
     * Group by CategoriesOnProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesOnProductsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoriesOnProductsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoriesOnProductsGroupByArgs['orderBy'] }
        : { orderBy?: categoriesOnProductsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoriesOnProductsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesOnProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the categoriesOnProducts model
   */
  readonly fields: categoriesOnProductsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for categoriesOnProducts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoriesOnProductsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    category<T extends productCategoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productCategoriesDefaultArgs<ExtArgs>>): Prisma__productCategoriesClient<$Result.GetResult<Prisma.$productCategoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the categoriesOnProducts model
   */ 
  interface categoriesOnProductsFieldRefs {
    readonly productId: FieldRef<"categoriesOnProducts", 'Int'>
    readonly categoryId: FieldRef<"categoriesOnProducts", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * categoriesOnProducts findUnique
   */
  export type categoriesOnProductsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesOnProducts
     */
    select?: categoriesOnProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesOnProductsInclude<ExtArgs> | null
    /**
     * Filter, which categoriesOnProducts to fetch.
     */
    where: categoriesOnProductsWhereUniqueInput
  }

  /**
   * categoriesOnProducts findUniqueOrThrow
   */
  export type categoriesOnProductsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesOnProducts
     */
    select?: categoriesOnProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesOnProductsInclude<ExtArgs> | null
    /**
     * Filter, which categoriesOnProducts to fetch.
     */
    where: categoriesOnProductsWhereUniqueInput
  }

  /**
   * categoriesOnProducts findFirst
   */
  export type categoriesOnProductsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesOnProducts
     */
    select?: categoriesOnProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesOnProductsInclude<ExtArgs> | null
    /**
     * Filter, which categoriesOnProducts to fetch.
     */
    where?: categoriesOnProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categoriesOnProducts to fetch.
     */
    orderBy?: categoriesOnProductsOrderByWithRelationInput | categoriesOnProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categoriesOnProducts.
     */
    cursor?: categoriesOnProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categoriesOnProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categoriesOnProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categoriesOnProducts.
     */
    distinct?: CategoriesOnProductsScalarFieldEnum | CategoriesOnProductsScalarFieldEnum[]
  }

  /**
   * categoriesOnProducts findFirstOrThrow
   */
  export type categoriesOnProductsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesOnProducts
     */
    select?: categoriesOnProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesOnProductsInclude<ExtArgs> | null
    /**
     * Filter, which categoriesOnProducts to fetch.
     */
    where?: categoriesOnProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categoriesOnProducts to fetch.
     */
    orderBy?: categoriesOnProductsOrderByWithRelationInput | categoriesOnProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categoriesOnProducts.
     */
    cursor?: categoriesOnProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categoriesOnProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categoriesOnProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categoriesOnProducts.
     */
    distinct?: CategoriesOnProductsScalarFieldEnum | CategoriesOnProductsScalarFieldEnum[]
  }

  /**
   * categoriesOnProducts findMany
   */
  export type categoriesOnProductsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesOnProducts
     */
    select?: categoriesOnProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesOnProductsInclude<ExtArgs> | null
    /**
     * Filter, which categoriesOnProducts to fetch.
     */
    where?: categoriesOnProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categoriesOnProducts to fetch.
     */
    orderBy?: categoriesOnProductsOrderByWithRelationInput | categoriesOnProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categoriesOnProducts.
     */
    cursor?: categoriesOnProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categoriesOnProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categoriesOnProducts.
     */
    skip?: number
    distinct?: CategoriesOnProductsScalarFieldEnum | CategoriesOnProductsScalarFieldEnum[]
  }

  /**
   * categoriesOnProducts create
   */
  export type categoriesOnProductsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesOnProducts
     */
    select?: categoriesOnProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesOnProductsInclude<ExtArgs> | null
    /**
     * The data needed to create a categoriesOnProducts.
     */
    data: XOR<categoriesOnProductsCreateInput, categoriesOnProductsUncheckedCreateInput>
  }

  /**
   * categoriesOnProducts createMany
   */
  export type categoriesOnProductsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categoriesOnProducts.
     */
    data: categoriesOnProductsCreateManyInput | categoriesOnProductsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * categoriesOnProducts update
   */
  export type categoriesOnProductsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesOnProducts
     */
    select?: categoriesOnProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesOnProductsInclude<ExtArgs> | null
    /**
     * The data needed to update a categoriesOnProducts.
     */
    data: XOR<categoriesOnProductsUpdateInput, categoriesOnProductsUncheckedUpdateInput>
    /**
     * Choose, which categoriesOnProducts to update.
     */
    where: categoriesOnProductsWhereUniqueInput
  }

  /**
   * categoriesOnProducts updateMany
   */
  export type categoriesOnProductsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categoriesOnProducts.
     */
    data: XOR<categoriesOnProductsUpdateManyMutationInput, categoriesOnProductsUncheckedUpdateManyInput>
    /**
     * Filter which categoriesOnProducts to update
     */
    where?: categoriesOnProductsWhereInput
  }

  /**
   * categoriesOnProducts upsert
   */
  export type categoriesOnProductsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesOnProducts
     */
    select?: categoriesOnProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesOnProductsInclude<ExtArgs> | null
    /**
     * The filter to search for the categoriesOnProducts to update in case it exists.
     */
    where: categoriesOnProductsWhereUniqueInput
    /**
     * In case the categoriesOnProducts found by the `where` argument doesn't exist, create a new categoriesOnProducts with this data.
     */
    create: XOR<categoriesOnProductsCreateInput, categoriesOnProductsUncheckedCreateInput>
    /**
     * In case the categoriesOnProducts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriesOnProductsUpdateInput, categoriesOnProductsUncheckedUpdateInput>
  }

  /**
   * categoriesOnProducts delete
   */
  export type categoriesOnProductsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesOnProducts
     */
    select?: categoriesOnProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesOnProductsInclude<ExtArgs> | null
    /**
     * Filter which categoriesOnProducts to delete.
     */
    where: categoriesOnProductsWhereUniqueInput
  }

  /**
   * categoriesOnProducts deleteMany
   */
  export type categoriesOnProductsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categoriesOnProducts to delete
     */
    where?: categoriesOnProductsWhereInput
  }

  /**
   * categoriesOnProducts without action
   */
  export type categoriesOnProductsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesOnProducts
     */
    select?: categoriesOnProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesOnProductsInclude<ExtArgs> | null
  }


  /**
   * Model productCarts
   */

  export type AggregateProductCarts = {
    _count: ProductCartsCountAggregateOutputType | null
    _avg: ProductCartsAvgAggregateOutputType | null
    _sum: ProductCartsSumAggregateOutputType | null
    _min: ProductCartsMinAggregateOutputType | null
    _max: ProductCartsMaxAggregateOutputType | null
  }

  export type ProductCartsAvgAggregateOutputType = {
    id: number | null
    productId: number | null
    userId: number | null
    quantity: number | null
  }

  export type ProductCartsSumAggregateOutputType = {
    id: number | null
    productId: number | null
    userId: number | null
    quantity: number | null
  }

  export type ProductCartsMinAggregateOutputType = {
    id: number | null
    productId: number | null
    userId: number | null
    quantity: number | null
  }

  export type ProductCartsMaxAggregateOutputType = {
    id: number | null
    productId: number | null
    userId: number | null
    quantity: number | null
  }

  export type ProductCartsCountAggregateOutputType = {
    id: number
    productId: number
    userId: number
    quantity: number
    _all: number
  }


  export type ProductCartsAvgAggregateInputType = {
    id?: true
    productId?: true
    userId?: true
    quantity?: true
  }

  export type ProductCartsSumAggregateInputType = {
    id?: true
    productId?: true
    userId?: true
    quantity?: true
  }

  export type ProductCartsMinAggregateInputType = {
    id?: true
    productId?: true
    userId?: true
    quantity?: true
  }

  export type ProductCartsMaxAggregateInputType = {
    id?: true
    productId?: true
    userId?: true
    quantity?: true
  }

  export type ProductCartsCountAggregateInputType = {
    id?: true
    productId?: true
    userId?: true
    quantity?: true
    _all?: true
  }

  export type ProductCartsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which productCarts to aggregate.
     */
    where?: productCartsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productCarts to fetch.
     */
    orderBy?: productCartsOrderByWithRelationInput | productCartsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productCartsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productCarts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productCarts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned productCarts
    **/
    _count?: true | ProductCartsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductCartsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductCartsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductCartsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductCartsMaxAggregateInputType
  }

  export type GetProductCartsAggregateType<T extends ProductCartsAggregateArgs> = {
        [P in keyof T & keyof AggregateProductCarts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductCarts[P]>
      : GetScalarType<T[P], AggregateProductCarts[P]>
  }




  export type productCartsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productCartsWhereInput
    orderBy?: productCartsOrderByWithAggregationInput | productCartsOrderByWithAggregationInput[]
    by: ProductCartsScalarFieldEnum[] | ProductCartsScalarFieldEnum
    having?: productCartsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCartsCountAggregateInputType | true
    _avg?: ProductCartsAvgAggregateInputType
    _sum?: ProductCartsSumAggregateInputType
    _min?: ProductCartsMinAggregateInputType
    _max?: ProductCartsMaxAggregateInputType
  }

  export type ProductCartsGroupByOutputType = {
    id: number
    productId: number
    userId: number
    quantity: number
    _count: ProductCartsCountAggregateOutputType | null
    _avg: ProductCartsAvgAggregateOutputType | null
    _sum: ProductCartsSumAggregateOutputType | null
    _min: ProductCartsMinAggregateOutputType | null
    _max: ProductCartsMaxAggregateOutputType | null
  }

  type GetProductCartsGroupByPayload<T extends productCartsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductCartsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductCartsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductCartsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductCartsGroupByOutputType[P]>
        }
      >
    >


  export type productCartsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    userId?: boolean
    quantity?: boolean
    product?: boolean | productsDefaultArgs<ExtArgs>
    user?: boolean | users_metaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productCarts"]>

  export type productCartsSelectScalar = {
    id?: boolean
    productId?: boolean
    userId?: boolean
    quantity?: boolean
  }


  export type productCartsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | productsDefaultArgs<ExtArgs>
    user?: boolean | users_metaDefaultArgs<ExtArgs>
  }


  export type $productCartsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "productCarts"
    objects: {
      product: Prisma.$productsPayload<ExtArgs>
      user: Prisma.$users_metaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      productId: number
      userId: number
      quantity: number
    }, ExtArgs["result"]["productCarts"]>
    composites: {}
  }


  type productCartsGetPayload<S extends boolean | null | undefined | productCartsDefaultArgs> = $Result.GetResult<Prisma.$productCartsPayload, S>

  type productCartsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<productCartsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCartsCountAggregateInputType | true
    }

  export interface productCartsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['productCarts'], meta: { name: 'productCarts' } }
    /**
     * Find zero or one ProductCarts that matches the filter.
     * @param {productCartsFindUniqueArgs} args - Arguments to find a ProductCarts
     * @example
     * // Get one ProductCarts
     * const productCarts = await prisma.productCarts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productCartsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, productCartsFindUniqueArgs<ExtArgs>>
    ): Prisma__productCartsClient<$Result.GetResult<Prisma.$productCartsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProductCarts that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {productCartsFindUniqueOrThrowArgs} args - Arguments to find a ProductCarts
     * @example
     * // Get one ProductCarts
     * const productCarts = await prisma.productCarts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productCartsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productCartsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__productCartsClient<$Result.GetResult<Prisma.$productCartsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProductCarts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCartsFindFirstArgs} args - Arguments to find a ProductCarts
     * @example
     * // Get one ProductCarts
     * const productCarts = await prisma.productCarts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productCartsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, productCartsFindFirstArgs<ExtArgs>>
    ): Prisma__productCartsClient<$Result.GetResult<Prisma.$productCartsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProductCarts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCartsFindFirstOrThrowArgs} args - Arguments to find a ProductCarts
     * @example
     * // Get one ProductCarts
     * const productCarts = await prisma.productCarts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productCartsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productCartsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__productCartsClient<$Result.GetResult<Prisma.$productCartsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProductCarts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCartsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductCarts
     * const productCarts = await prisma.productCarts.findMany()
     * 
     * // Get first 10 ProductCarts
     * const productCarts = await prisma.productCarts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productCartsWithIdOnly = await prisma.productCarts.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productCartsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productCartsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productCartsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProductCarts.
     * @param {productCartsCreateArgs} args - Arguments to create a ProductCarts.
     * @example
     * // Create one ProductCarts
     * const ProductCarts = await prisma.productCarts.create({
     *   data: {
     *     // ... data to create a ProductCarts
     *   }
     * })
     * 
    **/
    create<T extends productCartsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, productCartsCreateArgs<ExtArgs>>
    ): Prisma__productCartsClient<$Result.GetResult<Prisma.$productCartsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProductCarts.
     * @param {productCartsCreateManyArgs} args - Arguments to create many ProductCarts.
     * @example
     * // Create many ProductCarts
     * const productCarts = await prisma.productCarts.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends productCartsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productCartsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductCarts.
     * @param {productCartsDeleteArgs} args - Arguments to delete one ProductCarts.
     * @example
     * // Delete one ProductCarts
     * const ProductCarts = await prisma.productCarts.delete({
     *   where: {
     *     // ... filter to delete one ProductCarts
     *   }
     * })
     * 
    **/
    delete<T extends productCartsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, productCartsDeleteArgs<ExtArgs>>
    ): Prisma__productCartsClient<$Result.GetResult<Prisma.$productCartsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProductCarts.
     * @param {productCartsUpdateArgs} args - Arguments to update one ProductCarts.
     * @example
     * // Update one ProductCarts
     * const productCarts = await prisma.productCarts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productCartsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, productCartsUpdateArgs<ExtArgs>>
    ): Prisma__productCartsClient<$Result.GetResult<Prisma.$productCartsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProductCarts.
     * @param {productCartsDeleteManyArgs} args - Arguments to filter ProductCarts to delete.
     * @example
     * // Delete a few ProductCarts
     * const { count } = await prisma.productCarts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productCartsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productCartsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductCarts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCartsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductCarts
     * const productCarts = await prisma.productCarts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productCartsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, productCartsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductCarts.
     * @param {productCartsUpsertArgs} args - Arguments to update or create a ProductCarts.
     * @example
     * // Update or create a ProductCarts
     * const productCarts = await prisma.productCarts.upsert({
     *   create: {
     *     // ... data to create a ProductCarts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductCarts we want to update
     *   }
     * })
    **/
    upsert<T extends productCartsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, productCartsUpsertArgs<ExtArgs>>
    ): Prisma__productCartsClient<$Result.GetResult<Prisma.$productCartsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProductCarts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCartsCountArgs} args - Arguments to filter ProductCarts to count.
     * @example
     * // Count the number of ProductCarts
     * const count = await prisma.productCarts.count({
     *   where: {
     *     // ... the filter for the ProductCarts we want to count
     *   }
     * })
    **/
    count<T extends productCartsCountArgs>(
      args?: Subset<T, productCartsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCartsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductCarts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCartsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductCartsAggregateArgs>(args: Subset<T, ProductCartsAggregateArgs>): Prisma.PrismaPromise<GetProductCartsAggregateType<T>>

    /**
     * Group by ProductCarts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCartsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productCartsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productCartsGroupByArgs['orderBy'] }
        : { orderBy?: productCartsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productCartsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductCartsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the productCarts model
   */
  readonly fields: productCartsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for productCarts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productCartsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends users_metaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, users_metaDefaultArgs<ExtArgs>>): Prisma__users_metaClient<$Result.GetResult<Prisma.$users_metaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the productCarts model
   */ 
  interface productCartsFieldRefs {
    readonly id: FieldRef<"productCarts", 'Int'>
    readonly productId: FieldRef<"productCarts", 'Int'>
    readonly userId: FieldRef<"productCarts", 'Int'>
    readonly quantity: FieldRef<"productCarts", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * productCarts findUnique
   */
  export type productCartsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCarts
     */
    select?: productCartsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCartsInclude<ExtArgs> | null
    /**
     * Filter, which productCarts to fetch.
     */
    where: productCartsWhereUniqueInput
  }

  /**
   * productCarts findUniqueOrThrow
   */
  export type productCartsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCarts
     */
    select?: productCartsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCartsInclude<ExtArgs> | null
    /**
     * Filter, which productCarts to fetch.
     */
    where: productCartsWhereUniqueInput
  }

  /**
   * productCarts findFirst
   */
  export type productCartsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCarts
     */
    select?: productCartsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCartsInclude<ExtArgs> | null
    /**
     * Filter, which productCarts to fetch.
     */
    where?: productCartsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productCarts to fetch.
     */
    orderBy?: productCartsOrderByWithRelationInput | productCartsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productCarts.
     */
    cursor?: productCartsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productCarts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productCarts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productCarts.
     */
    distinct?: ProductCartsScalarFieldEnum | ProductCartsScalarFieldEnum[]
  }

  /**
   * productCarts findFirstOrThrow
   */
  export type productCartsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCarts
     */
    select?: productCartsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCartsInclude<ExtArgs> | null
    /**
     * Filter, which productCarts to fetch.
     */
    where?: productCartsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productCarts to fetch.
     */
    orderBy?: productCartsOrderByWithRelationInput | productCartsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productCarts.
     */
    cursor?: productCartsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productCarts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productCarts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productCarts.
     */
    distinct?: ProductCartsScalarFieldEnum | ProductCartsScalarFieldEnum[]
  }

  /**
   * productCarts findMany
   */
  export type productCartsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCarts
     */
    select?: productCartsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCartsInclude<ExtArgs> | null
    /**
     * Filter, which productCarts to fetch.
     */
    where?: productCartsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productCarts to fetch.
     */
    orderBy?: productCartsOrderByWithRelationInput | productCartsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing productCarts.
     */
    cursor?: productCartsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productCarts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productCarts.
     */
    skip?: number
    distinct?: ProductCartsScalarFieldEnum | ProductCartsScalarFieldEnum[]
  }

  /**
   * productCarts create
   */
  export type productCartsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCarts
     */
    select?: productCartsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCartsInclude<ExtArgs> | null
    /**
     * The data needed to create a productCarts.
     */
    data: XOR<productCartsCreateInput, productCartsUncheckedCreateInput>
  }

  /**
   * productCarts createMany
   */
  export type productCartsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many productCarts.
     */
    data: productCartsCreateManyInput | productCartsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * productCarts update
   */
  export type productCartsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCarts
     */
    select?: productCartsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCartsInclude<ExtArgs> | null
    /**
     * The data needed to update a productCarts.
     */
    data: XOR<productCartsUpdateInput, productCartsUncheckedUpdateInput>
    /**
     * Choose, which productCarts to update.
     */
    where: productCartsWhereUniqueInput
  }

  /**
   * productCarts updateMany
   */
  export type productCartsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update productCarts.
     */
    data: XOR<productCartsUpdateManyMutationInput, productCartsUncheckedUpdateManyInput>
    /**
     * Filter which productCarts to update
     */
    where?: productCartsWhereInput
  }

  /**
   * productCarts upsert
   */
  export type productCartsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCarts
     */
    select?: productCartsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCartsInclude<ExtArgs> | null
    /**
     * The filter to search for the productCarts to update in case it exists.
     */
    where: productCartsWhereUniqueInput
    /**
     * In case the productCarts found by the `where` argument doesn't exist, create a new productCarts with this data.
     */
    create: XOR<productCartsCreateInput, productCartsUncheckedCreateInput>
    /**
     * In case the productCarts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productCartsUpdateInput, productCartsUncheckedUpdateInput>
  }

  /**
   * productCarts delete
   */
  export type productCartsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCarts
     */
    select?: productCartsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCartsInclude<ExtArgs> | null
    /**
     * Filter which productCarts to delete.
     */
    where: productCartsWhereUniqueInput
  }

  /**
   * productCarts deleteMany
   */
  export type productCartsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which productCarts to delete
     */
    where?: productCartsWhereInput
  }

  /**
   * productCarts without action
   */
  export type productCartsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCarts
     */
    select?: productCartsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCartsInclude<ExtArgs> | null
  }


  /**
   * Model productReviews
   */

  export type AggregateProductReviews = {
    _count: ProductReviewsCountAggregateOutputType | null
    _avg: ProductReviewsAvgAggregateOutputType | null
    _sum: ProductReviewsSumAggregateOutputType | null
    _min: ProductReviewsMinAggregateOutputType | null
    _max: ProductReviewsMaxAggregateOutputType | null
  }

  export type ProductReviewsAvgAggregateOutputType = {
    id: number | null
    rating: number | null
    userId: number | null
    productId: number | null
  }

  export type ProductReviewsSumAggregateOutputType = {
    id: number | null
    rating: number | null
    userId: number | null
    productId: number | null
  }

  export type ProductReviewsMinAggregateOutputType = {
    id: number | null
    rating: number | null
    comment: string | null
    status: $Enums.ProductReviewStatus | null
    userId: number | null
    productId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductReviewsMaxAggregateOutputType = {
    id: number | null
    rating: number | null
    comment: string | null
    status: $Enums.ProductReviewStatus | null
    userId: number | null
    productId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductReviewsCountAggregateOutputType = {
    id: number
    rating: number
    comment: number
    status: number
    userId: number
    productId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductReviewsAvgAggregateInputType = {
    id?: true
    rating?: true
    userId?: true
    productId?: true
  }

  export type ProductReviewsSumAggregateInputType = {
    id?: true
    rating?: true
    userId?: true
    productId?: true
  }

  export type ProductReviewsMinAggregateInputType = {
    id?: true
    rating?: true
    comment?: true
    status?: true
    userId?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductReviewsMaxAggregateInputType = {
    id?: true
    rating?: true
    comment?: true
    status?: true
    userId?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductReviewsCountAggregateInputType = {
    id?: true
    rating?: true
    comment?: true
    status?: true
    userId?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductReviewsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which productReviews to aggregate.
     */
    where?: productReviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productReviews to fetch.
     */
    orderBy?: productReviewsOrderByWithRelationInput | productReviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productReviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned productReviews
    **/
    _count?: true | ProductReviewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductReviewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductReviewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductReviewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductReviewsMaxAggregateInputType
  }

  export type GetProductReviewsAggregateType<T extends ProductReviewsAggregateArgs> = {
        [P in keyof T & keyof AggregateProductReviews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductReviews[P]>
      : GetScalarType<T[P], AggregateProductReviews[P]>
  }




  export type productReviewsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productReviewsWhereInput
    orderBy?: productReviewsOrderByWithAggregationInput | productReviewsOrderByWithAggregationInput[]
    by: ProductReviewsScalarFieldEnum[] | ProductReviewsScalarFieldEnum
    having?: productReviewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductReviewsCountAggregateInputType | true
    _avg?: ProductReviewsAvgAggregateInputType
    _sum?: ProductReviewsSumAggregateInputType
    _min?: ProductReviewsMinAggregateInputType
    _max?: ProductReviewsMaxAggregateInputType
  }

  export type ProductReviewsGroupByOutputType = {
    id: number
    rating: number
    comment: string | null
    status: $Enums.ProductReviewStatus
    userId: number
    productId: number
    createdAt: Date
    updatedAt: Date
    _count: ProductReviewsCountAggregateOutputType | null
    _avg: ProductReviewsAvgAggregateOutputType | null
    _sum: ProductReviewsSumAggregateOutputType | null
    _min: ProductReviewsMinAggregateOutputType | null
    _max: ProductReviewsMaxAggregateOutputType | null
  }

  type GetProductReviewsGroupByPayload<T extends productReviewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductReviewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductReviewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductReviewsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductReviewsGroupByOutputType[P]>
        }
      >
    >


  export type productReviewsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rating?: boolean
    comment?: boolean
    status?: boolean
    userId?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | users_metaDefaultArgs<ExtArgs>
    product?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productReviews"]>

  export type productReviewsSelectScalar = {
    id?: boolean
    rating?: boolean
    comment?: boolean
    status?: boolean
    userId?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type productReviewsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | users_metaDefaultArgs<ExtArgs>
    product?: boolean | productsDefaultArgs<ExtArgs>
  }


  export type $productReviewsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "productReviews"
    objects: {
      user: Prisma.$users_metaPayload<ExtArgs>
      product: Prisma.$productsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      rating: number
      comment: string | null
      status: $Enums.ProductReviewStatus
      userId: number
      productId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["productReviews"]>
    composites: {}
  }


  type productReviewsGetPayload<S extends boolean | null | undefined | productReviewsDefaultArgs> = $Result.GetResult<Prisma.$productReviewsPayload, S>

  type productReviewsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<productReviewsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductReviewsCountAggregateInputType | true
    }

  export interface productReviewsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['productReviews'], meta: { name: 'productReviews' } }
    /**
     * Find zero or one ProductReviews that matches the filter.
     * @param {productReviewsFindUniqueArgs} args - Arguments to find a ProductReviews
     * @example
     * // Get one ProductReviews
     * const productReviews = await prisma.productReviews.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productReviewsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, productReviewsFindUniqueArgs<ExtArgs>>
    ): Prisma__productReviewsClient<$Result.GetResult<Prisma.$productReviewsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProductReviews that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {productReviewsFindUniqueOrThrowArgs} args - Arguments to find a ProductReviews
     * @example
     * // Get one ProductReviews
     * const productReviews = await prisma.productReviews.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productReviewsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productReviewsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__productReviewsClient<$Result.GetResult<Prisma.$productReviewsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProductReviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productReviewsFindFirstArgs} args - Arguments to find a ProductReviews
     * @example
     * // Get one ProductReviews
     * const productReviews = await prisma.productReviews.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productReviewsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, productReviewsFindFirstArgs<ExtArgs>>
    ): Prisma__productReviewsClient<$Result.GetResult<Prisma.$productReviewsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProductReviews that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productReviewsFindFirstOrThrowArgs} args - Arguments to find a ProductReviews
     * @example
     * // Get one ProductReviews
     * const productReviews = await prisma.productReviews.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productReviewsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productReviewsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__productReviewsClient<$Result.GetResult<Prisma.$productReviewsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProductReviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productReviewsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductReviews
     * const productReviews = await prisma.productReviews.findMany()
     * 
     * // Get first 10 ProductReviews
     * const productReviews = await prisma.productReviews.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productReviewsWithIdOnly = await prisma.productReviews.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productReviewsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productReviewsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productReviewsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProductReviews.
     * @param {productReviewsCreateArgs} args - Arguments to create a ProductReviews.
     * @example
     * // Create one ProductReviews
     * const ProductReviews = await prisma.productReviews.create({
     *   data: {
     *     // ... data to create a ProductReviews
     *   }
     * })
     * 
    **/
    create<T extends productReviewsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, productReviewsCreateArgs<ExtArgs>>
    ): Prisma__productReviewsClient<$Result.GetResult<Prisma.$productReviewsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProductReviews.
     * @param {productReviewsCreateManyArgs} args - Arguments to create many ProductReviews.
     * @example
     * // Create many ProductReviews
     * const productReviews = await prisma.productReviews.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends productReviewsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productReviewsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductReviews.
     * @param {productReviewsDeleteArgs} args - Arguments to delete one ProductReviews.
     * @example
     * // Delete one ProductReviews
     * const ProductReviews = await prisma.productReviews.delete({
     *   where: {
     *     // ... filter to delete one ProductReviews
     *   }
     * })
     * 
    **/
    delete<T extends productReviewsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, productReviewsDeleteArgs<ExtArgs>>
    ): Prisma__productReviewsClient<$Result.GetResult<Prisma.$productReviewsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProductReviews.
     * @param {productReviewsUpdateArgs} args - Arguments to update one ProductReviews.
     * @example
     * // Update one ProductReviews
     * const productReviews = await prisma.productReviews.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productReviewsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, productReviewsUpdateArgs<ExtArgs>>
    ): Prisma__productReviewsClient<$Result.GetResult<Prisma.$productReviewsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProductReviews.
     * @param {productReviewsDeleteManyArgs} args - Arguments to filter ProductReviews to delete.
     * @example
     * // Delete a few ProductReviews
     * const { count } = await prisma.productReviews.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productReviewsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productReviewsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productReviewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductReviews
     * const productReviews = await prisma.productReviews.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productReviewsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, productReviewsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductReviews.
     * @param {productReviewsUpsertArgs} args - Arguments to update or create a ProductReviews.
     * @example
     * // Update or create a ProductReviews
     * const productReviews = await prisma.productReviews.upsert({
     *   create: {
     *     // ... data to create a ProductReviews
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductReviews we want to update
     *   }
     * })
    **/
    upsert<T extends productReviewsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, productReviewsUpsertArgs<ExtArgs>>
    ): Prisma__productReviewsClient<$Result.GetResult<Prisma.$productReviewsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProductReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productReviewsCountArgs} args - Arguments to filter ProductReviews to count.
     * @example
     * // Count the number of ProductReviews
     * const count = await prisma.productReviews.count({
     *   where: {
     *     // ... the filter for the ProductReviews we want to count
     *   }
     * })
    **/
    count<T extends productReviewsCountArgs>(
      args?: Subset<T, productReviewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductReviewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductReviewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductReviewsAggregateArgs>(args: Subset<T, ProductReviewsAggregateArgs>): Prisma.PrismaPromise<GetProductReviewsAggregateType<T>>

    /**
     * Group by ProductReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productReviewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productReviewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productReviewsGroupByArgs['orderBy'] }
        : { orderBy?: productReviewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productReviewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductReviewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the productReviews model
   */
  readonly fields: productReviewsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for productReviews.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productReviewsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends users_metaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, users_metaDefaultArgs<ExtArgs>>): Prisma__users_metaClient<$Result.GetResult<Prisma.$users_metaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    product<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the productReviews model
   */ 
  interface productReviewsFieldRefs {
    readonly id: FieldRef<"productReviews", 'Int'>
    readonly rating: FieldRef<"productReviews", 'Int'>
    readonly comment: FieldRef<"productReviews", 'String'>
    readonly status: FieldRef<"productReviews", 'ProductReviewStatus'>
    readonly userId: FieldRef<"productReviews", 'Int'>
    readonly productId: FieldRef<"productReviews", 'Int'>
    readonly createdAt: FieldRef<"productReviews", 'DateTime'>
    readonly updatedAt: FieldRef<"productReviews", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * productReviews findUnique
   */
  export type productReviewsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productReviews
     */
    select?: productReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productReviewsInclude<ExtArgs> | null
    /**
     * Filter, which productReviews to fetch.
     */
    where: productReviewsWhereUniqueInput
  }

  /**
   * productReviews findUniqueOrThrow
   */
  export type productReviewsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productReviews
     */
    select?: productReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productReviewsInclude<ExtArgs> | null
    /**
     * Filter, which productReviews to fetch.
     */
    where: productReviewsWhereUniqueInput
  }

  /**
   * productReviews findFirst
   */
  export type productReviewsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productReviews
     */
    select?: productReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productReviewsInclude<ExtArgs> | null
    /**
     * Filter, which productReviews to fetch.
     */
    where?: productReviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productReviews to fetch.
     */
    orderBy?: productReviewsOrderByWithRelationInput | productReviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productReviews.
     */
    cursor?: productReviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productReviews.
     */
    distinct?: ProductReviewsScalarFieldEnum | ProductReviewsScalarFieldEnum[]
  }

  /**
   * productReviews findFirstOrThrow
   */
  export type productReviewsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productReviews
     */
    select?: productReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productReviewsInclude<ExtArgs> | null
    /**
     * Filter, which productReviews to fetch.
     */
    where?: productReviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productReviews to fetch.
     */
    orderBy?: productReviewsOrderByWithRelationInput | productReviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productReviews.
     */
    cursor?: productReviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productReviews.
     */
    distinct?: ProductReviewsScalarFieldEnum | ProductReviewsScalarFieldEnum[]
  }

  /**
   * productReviews findMany
   */
  export type productReviewsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productReviews
     */
    select?: productReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productReviewsInclude<ExtArgs> | null
    /**
     * Filter, which productReviews to fetch.
     */
    where?: productReviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productReviews to fetch.
     */
    orderBy?: productReviewsOrderByWithRelationInput | productReviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing productReviews.
     */
    cursor?: productReviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productReviews.
     */
    skip?: number
    distinct?: ProductReviewsScalarFieldEnum | ProductReviewsScalarFieldEnum[]
  }

  /**
   * productReviews create
   */
  export type productReviewsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productReviews
     */
    select?: productReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productReviewsInclude<ExtArgs> | null
    /**
     * The data needed to create a productReviews.
     */
    data: XOR<productReviewsCreateInput, productReviewsUncheckedCreateInput>
  }

  /**
   * productReviews createMany
   */
  export type productReviewsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many productReviews.
     */
    data: productReviewsCreateManyInput | productReviewsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * productReviews update
   */
  export type productReviewsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productReviews
     */
    select?: productReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productReviewsInclude<ExtArgs> | null
    /**
     * The data needed to update a productReviews.
     */
    data: XOR<productReviewsUpdateInput, productReviewsUncheckedUpdateInput>
    /**
     * Choose, which productReviews to update.
     */
    where: productReviewsWhereUniqueInput
  }

  /**
   * productReviews updateMany
   */
  export type productReviewsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update productReviews.
     */
    data: XOR<productReviewsUpdateManyMutationInput, productReviewsUncheckedUpdateManyInput>
    /**
     * Filter which productReviews to update
     */
    where?: productReviewsWhereInput
  }

  /**
   * productReviews upsert
   */
  export type productReviewsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productReviews
     */
    select?: productReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productReviewsInclude<ExtArgs> | null
    /**
     * The filter to search for the productReviews to update in case it exists.
     */
    where: productReviewsWhereUniqueInput
    /**
     * In case the productReviews found by the `where` argument doesn't exist, create a new productReviews with this data.
     */
    create: XOR<productReviewsCreateInput, productReviewsUncheckedCreateInput>
    /**
     * In case the productReviews was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productReviewsUpdateInput, productReviewsUncheckedUpdateInput>
  }

  /**
   * productReviews delete
   */
  export type productReviewsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productReviews
     */
    select?: productReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productReviewsInclude<ExtArgs> | null
    /**
     * Filter which productReviews to delete.
     */
    where: productReviewsWhereUniqueInput
  }

  /**
   * productReviews deleteMany
   */
  export type productReviewsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which productReviews to delete
     */
    where?: productReviewsWhereInput
  }

  /**
   * productReviews without action
   */
  export type productReviewsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productReviews
     */
    select?: productReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productReviewsInclude<ExtArgs> | null
  }


  /**
   * Model media
   */

  export type AggregateMedia = {
    _count: MediaCountAggregateOutputType | null
    _avg: MediaAvgAggregateOutputType | null
    _sum: MediaSumAggregateOutputType | null
    _min: MediaMinAggregateOutputType | null
    _max: MediaMaxAggregateOutputType | null
  }

  export type MediaAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type MediaSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type MediaMinAggregateOutputType = {
    id: number | null
    url: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MediaMaxAggregateOutputType = {
    id: number | null
    url: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MediaCountAggregateOutputType = {
    id: number
    url: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MediaAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type MediaSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type MediaMinAggregateInputType = {
    id?: true
    url?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MediaMaxAggregateInputType = {
    id?: true
    url?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MediaCountAggregateInputType = {
    id?: true
    url?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MediaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which media to aggregate.
     */
    where?: mediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of media to fetch.
     */
    orderBy?: mediaOrderByWithRelationInput | mediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: mediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` media.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned media
    **/
    _count?: true | MediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MediaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MediaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MediaMaxAggregateInputType
  }

  export type GetMediaAggregateType<T extends MediaAggregateArgs> = {
        [P in keyof T & keyof AggregateMedia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedia[P]>
      : GetScalarType<T[P], AggregateMedia[P]>
  }




  export type mediaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: mediaWhereInput
    orderBy?: mediaOrderByWithAggregationInput | mediaOrderByWithAggregationInput[]
    by: MediaScalarFieldEnum[] | MediaScalarFieldEnum
    having?: mediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MediaCountAggregateInputType | true
    _avg?: MediaAvgAggregateInputType
    _sum?: MediaSumAggregateInputType
    _min?: MediaMinAggregateInputType
    _max?: MediaMaxAggregateInputType
  }

  export type MediaGroupByOutputType = {
    id: number
    url: string
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: MediaCountAggregateOutputType | null
    _avg: MediaAvgAggregateOutputType | null
    _sum: MediaSumAggregateOutputType | null
    _min: MediaMinAggregateOutputType | null
    _max: MediaMaxAggregateOutputType | null
  }

  type GetMediaGroupByPayload<T extends mediaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MediaGroupByOutputType[P]>
            : GetScalarType<T[P], MediaGroupByOutputType[P]>
        }
      >
    >


  export type mediaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | users_metaDefaultArgs<ExtArgs>
    productCategories?: boolean | media$productCategoriesArgs<ExtArgs>
    product?: boolean | media$productArgs<ExtArgs>
    galleries?: boolean | media$galleriesArgs<ExtArgs>
    _count?: boolean | MediaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["media"]>

  export type mediaSelectScalar = {
    id?: boolean
    url?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type mediaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | users_metaDefaultArgs<ExtArgs>
    productCategories?: boolean | media$productCategoriesArgs<ExtArgs>
    product?: boolean | media$productArgs<ExtArgs>
    galleries?: boolean | media$galleriesArgs<ExtArgs>
    _count?: boolean | MediaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $mediaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "media"
    objects: {
      user: Prisma.$users_metaPayload<ExtArgs>
      productCategories: Prisma.$productCategoriesPayload<ExtArgs>[]
      product: Prisma.$productsPayload<ExtArgs>[]
      galleries: Prisma.$productGalleriesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      url: string
      userId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["media"]>
    composites: {}
  }


  type mediaGetPayload<S extends boolean | null | undefined | mediaDefaultArgs> = $Result.GetResult<Prisma.$mediaPayload, S>

  type mediaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<mediaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MediaCountAggregateInputType | true
    }

  export interface mediaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['media'], meta: { name: 'media' } }
    /**
     * Find zero or one Media that matches the filter.
     * @param {mediaFindUniqueArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends mediaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, mediaFindUniqueArgs<ExtArgs>>
    ): Prisma__mediaClient<$Result.GetResult<Prisma.$mediaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Media that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {mediaFindUniqueOrThrowArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends mediaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, mediaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__mediaClient<$Result.GetResult<Prisma.$mediaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Media that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mediaFindFirstArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends mediaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, mediaFindFirstArgs<ExtArgs>>
    ): Prisma__mediaClient<$Result.GetResult<Prisma.$mediaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Media that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mediaFindFirstOrThrowArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends mediaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, mediaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__mediaClient<$Result.GetResult<Prisma.$mediaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Media that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mediaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Media
     * const media = await prisma.media.findMany()
     * 
     * // Get first 10 Media
     * const media = await prisma.media.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mediaWithIdOnly = await prisma.media.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends mediaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, mediaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mediaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Media.
     * @param {mediaCreateArgs} args - Arguments to create a Media.
     * @example
     * // Create one Media
     * const Media = await prisma.media.create({
     *   data: {
     *     // ... data to create a Media
     *   }
     * })
     * 
    **/
    create<T extends mediaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, mediaCreateArgs<ExtArgs>>
    ): Prisma__mediaClient<$Result.GetResult<Prisma.$mediaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Media.
     * @param {mediaCreateManyArgs} args - Arguments to create many Media.
     * @example
     * // Create many Media
     * const media = await prisma.media.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends mediaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, mediaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Media.
     * @param {mediaDeleteArgs} args - Arguments to delete one Media.
     * @example
     * // Delete one Media
     * const Media = await prisma.media.delete({
     *   where: {
     *     // ... filter to delete one Media
     *   }
     * })
     * 
    **/
    delete<T extends mediaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, mediaDeleteArgs<ExtArgs>>
    ): Prisma__mediaClient<$Result.GetResult<Prisma.$mediaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Media.
     * @param {mediaUpdateArgs} args - Arguments to update one Media.
     * @example
     * // Update one Media
     * const media = await prisma.media.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends mediaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, mediaUpdateArgs<ExtArgs>>
    ): Prisma__mediaClient<$Result.GetResult<Prisma.$mediaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Media.
     * @param {mediaDeleteManyArgs} args - Arguments to filter Media to delete.
     * @example
     * // Delete a few Media
     * const { count } = await prisma.media.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends mediaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, mediaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Media
     * const media = await prisma.media.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends mediaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, mediaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Media.
     * @param {mediaUpsertArgs} args - Arguments to update or create a Media.
     * @example
     * // Update or create a Media
     * const media = await prisma.media.upsert({
     *   create: {
     *     // ... data to create a Media
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Media we want to update
     *   }
     * })
    **/
    upsert<T extends mediaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, mediaUpsertArgs<ExtArgs>>
    ): Prisma__mediaClient<$Result.GetResult<Prisma.$mediaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mediaCountArgs} args - Arguments to filter Media to count.
     * @example
     * // Count the number of Media
     * const count = await prisma.media.count({
     *   where: {
     *     // ... the filter for the Media we want to count
     *   }
     * })
    **/
    count<T extends mediaCountArgs>(
      args?: Subset<T, mediaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MediaAggregateArgs>(args: Subset<T, MediaAggregateArgs>): Prisma.PrismaPromise<GetMediaAggregateType<T>>

    /**
     * Group by Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends mediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: mediaGroupByArgs['orderBy'] }
        : { orderBy?: mediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, mediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the media model
   */
  readonly fields: mediaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for media.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__mediaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends users_metaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, users_metaDefaultArgs<ExtArgs>>): Prisma__users_metaClient<$Result.GetResult<Prisma.$users_metaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    productCategories<T extends media$productCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, media$productCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productCategoriesPayload<ExtArgs>, T, 'findMany'> | Null>;

    product<T extends media$productArgs<ExtArgs> = {}>(args?: Subset<T, media$productArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findMany'> | Null>;

    galleries<T extends media$galleriesArgs<ExtArgs> = {}>(args?: Subset<T, media$galleriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productGalleriesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the media model
   */ 
  interface mediaFieldRefs {
    readonly id: FieldRef<"media", 'Int'>
    readonly url: FieldRef<"media", 'String'>
    readonly userId: FieldRef<"media", 'Int'>
    readonly createdAt: FieldRef<"media", 'DateTime'>
    readonly updatedAt: FieldRef<"media", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * media findUnique
   */
  export type mediaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the media
     */
    select?: mediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mediaInclude<ExtArgs> | null
    /**
     * Filter, which media to fetch.
     */
    where: mediaWhereUniqueInput
  }

  /**
   * media findUniqueOrThrow
   */
  export type mediaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the media
     */
    select?: mediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mediaInclude<ExtArgs> | null
    /**
     * Filter, which media to fetch.
     */
    where: mediaWhereUniqueInput
  }

  /**
   * media findFirst
   */
  export type mediaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the media
     */
    select?: mediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mediaInclude<ExtArgs> | null
    /**
     * Filter, which media to fetch.
     */
    where?: mediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of media to fetch.
     */
    orderBy?: mediaOrderByWithRelationInput | mediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for media.
     */
    cursor?: mediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` media.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of media.
     */
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }

  /**
   * media findFirstOrThrow
   */
  export type mediaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the media
     */
    select?: mediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mediaInclude<ExtArgs> | null
    /**
     * Filter, which media to fetch.
     */
    where?: mediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of media to fetch.
     */
    orderBy?: mediaOrderByWithRelationInput | mediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for media.
     */
    cursor?: mediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` media.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of media.
     */
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }

  /**
   * media findMany
   */
  export type mediaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the media
     */
    select?: mediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mediaInclude<ExtArgs> | null
    /**
     * Filter, which media to fetch.
     */
    where?: mediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of media to fetch.
     */
    orderBy?: mediaOrderByWithRelationInput | mediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing media.
     */
    cursor?: mediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` media.
     */
    skip?: number
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }

  /**
   * media create
   */
  export type mediaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the media
     */
    select?: mediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mediaInclude<ExtArgs> | null
    /**
     * The data needed to create a media.
     */
    data: XOR<mediaCreateInput, mediaUncheckedCreateInput>
  }

  /**
   * media createMany
   */
  export type mediaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many media.
     */
    data: mediaCreateManyInput | mediaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * media update
   */
  export type mediaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the media
     */
    select?: mediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mediaInclude<ExtArgs> | null
    /**
     * The data needed to update a media.
     */
    data: XOR<mediaUpdateInput, mediaUncheckedUpdateInput>
    /**
     * Choose, which media to update.
     */
    where: mediaWhereUniqueInput
  }

  /**
   * media updateMany
   */
  export type mediaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update media.
     */
    data: XOR<mediaUpdateManyMutationInput, mediaUncheckedUpdateManyInput>
    /**
     * Filter which media to update
     */
    where?: mediaWhereInput
  }

  /**
   * media upsert
   */
  export type mediaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the media
     */
    select?: mediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mediaInclude<ExtArgs> | null
    /**
     * The filter to search for the media to update in case it exists.
     */
    where: mediaWhereUniqueInput
    /**
     * In case the media found by the `where` argument doesn't exist, create a new media with this data.
     */
    create: XOR<mediaCreateInput, mediaUncheckedCreateInput>
    /**
     * In case the media was found with the provided `where` argument, update it with this data.
     */
    update: XOR<mediaUpdateInput, mediaUncheckedUpdateInput>
  }

  /**
   * media delete
   */
  export type mediaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the media
     */
    select?: mediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mediaInclude<ExtArgs> | null
    /**
     * Filter which media to delete.
     */
    where: mediaWhereUniqueInput
  }

  /**
   * media deleteMany
   */
  export type mediaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which media to delete
     */
    where?: mediaWhereInput
  }

  /**
   * media.productCategories
   */
  export type media$productCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productCategories
     */
    select?: productCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productCategoriesInclude<ExtArgs> | null
    where?: productCategoriesWhereInput
    orderBy?: productCategoriesOrderByWithRelationInput | productCategoriesOrderByWithRelationInput[]
    cursor?: productCategoriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductCategoriesScalarFieldEnum | ProductCategoriesScalarFieldEnum[]
  }

  /**
   * media.product
   */
  export type media$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * media.galleries
   */
  export type media$galleriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productGalleries
     */
    select?: productGalleriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productGalleriesInclude<ExtArgs> | null
    where?: productGalleriesWhereInput
    orderBy?: productGalleriesOrderByWithRelationInput | productGalleriesOrderByWithRelationInput[]
    cursor?: productGalleriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductGalleriesScalarFieldEnum | ProductGalleriesScalarFieldEnum[]
  }

  /**
   * media without action
   */
  export type mediaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the media
     */
    select?: mediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mediaInclude<ExtArgs> | null
  }


  /**
   * Model orders
   */

  export type AggregateOrders = {
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  export type OrdersAvgAggregateOutputType = {
    id: number | null
    sub_total: number | null
    tax_rate: number | null
    tax_total: number | null
    discount: number | null
    order_total: number | null
    userId: number | null
    billing_address_id: number | null
    shipping_address_id: number | null
  }

  export type OrdersSumAggregateOutputType = {
    id: number | null
    sub_total: number | null
    tax_rate: number | null
    tax_total: number | null
    discount: number | null
    order_total: number | null
    userId: number | null
    billing_address_id: number | null
    shipping_address_id: number | null
  }

  export type OrdersMinAggregateOutputType = {
    id: number | null
    order_status: $Enums.OrderStatus | null
    payment_method: string | null
    payment_status: $Enums.PaymentStatus | null
    sub_total: number | null
    tax_rate: number | null
    tax_total: number | null
    discount: number | null
    order_total: number | null
    userId: number | null
    billing_address_id: number | null
    shipping_address_id: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrdersMaxAggregateOutputType = {
    id: number | null
    order_status: $Enums.OrderStatus | null
    payment_method: string | null
    payment_status: $Enums.PaymentStatus | null
    sub_total: number | null
    tax_rate: number | null
    tax_total: number | null
    discount: number | null
    order_total: number | null
    userId: number | null
    billing_address_id: number | null
    shipping_address_id: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrdersCountAggregateOutputType = {
    id: number
    order_status: number
    payment_method: number
    payment_status: number
    sub_total: number
    tax_rate: number
    tax_total: number
    discount: number
    order_total: number
    userId: number
    billing_address_id: number
    shipping_address_id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrdersAvgAggregateInputType = {
    id?: true
    sub_total?: true
    tax_rate?: true
    tax_total?: true
    discount?: true
    order_total?: true
    userId?: true
    billing_address_id?: true
    shipping_address_id?: true
  }

  export type OrdersSumAggregateInputType = {
    id?: true
    sub_total?: true
    tax_rate?: true
    tax_total?: true
    discount?: true
    order_total?: true
    userId?: true
    billing_address_id?: true
    shipping_address_id?: true
  }

  export type OrdersMinAggregateInputType = {
    id?: true
    order_status?: true
    payment_method?: true
    payment_status?: true
    sub_total?: true
    tax_rate?: true
    tax_total?: true
    discount?: true
    order_total?: true
    userId?: true
    billing_address_id?: true
    shipping_address_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrdersMaxAggregateInputType = {
    id?: true
    order_status?: true
    payment_method?: true
    payment_status?: true
    sub_total?: true
    tax_rate?: true
    tax_total?: true
    discount?: true
    order_total?: true
    userId?: true
    billing_address_id?: true
    shipping_address_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrdersCountAggregateInputType = {
    id?: true
    order_status?: true
    payment_method?: true
    payment_status?: true
    sub_total?: true
    tax_rate?: true
    tax_total?: true
    discount?: true
    order_total?: true
    userId?: true
    billing_address_id?: true
    shipping_address_id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrdersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to aggregate.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders
    **/
    _count?: true | OrdersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdersMaxAggregateInputType
  }

  export type GetOrdersAggregateType<T extends OrdersAggregateArgs> = {
        [P in keyof T & keyof AggregateOrders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrders[P]>
      : GetScalarType<T[P], AggregateOrders[P]>
  }




  export type ordersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithAggregationInput | ordersOrderByWithAggregationInput[]
    by: OrdersScalarFieldEnum[] | OrdersScalarFieldEnum
    having?: ordersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdersCountAggregateInputType | true
    _avg?: OrdersAvgAggregateInputType
    _sum?: OrdersSumAggregateInputType
    _min?: OrdersMinAggregateInputType
    _max?: OrdersMaxAggregateInputType
  }

  export type OrdersGroupByOutputType = {
    id: number
    order_status: $Enums.OrderStatus
    payment_method: string
    payment_status: $Enums.PaymentStatus
    sub_total: number
    tax_rate: number
    tax_total: number
    discount: number
    order_total: number
    userId: number
    billing_address_id: number
    shipping_address_id: number
    createdAt: Date
    updatedAt: Date
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  type GetOrdersGroupByPayload<T extends ordersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrdersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdersGroupByOutputType[P]>
            : GetScalarType<T[P], OrdersGroupByOutputType[P]>
        }
      >
    >


  export type ordersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_status?: boolean
    payment_method?: boolean
    payment_status?: boolean
    sub_total?: boolean
    tax_rate?: boolean
    tax_total?: boolean
    discount?: boolean
    order_total?: boolean
    userId?: boolean
    billing_address_id?: boolean
    shipping_address_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | users_metaDefaultArgs<ExtArgs>
    billing_address?: boolean | addressesDefaultArgs<ExtArgs>
    shipping_address?: boolean | addressesDefaultArgs<ExtArgs>
    items?: boolean | orders$itemsArgs<ExtArgs>
    _count?: boolean | OrdersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orders"]>

  export type ordersSelectScalar = {
    id?: boolean
    order_status?: boolean
    payment_method?: boolean
    payment_status?: boolean
    sub_total?: boolean
    tax_rate?: boolean
    tax_total?: boolean
    discount?: boolean
    order_total?: boolean
    userId?: boolean
    billing_address_id?: boolean
    shipping_address_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type ordersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | users_metaDefaultArgs<ExtArgs>
    billing_address?: boolean | addressesDefaultArgs<ExtArgs>
    shipping_address?: boolean | addressesDefaultArgs<ExtArgs>
    items?: boolean | orders$itemsArgs<ExtArgs>
    _count?: boolean | OrdersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ordersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "orders"
    objects: {
      user: Prisma.$users_metaPayload<ExtArgs>
      billing_address: Prisma.$addressesPayload<ExtArgs>
      shipping_address: Prisma.$addressesPayload<ExtArgs>
      items: Prisma.$orderItemsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      order_status: $Enums.OrderStatus
      payment_method: string
      payment_status: $Enums.PaymentStatus
      sub_total: number
      tax_rate: number
      tax_total: number
      discount: number
      order_total: number
      userId: number
      billing_address_id: number
      shipping_address_id: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["orders"]>
    composites: {}
  }


  type ordersGetPayload<S extends boolean | null | undefined | ordersDefaultArgs> = $Result.GetResult<Prisma.$ordersPayload, S>

  type ordersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ordersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrdersCountAggregateInputType | true
    }

  export interface ordersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['orders'], meta: { name: 'orders' } }
    /**
     * Find zero or one Orders that matches the filter.
     * @param {ordersFindUniqueArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ordersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ordersFindUniqueArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Orders that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ordersFindUniqueOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ordersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ordersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersFindFirstArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Orders that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ordersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.orders.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.orders.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ordersWithIdOnly = await prisma.orders.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ordersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Orders.
     * @param {ordersCreateArgs} args - Arguments to create a Orders.
     * @example
     * // Create one Orders
     * const Orders = await prisma.orders.create({
     *   data: {
     *     // ... data to create a Orders
     *   }
     * })
     * 
    **/
    create<T extends ordersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ordersCreateArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Orders.
     * @param {ordersCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const orders = await prisma.orders.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ordersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Orders.
     * @param {ordersDeleteArgs} args - Arguments to delete one Orders.
     * @example
     * // Delete one Orders
     * const Orders = await prisma.orders.delete({
     *   where: {
     *     // ... filter to delete one Orders
     *   }
     * })
     * 
    **/
    delete<T extends ordersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ordersDeleteArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Orders.
     * @param {ordersUpdateArgs} args - Arguments to update one Orders.
     * @example
     * // Update one Orders
     * const orders = await prisma.orders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ordersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ordersUpdateArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {ordersDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.orders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ordersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const orders = await prisma.orders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ordersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ordersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orders.
     * @param {ordersUpsertArgs} args - Arguments to update or create a Orders.
     * @example
     * // Update or create a Orders
     * const orders = await prisma.orders.upsert({
     *   create: {
     *     // ... data to create a Orders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orders we want to update
     *   }
     * })
    **/
    upsert<T extends ordersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ordersUpsertArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.orders.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends ordersCountArgs>(
      args?: Subset<T, ordersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdersAggregateArgs>(args: Subset<T, OrdersAggregateArgs>): Prisma.PrismaPromise<GetOrdersAggregateType<T>>

    /**
     * Group by Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ordersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ordersGroupByArgs['orderBy'] }
        : { orderBy?: ordersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ordersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the orders model
   */
  readonly fields: ordersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for orders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ordersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends users_metaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, users_metaDefaultArgs<ExtArgs>>): Prisma__users_metaClient<$Result.GetResult<Prisma.$users_metaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    billing_address<T extends addressesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, addressesDefaultArgs<ExtArgs>>): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    shipping_address<T extends addressesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, addressesDefaultArgs<ExtArgs>>): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    items<T extends orders$itemsArgs<ExtArgs> = {}>(args?: Subset<T, orders$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderItemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the orders model
   */ 
  interface ordersFieldRefs {
    readonly id: FieldRef<"orders", 'Int'>
    readonly order_status: FieldRef<"orders", 'OrderStatus'>
    readonly payment_method: FieldRef<"orders", 'String'>
    readonly payment_status: FieldRef<"orders", 'PaymentStatus'>
    readonly sub_total: FieldRef<"orders", 'Float'>
    readonly tax_rate: FieldRef<"orders", 'Float'>
    readonly tax_total: FieldRef<"orders", 'Float'>
    readonly discount: FieldRef<"orders", 'Float'>
    readonly order_total: FieldRef<"orders", 'Float'>
    readonly userId: FieldRef<"orders", 'Int'>
    readonly billing_address_id: FieldRef<"orders", 'Int'>
    readonly shipping_address_id: FieldRef<"orders", 'Int'>
    readonly createdAt: FieldRef<"orders", 'DateTime'>
    readonly updatedAt: FieldRef<"orders", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * orders findUnique
   */
  export type ordersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders findUniqueOrThrow
   */
  export type ordersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders findFirst
   */
  export type ordersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders findFirstOrThrow
   */
  export type ordersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders findMany
   */
  export type ordersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders create
   */
  export type ordersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The data needed to create a orders.
     */
    data: XOR<ordersCreateInput, ordersUncheckedCreateInput>
  }

  /**
   * orders createMany
   */
  export type ordersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orders.
     */
    data: ordersCreateManyInput | ordersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * orders update
   */
  export type ordersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The data needed to update a orders.
     */
    data: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
    /**
     * Choose, which orders to update.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders updateMany
   */
  export type ordersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orders.
     */
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: ordersWhereInput
  }

  /**
   * orders upsert
   */
  export type ordersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The filter to search for the orders to update in case it exists.
     */
    where: ordersWhereUniqueInput
    /**
     * In case the orders found by the `where` argument doesn't exist, create a new orders with this data.
     */
    create: XOR<ordersCreateInput, ordersUncheckedCreateInput>
    /**
     * In case the orders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
  }

  /**
   * orders delete
   */
  export type ordersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter which orders to delete.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders deleteMany
   */
  export type ordersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to delete
     */
    where?: ordersWhereInput
  }

  /**
   * orders.items
   */
  export type orders$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderItems
     */
    select?: orderItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderItemsInclude<ExtArgs> | null
    where?: orderItemsWhereInput
    orderBy?: orderItemsOrderByWithRelationInput | orderItemsOrderByWithRelationInput[]
    cursor?: orderItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemsScalarFieldEnum | OrderItemsScalarFieldEnum[]
  }

  /**
   * orders without action
   */
  export type ordersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
  }


  /**
   * Model orderItems
   */

  export type AggregateOrderItems = {
    _count: OrderItemsCountAggregateOutputType | null
    _avg: OrderItemsAvgAggregateOutputType | null
    _sum: OrderItemsSumAggregateOutputType | null
    _min: OrderItemsMinAggregateOutputType | null
    _max: OrderItemsMaxAggregateOutputType | null
  }

  export type OrderItemsAvgAggregateOutputType = {
    id: number | null
    quantity: number | null
    price: number | null
    productId: number | null
    orderId: number | null
  }

  export type OrderItemsSumAggregateOutputType = {
    id: number | null
    quantity: number | null
    price: number | null
    productId: number | null
    orderId: number | null
  }

  export type OrderItemsMinAggregateOutputType = {
    id: number | null
    quantity: number | null
    price: number | null
    productId: number | null
    orderId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderItemsMaxAggregateOutputType = {
    id: number | null
    quantity: number | null
    price: number | null
    productId: number | null
    orderId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderItemsCountAggregateOutputType = {
    id: number
    quantity: number
    price: number
    productId: number
    orderId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderItemsAvgAggregateInputType = {
    id?: true
    quantity?: true
    price?: true
    productId?: true
    orderId?: true
  }

  export type OrderItemsSumAggregateInputType = {
    id?: true
    quantity?: true
    price?: true
    productId?: true
    orderId?: true
  }

  export type OrderItemsMinAggregateInputType = {
    id?: true
    quantity?: true
    price?: true
    productId?: true
    orderId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderItemsMaxAggregateInputType = {
    id?: true
    quantity?: true
    price?: true
    productId?: true
    orderId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderItemsCountAggregateInputType = {
    id?: true
    quantity?: true
    price?: true
    productId?: true
    orderId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderItemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orderItems to aggregate.
     */
    where?: orderItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderItems to fetch.
     */
    orderBy?: orderItemsOrderByWithRelationInput | orderItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: orderItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orderItems
    **/
    _count?: true | OrderItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderItemsMaxAggregateInputType
  }

  export type GetOrderItemsAggregateType<T extends OrderItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderItems[P]>
      : GetScalarType<T[P], AggregateOrderItems[P]>
  }




  export type orderItemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderItemsWhereInput
    orderBy?: orderItemsOrderByWithAggregationInput | orderItemsOrderByWithAggregationInput[]
    by: OrderItemsScalarFieldEnum[] | OrderItemsScalarFieldEnum
    having?: orderItemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderItemsCountAggregateInputType | true
    _avg?: OrderItemsAvgAggregateInputType
    _sum?: OrderItemsSumAggregateInputType
    _min?: OrderItemsMinAggregateInputType
    _max?: OrderItemsMaxAggregateInputType
  }

  export type OrderItemsGroupByOutputType = {
    id: number
    quantity: number
    price: number
    productId: number
    orderId: number
    createdAt: Date
    updatedAt: Date
    _count: OrderItemsCountAggregateOutputType | null
    _avg: OrderItemsAvgAggregateOutputType | null
    _sum: OrderItemsSumAggregateOutputType | null
    _min: OrderItemsMinAggregateOutputType | null
    _max: OrderItemsMaxAggregateOutputType | null
  }

  type GetOrderItemsGroupByPayload<T extends orderItemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderItemsGroupByOutputType[P]>
            : GetScalarType<T[P], OrderItemsGroupByOutputType[P]>
        }
      >
    >


  export type orderItemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quantity?: boolean
    price?: boolean
    productId?: boolean
    orderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | productsDefaultArgs<ExtArgs>
    order?: boolean | ordersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItems"]>

  export type orderItemsSelectScalar = {
    id?: boolean
    quantity?: boolean
    price?: boolean
    productId?: boolean
    orderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type orderItemsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | productsDefaultArgs<ExtArgs>
    order?: boolean | ordersDefaultArgs<ExtArgs>
  }


  export type $orderItemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "orderItems"
    objects: {
      product: Prisma.$productsPayload<ExtArgs>
      order: Prisma.$ordersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      quantity: number
      price: number
      productId: number
      orderId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["orderItems"]>
    composites: {}
  }


  type orderItemsGetPayload<S extends boolean | null | undefined | orderItemsDefaultArgs> = $Result.GetResult<Prisma.$orderItemsPayload, S>

  type orderItemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<orderItemsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderItemsCountAggregateInputType | true
    }

  export interface orderItemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['orderItems'], meta: { name: 'orderItems' } }
    /**
     * Find zero or one OrderItems that matches the filter.
     * @param {orderItemsFindUniqueArgs} args - Arguments to find a OrderItems
     * @example
     * // Get one OrderItems
     * const orderItems = await prisma.orderItems.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends orderItemsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, orderItemsFindUniqueArgs<ExtArgs>>
    ): Prisma__orderItemsClient<$Result.GetResult<Prisma.$orderItemsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one OrderItems that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {orderItemsFindUniqueOrThrowArgs} args - Arguments to find a OrderItems
     * @example
     * // Get one OrderItems
     * const orderItems = await prisma.orderItems.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends orderItemsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, orderItemsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__orderItemsClient<$Result.GetResult<Prisma.$orderItemsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first OrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderItemsFindFirstArgs} args - Arguments to find a OrderItems
     * @example
     * // Get one OrderItems
     * const orderItems = await prisma.orderItems.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends orderItemsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, orderItemsFindFirstArgs<ExtArgs>>
    ): Prisma__orderItemsClient<$Result.GetResult<Prisma.$orderItemsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first OrderItems that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderItemsFindFirstOrThrowArgs} args - Arguments to find a OrderItems
     * @example
     * // Get one OrderItems
     * const orderItems = await prisma.orderItems.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends orderItemsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, orderItemsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__orderItemsClient<$Result.GetResult<Prisma.$orderItemsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more OrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderItemsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderItems
     * const orderItems = await prisma.orderItems.findMany()
     * 
     * // Get first 10 OrderItems
     * const orderItems = await prisma.orderItems.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderItemsWithIdOnly = await prisma.orderItems.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends orderItemsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, orderItemsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderItemsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a OrderItems.
     * @param {orderItemsCreateArgs} args - Arguments to create a OrderItems.
     * @example
     * // Create one OrderItems
     * const OrderItems = await prisma.orderItems.create({
     *   data: {
     *     // ... data to create a OrderItems
     *   }
     * })
     * 
    **/
    create<T extends orderItemsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, orderItemsCreateArgs<ExtArgs>>
    ): Prisma__orderItemsClient<$Result.GetResult<Prisma.$orderItemsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many OrderItems.
     * @param {orderItemsCreateManyArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItems = await prisma.orderItems.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends orderItemsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, orderItemsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OrderItems.
     * @param {orderItemsDeleteArgs} args - Arguments to delete one OrderItems.
     * @example
     * // Delete one OrderItems
     * const OrderItems = await prisma.orderItems.delete({
     *   where: {
     *     // ... filter to delete one OrderItems
     *   }
     * })
     * 
    **/
    delete<T extends orderItemsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, orderItemsDeleteArgs<ExtArgs>>
    ): Prisma__orderItemsClient<$Result.GetResult<Prisma.$orderItemsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one OrderItems.
     * @param {orderItemsUpdateArgs} args - Arguments to update one OrderItems.
     * @example
     * // Update one OrderItems
     * const orderItems = await prisma.orderItems.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends orderItemsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, orderItemsUpdateArgs<ExtArgs>>
    ): Prisma__orderItemsClient<$Result.GetResult<Prisma.$orderItemsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more OrderItems.
     * @param {orderItemsDeleteManyArgs} args - Arguments to filter OrderItems to delete.
     * @example
     * // Delete a few OrderItems
     * const { count } = await prisma.orderItems.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends orderItemsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, orderItemsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderItemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderItems
     * const orderItems = await prisma.orderItems.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends orderItemsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, orderItemsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrderItems.
     * @param {orderItemsUpsertArgs} args - Arguments to update or create a OrderItems.
     * @example
     * // Update or create a OrderItems
     * const orderItems = await prisma.orderItems.upsert({
     *   create: {
     *     // ... data to create a OrderItems
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderItems we want to update
     *   }
     * })
    **/
    upsert<T extends orderItemsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, orderItemsUpsertArgs<ExtArgs>>
    ): Prisma__orderItemsClient<$Result.GetResult<Prisma.$orderItemsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderItemsCountArgs} args - Arguments to filter OrderItems to count.
     * @example
     * // Count the number of OrderItems
     * const count = await prisma.orderItems.count({
     *   where: {
     *     // ... the filter for the OrderItems we want to count
     *   }
     * })
    **/
    count<T extends orderItemsCountArgs>(
      args?: Subset<T, orderItemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderItemsAggregateArgs>(args: Subset<T, OrderItemsAggregateArgs>): Prisma.PrismaPromise<GetOrderItemsAggregateType<T>>

    /**
     * Group by OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends orderItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: orderItemsGroupByArgs['orderBy'] }
        : { orderBy?: orderItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, orderItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderItemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the orderItems model
   */
  readonly fields: orderItemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for orderItems.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__orderItemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    order<T extends ordersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ordersDefaultArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the orderItems model
   */ 
  interface orderItemsFieldRefs {
    readonly id: FieldRef<"orderItems", 'Int'>
    readonly quantity: FieldRef<"orderItems", 'Int'>
    readonly price: FieldRef<"orderItems", 'Float'>
    readonly productId: FieldRef<"orderItems", 'Int'>
    readonly orderId: FieldRef<"orderItems", 'Int'>
    readonly createdAt: FieldRef<"orderItems", 'DateTime'>
    readonly updatedAt: FieldRef<"orderItems", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * orderItems findUnique
   */
  export type orderItemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderItems
     */
    select?: orderItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderItemsInclude<ExtArgs> | null
    /**
     * Filter, which orderItems to fetch.
     */
    where: orderItemsWhereUniqueInput
  }

  /**
   * orderItems findUniqueOrThrow
   */
  export type orderItemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderItems
     */
    select?: orderItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderItemsInclude<ExtArgs> | null
    /**
     * Filter, which orderItems to fetch.
     */
    where: orderItemsWhereUniqueInput
  }

  /**
   * orderItems findFirst
   */
  export type orderItemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderItems
     */
    select?: orderItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderItemsInclude<ExtArgs> | null
    /**
     * Filter, which orderItems to fetch.
     */
    where?: orderItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderItems to fetch.
     */
    orderBy?: orderItemsOrderByWithRelationInput | orderItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orderItems.
     */
    cursor?: orderItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orderItems.
     */
    distinct?: OrderItemsScalarFieldEnum | OrderItemsScalarFieldEnum[]
  }

  /**
   * orderItems findFirstOrThrow
   */
  export type orderItemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderItems
     */
    select?: orderItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderItemsInclude<ExtArgs> | null
    /**
     * Filter, which orderItems to fetch.
     */
    where?: orderItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderItems to fetch.
     */
    orderBy?: orderItemsOrderByWithRelationInput | orderItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orderItems.
     */
    cursor?: orderItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orderItems.
     */
    distinct?: OrderItemsScalarFieldEnum | OrderItemsScalarFieldEnum[]
  }

  /**
   * orderItems findMany
   */
  export type orderItemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderItems
     */
    select?: orderItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderItemsInclude<ExtArgs> | null
    /**
     * Filter, which orderItems to fetch.
     */
    where?: orderItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderItems to fetch.
     */
    orderBy?: orderItemsOrderByWithRelationInput | orderItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orderItems.
     */
    cursor?: orderItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderItems.
     */
    skip?: number
    distinct?: OrderItemsScalarFieldEnum | OrderItemsScalarFieldEnum[]
  }

  /**
   * orderItems create
   */
  export type orderItemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderItems
     */
    select?: orderItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderItemsInclude<ExtArgs> | null
    /**
     * The data needed to create a orderItems.
     */
    data: XOR<orderItemsCreateInput, orderItemsUncheckedCreateInput>
  }

  /**
   * orderItems createMany
   */
  export type orderItemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orderItems.
     */
    data: orderItemsCreateManyInput | orderItemsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * orderItems update
   */
  export type orderItemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderItems
     */
    select?: orderItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderItemsInclude<ExtArgs> | null
    /**
     * The data needed to update a orderItems.
     */
    data: XOR<orderItemsUpdateInput, orderItemsUncheckedUpdateInput>
    /**
     * Choose, which orderItems to update.
     */
    where: orderItemsWhereUniqueInput
  }

  /**
   * orderItems updateMany
   */
  export type orderItemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orderItems.
     */
    data: XOR<orderItemsUpdateManyMutationInput, orderItemsUncheckedUpdateManyInput>
    /**
     * Filter which orderItems to update
     */
    where?: orderItemsWhereInput
  }

  /**
   * orderItems upsert
   */
  export type orderItemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderItems
     */
    select?: orderItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderItemsInclude<ExtArgs> | null
    /**
     * The filter to search for the orderItems to update in case it exists.
     */
    where: orderItemsWhereUniqueInput
    /**
     * In case the orderItems found by the `where` argument doesn't exist, create a new orderItems with this data.
     */
    create: XOR<orderItemsCreateInput, orderItemsUncheckedCreateInput>
    /**
     * In case the orderItems was found with the provided `where` argument, update it with this data.
     */
    update: XOR<orderItemsUpdateInput, orderItemsUncheckedUpdateInput>
  }

  /**
   * orderItems delete
   */
  export type orderItemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderItems
     */
    select?: orderItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderItemsInclude<ExtArgs> | null
    /**
     * Filter which orderItems to delete.
     */
    where: orderItemsWhereUniqueInput
  }

  /**
   * orderItems deleteMany
   */
  export type orderItemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orderItems to delete
     */
    where?: orderItemsWhereInput
  }

  /**
   * orderItems without action
   */
  export type orderItemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderItems
     */
    select?: orderItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderItemsInclude<ExtArgs> | null
  }


  /**
   * Model wishlists
   */

  export type AggregateWishlists = {
    _count: WishlistsCountAggregateOutputType | null
    _avg: WishlistsAvgAggregateOutputType | null
    _sum: WishlistsSumAggregateOutputType | null
    _min: WishlistsMinAggregateOutputType | null
    _max: WishlistsMaxAggregateOutputType | null
  }

  export type WishlistsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
  }

  export type WishlistsSumAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
  }

  export type WishlistsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WishlistsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WishlistsCountAggregateOutputType = {
    id: number
    userId: number
    productId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WishlistsAvgAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
  }

  export type WishlistsSumAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
  }

  export type WishlistsMinAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WishlistsMaxAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WishlistsCountAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WishlistsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which wishlists to aggregate.
     */
    where?: wishlistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wishlists to fetch.
     */
    orderBy?: wishlistsOrderByWithRelationInput | wishlistsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: wishlistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wishlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wishlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned wishlists
    **/
    _count?: true | WishlistsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WishlistsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WishlistsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WishlistsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WishlistsMaxAggregateInputType
  }

  export type GetWishlistsAggregateType<T extends WishlistsAggregateArgs> = {
        [P in keyof T & keyof AggregateWishlists]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWishlists[P]>
      : GetScalarType<T[P], AggregateWishlists[P]>
  }




  export type wishlistsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: wishlistsWhereInput
    orderBy?: wishlistsOrderByWithAggregationInput | wishlistsOrderByWithAggregationInput[]
    by: WishlistsScalarFieldEnum[] | WishlistsScalarFieldEnum
    having?: wishlistsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WishlistsCountAggregateInputType | true
    _avg?: WishlistsAvgAggregateInputType
    _sum?: WishlistsSumAggregateInputType
    _min?: WishlistsMinAggregateInputType
    _max?: WishlistsMaxAggregateInputType
  }

  export type WishlistsGroupByOutputType = {
    id: number
    userId: number
    productId: number
    createdAt: Date
    updatedAt: Date
    _count: WishlistsCountAggregateOutputType | null
    _avg: WishlistsAvgAggregateOutputType | null
    _sum: WishlistsSumAggregateOutputType | null
    _min: WishlistsMinAggregateOutputType | null
    _max: WishlistsMaxAggregateOutputType | null
  }

  type GetWishlistsGroupByPayload<T extends wishlistsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WishlistsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WishlistsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WishlistsGroupByOutputType[P]>
            : GetScalarType<T[P], WishlistsGroupByOutputType[P]>
        }
      >
    >


  export type wishlistsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | users_metaDefaultArgs<ExtArgs>
    product?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wishlists"]>

  export type wishlistsSelectScalar = {
    id?: boolean
    userId?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type wishlistsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | users_metaDefaultArgs<ExtArgs>
    product?: boolean | productsDefaultArgs<ExtArgs>
  }


  export type $wishlistsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "wishlists"
    objects: {
      user: Prisma.$users_metaPayload<ExtArgs>
      product: Prisma.$productsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      productId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["wishlists"]>
    composites: {}
  }


  type wishlistsGetPayload<S extends boolean | null | undefined | wishlistsDefaultArgs> = $Result.GetResult<Prisma.$wishlistsPayload, S>

  type wishlistsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<wishlistsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WishlistsCountAggregateInputType | true
    }

  export interface wishlistsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['wishlists'], meta: { name: 'wishlists' } }
    /**
     * Find zero or one Wishlists that matches the filter.
     * @param {wishlistsFindUniqueArgs} args - Arguments to find a Wishlists
     * @example
     * // Get one Wishlists
     * const wishlists = await prisma.wishlists.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends wishlistsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, wishlistsFindUniqueArgs<ExtArgs>>
    ): Prisma__wishlistsClient<$Result.GetResult<Prisma.$wishlistsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Wishlists that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {wishlistsFindUniqueOrThrowArgs} args - Arguments to find a Wishlists
     * @example
     * // Get one Wishlists
     * const wishlists = await prisma.wishlists.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends wishlistsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, wishlistsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__wishlistsClient<$Result.GetResult<Prisma.$wishlistsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Wishlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wishlistsFindFirstArgs} args - Arguments to find a Wishlists
     * @example
     * // Get one Wishlists
     * const wishlists = await prisma.wishlists.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends wishlistsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, wishlistsFindFirstArgs<ExtArgs>>
    ): Prisma__wishlistsClient<$Result.GetResult<Prisma.$wishlistsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Wishlists that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wishlistsFindFirstOrThrowArgs} args - Arguments to find a Wishlists
     * @example
     * // Get one Wishlists
     * const wishlists = await prisma.wishlists.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends wishlistsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, wishlistsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__wishlistsClient<$Result.GetResult<Prisma.$wishlistsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Wishlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wishlistsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wishlists
     * const wishlists = await prisma.wishlists.findMany()
     * 
     * // Get first 10 Wishlists
     * const wishlists = await prisma.wishlists.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wishlistsWithIdOnly = await prisma.wishlists.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends wishlistsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, wishlistsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$wishlistsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Wishlists.
     * @param {wishlistsCreateArgs} args - Arguments to create a Wishlists.
     * @example
     * // Create one Wishlists
     * const Wishlists = await prisma.wishlists.create({
     *   data: {
     *     // ... data to create a Wishlists
     *   }
     * })
     * 
    **/
    create<T extends wishlistsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, wishlistsCreateArgs<ExtArgs>>
    ): Prisma__wishlistsClient<$Result.GetResult<Prisma.$wishlistsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Wishlists.
     * @param {wishlistsCreateManyArgs} args - Arguments to create many Wishlists.
     * @example
     * // Create many Wishlists
     * const wishlists = await prisma.wishlists.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends wishlistsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, wishlistsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Wishlists.
     * @param {wishlistsDeleteArgs} args - Arguments to delete one Wishlists.
     * @example
     * // Delete one Wishlists
     * const Wishlists = await prisma.wishlists.delete({
     *   where: {
     *     // ... filter to delete one Wishlists
     *   }
     * })
     * 
    **/
    delete<T extends wishlistsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, wishlistsDeleteArgs<ExtArgs>>
    ): Prisma__wishlistsClient<$Result.GetResult<Prisma.$wishlistsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Wishlists.
     * @param {wishlistsUpdateArgs} args - Arguments to update one Wishlists.
     * @example
     * // Update one Wishlists
     * const wishlists = await prisma.wishlists.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends wishlistsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, wishlistsUpdateArgs<ExtArgs>>
    ): Prisma__wishlistsClient<$Result.GetResult<Prisma.$wishlistsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Wishlists.
     * @param {wishlistsDeleteManyArgs} args - Arguments to filter Wishlists to delete.
     * @example
     * // Delete a few Wishlists
     * const { count } = await prisma.wishlists.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends wishlistsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, wishlistsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wishlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wishlistsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wishlists
     * const wishlists = await prisma.wishlists.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends wishlistsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, wishlistsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Wishlists.
     * @param {wishlistsUpsertArgs} args - Arguments to update or create a Wishlists.
     * @example
     * // Update or create a Wishlists
     * const wishlists = await prisma.wishlists.upsert({
     *   create: {
     *     // ... data to create a Wishlists
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wishlists we want to update
     *   }
     * })
    **/
    upsert<T extends wishlistsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, wishlistsUpsertArgs<ExtArgs>>
    ): Prisma__wishlistsClient<$Result.GetResult<Prisma.$wishlistsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Wishlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wishlistsCountArgs} args - Arguments to filter Wishlists to count.
     * @example
     * // Count the number of Wishlists
     * const count = await prisma.wishlists.count({
     *   where: {
     *     // ... the filter for the Wishlists we want to count
     *   }
     * })
    **/
    count<T extends wishlistsCountArgs>(
      args?: Subset<T, wishlistsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WishlistsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wishlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WishlistsAggregateArgs>(args: Subset<T, WishlistsAggregateArgs>): Prisma.PrismaPromise<GetWishlistsAggregateType<T>>

    /**
     * Group by Wishlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wishlistsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends wishlistsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: wishlistsGroupByArgs['orderBy'] }
        : { orderBy?: wishlistsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, wishlistsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWishlistsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the wishlists model
   */
  readonly fields: wishlistsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for wishlists.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__wishlistsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends users_metaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, users_metaDefaultArgs<ExtArgs>>): Prisma__users_metaClient<$Result.GetResult<Prisma.$users_metaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    product<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the wishlists model
   */ 
  interface wishlistsFieldRefs {
    readonly id: FieldRef<"wishlists", 'Int'>
    readonly userId: FieldRef<"wishlists", 'Int'>
    readonly productId: FieldRef<"wishlists", 'Int'>
    readonly createdAt: FieldRef<"wishlists", 'DateTime'>
    readonly updatedAt: FieldRef<"wishlists", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * wishlists findUnique
   */
  export type wishlistsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wishlists
     */
    select?: wishlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wishlistsInclude<ExtArgs> | null
    /**
     * Filter, which wishlists to fetch.
     */
    where: wishlistsWhereUniqueInput
  }

  /**
   * wishlists findUniqueOrThrow
   */
  export type wishlistsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wishlists
     */
    select?: wishlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wishlistsInclude<ExtArgs> | null
    /**
     * Filter, which wishlists to fetch.
     */
    where: wishlistsWhereUniqueInput
  }

  /**
   * wishlists findFirst
   */
  export type wishlistsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wishlists
     */
    select?: wishlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wishlistsInclude<ExtArgs> | null
    /**
     * Filter, which wishlists to fetch.
     */
    where?: wishlistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wishlists to fetch.
     */
    orderBy?: wishlistsOrderByWithRelationInput | wishlistsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for wishlists.
     */
    cursor?: wishlistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wishlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wishlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of wishlists.
     */
    distinct?: WishlistsScalarFieldEnum | WishlistsScalarFieldEnum[]
  }

  /**
   * wishlists findFirstOrThrow
   */
  export type wishlistsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wishlists
     */
    select?: wishlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wishlistsInclude<ExtArgs> | null
    /**
     * Filter, which wishlists to fetch.
     */
    where?: wishlistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wishlists to fetch.
     */
    orderBy?: wishlistsOrderByWithRelationInput | wishlistsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for wishlists.
     */
    cursor?: wishlistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wishlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wishlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of wishlists.
     */
    distinct?: WishlistsScalarFieldEnum | WishlistsScalarFieldEnum[]
  }

  /**
   * wishlists findMany
   */
  export type wishlistsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wishlists
     */
    select?: wishlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wishlistsInclude<ExtArgs> | null
    /**
     * Filter, which wishlists to fetch.
     */
    where?: wishlistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wishlists to fetch.
     */
    orderBy?: wishlistsOrderByWithRelationInput | wishlistsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing wishlists.
     */
    cursor?: wishlistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wishlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wishlists.
     */
    skip?: number
    distinct?: WishlistsScalarFieldEnum | WishlistsScalarFieldEnum[]
  }

  /**
   * wishlists create
   */
  export type wishlistsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wishlists
     */
    select?: wishlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wishlistsInclude<ExtArgs> | null
    /**
     * The data needed to create a wishlists.
     */
    data: XOR<wishlistsCreateInput, wishlistsUncheckedCreateInput>
  }

  /**
   * wishlists createMany
   */
  export type wishlistsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many wishlists.
     */
    data: wishlistsCreateManyInput | wishlistsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * wishlists update
   */
  export type wishlistsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wishlists
     */
    select?: wishlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wishlistsInclude<ExtArgs> | null
    /**
     * The data needed to update a wishlists.
     */
    data: XOR<wishlistsUpdateInput, wishlistsUncheckedUpdateInput>
    /**
     * Choose, which wishlists to update.
     */
    where: wishlistsWhereUniqueInput
  }

  /**
   * wishlists updateMany
   */
  export type wishlistsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update wishlists.
     */
    data: XOR<wishlistsUpdateManyMutationInput, wishlistsUncheckedUpdateManyInput>
    /**
     * Filter which wishlists to update
     */
    where?: wishlistsWhereInput
  }

  /**
   * wishlists upsert
   */
  export type wishlistsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wishlists
     */
    select?: wishlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wishlistsInclude<ExtArgs> | null
    /**
     * The filter to search for the wishlists to update in case it exists.
     */
    where: wishlistsWhereUniqueInput
    /**
     * In case the wishlists found by the `where` argument doesn't exist, create a new wishlists with this data.
     */
    create: XOR<wishlistsCreateInput, wishlistsUncheckedCreateInput>
    /**
     * In case the wishlists was found with the provided `where` argument, update it with this data.
     */
    update: XOR<wishlistsUpdateInput, wishlistsUncheckedUpdateInput>
  }

  /**
   * wishlists delete
   */
  export type wishlistsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wishlists
     */
    select?: wishlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wishlistsInclude<ExtArgs> | null
    /**
     * Filter which wishlists to delete.
     */
    where: wishlistsWhereUniqueInput
  }

  /**
   * wishlists deleteMany
   */
  export type wishlistsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which wishlists to delete
     */
    where?: wishlistsWhereInput
  }

  /**
   * wishlists without action
   */
  export type wishlistsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wishlists
     */
    select?: wishlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wishlistsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const Users_metaScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    photo: 'photo',
    phone: 'phone',
    role: 'role',
    access_token: 'access_token',
    isVerified: 'isVerified',
    isInTrash: 'isInTrash',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type Users_metaScalarFieldEnum = (typeof Users_metaScalarFieldEnum)[keyof typeof Users_metaScalarFieldEnum]


  export const AddressesScalarFieldEnum: {
    id: 'id',
    type: 'type',
    full_name: 'full_name',
    email: 'email',
    phone: 'phone',
    street_address: 'street_address',
    street_address_2: 'street_address_2',
    district: 'district',
    country: 'country',
    zip_code: 'zip_code',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AddressesScalarFieldEnum = (typeof AddressesScalarFieldEnum)[keyof typeof AddressesScalarFieldEnum]


  export const ProductsScalarFieldEnum: {
    id: 'id',
    authorId: 'authorId',
    name: 'name',
    slug: 'slug',
    price: 'price',
    regular_price: 'regular_price',
    sale_price: 'sale_price',
    stock_quantity: 'stock_quantity',
    stock_status: 'stock_status',
    sku: 'sku',
    description: 'description',
    short_description: 'short_description',
    thumbnailId: 'thumbnailId',
    weight: 'weight',
    length: 'length',
    width: 'width',
    height: 'height',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductsScalarFieldEnum = (typeof ProductsScalarFieldEnum)[keyof typeof ProductsScalarFieldEnum]


  export const ProductGalleriesScalarFieldEnum: {
    productId: 'productId',
    mediaId: 'mediaId'
  };

  export type ProductGalleriesScalarFieldEnum = (typeof ProductGalleriesScalarFieldEnum)[keyof typeof ProductGalleriesScalarFieldEnum]


  export const ProductCategoriesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    photoId: 'photoId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductCategoriesScalarFieldEnum = (typeof ProductCategoriesScalarFieldEnum)[keyof typeof ProductCategoriesScalarFieldEnum]


  export const CategoriesOnProductsScalarFieldEnum: {
    productId: 'productId',
    categoryId: 'categoryId'
  };

  export type CategoriesOnProductsScalarFieldEnum = (typeof CategoriesOnProductsScalarFieldEnum)[keyof typeof CategoriesOnProductsScalarFieldEnum]


  export const ProductCartsScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    userId: 'userId',
    quantity: 'quantity'
  };

  export type ProductCartsScalarFieldEnum = (typeof ProductCartsScalarFieldEnum)[keyof typeof ProductCartsScalarFieldEnum]


  export const ProductReviewsScalarFieldEnum: {
    id: 'id',
    rating: 'rating',
    comment: 'comment',
    status: 'status',
    userId: 'userId',
    productId: 'productId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductReviewsScalarFieldEnum = (typeof ProductReviewsScalarFieldEnum)[keyof typeof ProductReviewsScalarFieldEnum]


  export const MediaScalarFieldEnum: {
    id: 'id',
    url: 'url',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MediaScalarFieldEnum = (typeof MediaScalarFieldEnum)[keyof typeof MediaScalarFieldEnum]


  export const OrdersScalarFieldEnum: {
    id: 'id',
    order_status: 'order_status',
    payment_method: 'payment_method',
    payment_status: 'payment_status',
    sub_total: 'sub_total',
    tax_rate: 'tax_rate',
    tax_total: 'tax_total',
    discount: 'discount',
    order_total: 'order_total',
    userId: 'userId',
    billing_address_id: 'billing_address_id',
    shipping_address_id: 'shipping_address_id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrdersScalarFieldEnum = (typeof OrdersScalarFieldEnum)[keyof typeof OrdersScalarFieldEnum]


  export const OrderItemsScalarFieldEnum: {
    id: 'id',
    quantity: 'quantity',
    price: 'price',
    productId: 'productId',
    orderId: 'orderId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderItemsScalarFieldEnum = (typeof OrderItemsScalarFieldEnum)[keyof typeof OrderItemsScalarFieldEnum]


  export const WishlistsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    productId: 'productId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WishlistsScalarFieldEnum = (typeof WishlistsScalarFieldEnum)[keyof typeof WishlistsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'AddressType'
   */
  export type EnumAddressTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AddressType'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'StockStatus'
   */
  export type EnumStockStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StockStatus'>
    


  /**
   * Reference to a field of type 'ProductStatus'
   */
  export type EnumProductStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductStatus'>
    


  /**
   * Reference to a field of type 'ProductReviewStatus'
   */
  export type EnumProductReviewStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductReviewStatus'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    
  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: IntFilter<"users"> | number
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    createdAt?: DateTimeFilter<"users"> | Date | string
    updatedAt?: DateTimeFilter<"users"> | Date | string
    meta?: XOR<Users_metaNullableRelationFilter, users_metaWhereInput> | null
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meta?: users_metaOrderByWithRelationInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    password?: StringFilter<"users"> | string
    createdAt?: DateTimeFilter<"users"> | Date | string
    updatedAt?: DateTimeFilter<"users"> | Date | string
    meta?: XOR<Users_metaNullableRelationFilter, users_metaWhereInput> | null
  }, "id" | "email">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users"> | number
    email?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    createdAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
  }

  export type users_metaWhereInput = {
    AND?: users_metaWhereInput | users_metaWhereInput[]
    OR?: users_metaWhereInput[]
    NOT?: users_metaWhereInput | users_metaWhereInput[]
    id?: IntFilter<"users_meta"> | number
    userId?: IntFilter<"users_meta"> | number
    name?: StringNullableFilter<"users_meta"> | string | null
    photo?: StringNullableFilter<"users_meta"> | string | null
    phone?: StringNullableFilter<"users_meta"> | string | null
    role?: EnumRoleFilter<"users_meta"> | $Enums.Role
    access_token?: StringNullableFilter<"users_meta"> | string | null
    isVerified?: BoolFilter<"users_meta"> | boolean
    isInTrash?: BoolFilter<"users_meta"> | boolean
    createdAt?: DateTimeFilter<"users_meta"> | Date | string
    updatedAt?: DateTimeFilter<"users_meta"> | Date | string
    user?: XOR<UsersRelationFilter, usersWhereInput>
    products?: ProductsListRelationFilter
    carts?: ProductCartsListRelationFilter
    media?: MediaListRelationFilter
    addresses?: AddressesListRelationFilter
    orders?: OrdersListRelationFilter
    wishlists?: WishlistsListRelationFilter
    product_reviews?: ProductReviewsListRelationFilter
  }

  export type users_metaOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrderInput | SortOrder
    photo?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    role?: SortOrder
    access_token?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    isInTrash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: usersOrderByWithRelationInput
    products?: productsOrderByRelationAggregateInput
    carts?: productCartsOrderByRelationAggregateInput
    media?: mediaOrderByRelationAggregateInput
    addresses?: addressesOrderByRelationAggregateInput
    orders?: ordersOrderByRelationAggregateInput
    wishlists?: wishlistsOrderByRelationAggregateInput
    product_reviews?: productReviewsOrderByRelationAggregateInput
  }

  export type users_metaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: users_metaWhereInput | users_metaWhereInput[]
    OR?: users_metaWhereInput[]
    NOT?: users_metaWhereInput | users_metaWhereInput[]
    name?: StringNullableFilter<"users_meta"> | string | null
    photo?: StringNullableFilter<"users_meta"> | string | null
    phone?: StringNullableFilter<"users_meta"> | string | null
    role?: EnumRoleFilter<"users_meta"> | $Enums.Role
    access_token?: StringNullableFilter<"users_meta"> | string | null
    isVerified?: BoolFilter<"users_meta"> | boolean
    isInTrash?: BoolFilter<"users_meta"> | boolean
    createdAt?: DateTimeFilter<"users_meta"> | Date | string
    updatedAt?: DateTimeFilter<"users_meta"> | Date | string
    user?: XOR<UsersRelationFilter, usersWhereInput>
    products?: ProductsListRelationFilter
    carts?: ProductCartsListRelationFilter
    media?: MediaListRelationFilter
    addresses?: AddressesListRelationFilter
    orders?: OrdersListRelationFilter
    wishlists?: WishlistsListRelationFilter
    product_reviews?: ProductReviewsListRelationFilter
  }, "id" | "userId">

  export type users_metaOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrderInput | SortOrder
    photo?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    role?: SortOrder
    access_token?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    isInTrash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: users_metaCountOrderByAggregateInput
    _avg?: users_metaAvgOrderByAggregateInput
    _max?: users_metaMaxOrderByAggregateInput
    _min?: users_metaMinOrderByAggregateInput
    _sum?: users_metaSumOrderByAggregateInput
  }

  export type users_metaScalarWhereWithAggregatesInput = {
    AND?: users_metaScalarWhereWithAggregatesInput | users_metaScalarWhereWithAggregatesInput[]
    OR?: users_metaScalarWhereWithAggregatesInput[]
    NOT?: users_metaScalarWhereWithAggregatesInput | users_metaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users_meta"> | number
    userId?: IntWithAggregatesFilter<"users_meta"> | number
    name?: StringNullableWithAggregatesFilter<"users_meta"> | string | null
    photo?: StringNullableWithAggregatesFilter<"users_meta"> | string | null
    phone?: StringNullableWithAggregatesFilter<"users_meta"> | string | null
    role?: EnumRoleWithAggregatesFilter<"users_meta"> | $Enums.Role
    access_token?: StringNullableWithAggregatesFilter<"users_meta"> | string | null
    isVerified?: BoolWithAggregatesFilter<"users_meta"> | boolean
    isInTrash?: BoolWithAggregatesFilter<"users_meta"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"users_meta"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"users_meta"> | Date | string
  }

  export type addressesWhereInput = {
    AND?: addressesWhereInput | addressesWhereInput[]
    OR?: addressesWhereInput[]
    NOT?: addressesWhereInput | addressesWhereInput[]
    id?: IntFilter<"addresses"> | number
    type?: EnumAddressTypeFilter<"addresses"> | $Enums.AddressType
    full_name?: StringFilter<"addresses"> | string
    email?: StringFilter<"addresses"> | string
    phone?: StringFilter<"addresses"> | string
    street_address?: StringFilter<"addresses"> | string
    street_address_2?: StringNullableFilter<"addresses"> | string | null
    district?: StringFilter<"addresses"> | string
    country?: StringFilter<"addresses"> | string
    zip_code?: IntFilter<"addresses"> | number
    userId?: IntFilter<"addresses"> | number
    createdAt?: DateTimeFilter<"addresses"> | Date | string
    updatedAt?: DateTimeFilter<"addresses"> | Date | string
    user?: XOR<Users_metaRelationFilter, users_metaWhereInput>
    billing_orders?: OrdersListRelationFilter
    shipping_orders?: OrdersListRelationFilter
  }

  export type addressesOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    street_address?: SortOrder
    street_address_2?: SortOrderInput | SortOrder
    district?: SortOrder
    country?: SortOrder
    zip_code?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: users_metaOrderByWithRelationInput
    billing_orders?: ordersOrderByRelationAggregateInput
    shipping_orders?: ordersOrderByRelationAggregateInput
  }

  export type addressesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: addressesWhereInput | addressesWhereInput[]
    OR?: addressesWhereInput[]
    NOT?: addressesWhereInput | addressesWhereInput[]
    type?: EnumAddressTypeFilter<"addresses"> | $Enums.AddressType
    full_name?: StringFilter<"addresses"> | string
    email?: StringFilter<"addresses"> | string
    phone?: StringFilter<"addresses"> | string
    street_address?: StringFilter<"addresses"> | string
    street_address_2?: StringNullableFilter<"addresses"> | string | null
    district?: StringFilter<"addresses"> | string
    country?: StringFilter<"addresses"> | string
    zip_code?: IntFilter<"addresses"> | number
    userId?: IntFilter<"addresses"> | number
    createdAt?: DateTimeFilter<"addresses"> | Date | string
    updatedAt?: DateTimeFilter<"addresses"> | Date | string
    user?: XOR<Users_metaRelationFilter, users_metaWhereInput>
    billing_orders?: OrdersListRelationFilter
    shipping_orders?: OrdersListRelationFilter
  }, "id">

  export type addressesOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    street_address?: SortOrder
    street_address_2?: SortOrderInput | SortOrder
    district?: SortOrder
    country?: SortOrder
    zip_code?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: addressesCountOrderByAggregateInput
    _avg?: addressesAvgOrderByAggregateInput
    _max?: addressesMaxOrderByAggregateInput
    _min?: addressesMinOrderByAggregateInput
    _sum?: addressesSumOrderByAggregateInput
  }

  export type addressesScalarWhereWithAggregatesInput = {
    AND?: addressesScalarWhereWithAggregatesInput | addressesScalarWhereWithAggregatesInput[]
    OR?: addressesScalarWhereWithAggregatesInput[]
    NOT?: addressesScalarWhereWithAggregatesInput | addressesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"addresses"> | number
    type?: EnumAddressTypeWithAggregatesFilter<"addresses"> | $Enums.AddressType
    full_name?: StringWithAggregatesFilter<"addresses"> | string
    email?: StringWithAggregatesFilter<"addresses"> | string
    phone?: StringWithAggregatesFilter<"addresses"> | string
    street_address?: StringWithAggregatesFilter<"addresses"> | string
    street_address_2?: StringNullableWithAggregatesFilter<"addresses"> | string | null
    district?: StringWithAggregatesFilter<"addresses"> | string
    country?: StringWithAggregatesFilter<"addresses"> | string
    zip_code?: IntWithAggregatesFilter<"addresses"> | number
    userId?: IntWithAggregatesFilter<"addresses"> | number
    createdAt?: DateTimeWithAggregatesFilter<"addresses"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"addresses"> | Date | string
  }

  export type productsWhereInput = {
    AND?: productsWhereInput | productsWhereInput[]
    OR?: productsWhereInput[]
    NOT?: productsWhereInput | productsWhereInput[]
    id?: IntFilter<"products"> | number
    authorId?: IntFilter<"products"> | number
    name?: StringFilter<"products"> | string
    slug?: StringFilter<"products"> | string
    price?: FloatFilter<"products"> | number
    regular_price?: FloatFilter<"products"> | number
    sale_price?: FloatNullableFilter<"products"> | number | null
    stock_quantity?: IntNullableFilter<"products"> | number | null
    stock_status?: EnumStockStatusFilter<"products"> | $Enums.StockStatus
    sku?: StringNullableFilter<"products"> | string | null
    description?: StringNullableFilter<"products"> | string | null
    short_description?: StringNullableFilter<"products"> | string | null
    thumbnailId?: IntNullableFilter<"products"> | number | null
    weight?: FloatNullableFilter<"products"> | number | null
    length?: FloatNullableFilter<"products"> | number | null
    width?: FloatNullableFilter<"products"> | number | null
    height?: FloatNullableFilter<"products"> | number | null
    status?: EnumProductStatusFilter<"products"> | $Enums.ProductStatus
    createdAt?: DateTimeFilter<"products"> | Date | string
    updatedAt?: DateTimeFilter<"products"> | Date | string
    author?: XOR<Users_metaRelationFilter, users_metaWhereInput>
    thumbnail?: XOR<MediaNullableRelationFilter, mediaWhereInput> | null
    categories?: CategoriesOnProductsListRelationFilter
    carts?: ProductCartsListRelationFilter
    galleries?: ProductGalleriesListRelationFilter
    order_items?: OrderItemsListRelationFilter
    wishlists?: WishlistsListRelationFilter
    reviews?: ProductReviewsListRelationFilter
  }

  export type productsOrderByWithRelationInput = {
    id?: SortOrder
    authorId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    price?: SortOrder
    regular_price?: SortOrder
    sale_price?: SortOrderInput | SortOrder
    stock_quantity?: SortOrderInput | SortOrder
    stock_status?: SortOrder
    sku?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    short_description?: SortOrderInput | SortOrder
    thumbnailId?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    length?: SortOrderInput | SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    author?: users_metaOrderByWithRelationInput
    thumbnail?: mediaOrderByWithRelationInput
    categories?: categoriesOnProductsOrderByRelationAggregateInput
    carts?: productCartsOrderByRelationAggregateInput
    galleries?: productGalleriesOrderByRelationAggregateInput
    order_items?: orderItemsOrderByRelationAggregateInput
    wishlists?: wishlistsOrderByRelationAggregateInput
    reviews?: productReviewsOrderByRelationAggregateInput
  }

  export type productsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: productsWhereInput | productsWhereInput[]
    OR?: productsWhereInput[]
    NOT?: productsWhereInput | productsWhereInput[]
    authorId?: IntFilter<"products"> | number
    name?: StringFilter<"products"> | string
    price?: FloatFilter<"products"> | number
    regular_price?: FloatFilter<"products"> | number
    sale_price?: FloatNullableFilter<"products"> | number | null
    stock_quantity?: IntNullableFilter<"products"> | number | null
    stock_status?: EnumStockStatusFilter<"products"> | $Enums.StockStatus
    sku?: StringNullableFilter<"products"> | string | null
    description?: StringNullableFilter<"products"> | string | null
    short_description?: StringNullableFilter<"products"> | string | null
    thumbnailId?: IntNullableFilter<"products"> | number | null
    weight?: FloatNullableFilter<"products"> | number | null
    length?: FloatNullableFilter<"products"> | number | null
    width?: FloatNullableFilter<"products"> | number | null
    height?: FloatNullableFilter<"products"> | number | null
    status?: EnumProductStatusFilter<"products"> | $Enums.ProductStatus
    createdAt?: DateTimeFilter<"products"> | Date | string
    updatedAt?: DateTimeFilter<"products"> | Date | string
    author?: XOR<Users_metaRelationFilter, users_metaWhereInput>
    thumbnail?: XOR<MediaNullableRelationFilter, mediaWhereInput> | null
    categories?: CategoriesOnProductsListRelationFilter
    carts?: ProductCartsListRelationFilter
    galleries?: ProductGalleriesListRelationFilter
    order_items?: OrderItemsListRelationFilter
    wishlists?: WishlistsListRelationFilter
    reviews?: ProductReviewsListRelationFilter
  }, "id" | "slug">

  export type productsOrderByWithAggregationInput = {
    id?: SortOrder
    authorId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    price?: SortOrder
    regular_price?: SortOrder
    sale_price?: SortOrderInput | SortOrder
    stock_quantity?: SortOrderInput | SortOrder
    stock_status?: SortOrder
    sku?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    short_description?: SortOrderInput | SortOrder
    thumbnailId?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    length?: SortOrderInput | SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: productsCountOrderByAggregateInput
    _avg?: productsAvgOrderByAggregateInput
    _max?: productsMaxOrderByAggregateInput
    _min?: productsMinOrderByAggregateInput
    _sum?: productsSumOrderByAggregateInput
  }

  export type productsScalarWhereWithAggregatesInput = {
    AND?: productsScalarWhereWithAggregatesInput | productsScalarWhereWithAggregatesInput[]
    OR?: productsScalarWhereWithAggregatesInput[]
    NOT?: productsScalarWhereWithAggregatesInput | productsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"products"> | number
    authorId?: IntWithAggregatesFilter<"products"> | number
    name?: StringWithAggregatesFilter<"products"> | string
    slug?: StringWithAggregatesFilter<"products"> | string
    price?: FloatWithAggregatesFilter<"products"> | number
    regular_price?: FloatWithAggregatesFilter<"products"> | number
    sale_price?: FloatNullableWithAggregatesFilter<"products"> | number | null
    stock_quantity?: IntNullableWithAggregatesFilter<"products"> | number | null
    stock_status?: EnumStockStatusWithAggregatesFilter<"products"> | $Enums.StockStatus
    sku?: StringNullableWithAggregatesFilter<"products"> | string | null
    description?: StringNullableWithAggregatesFilter<"products"> | string | null
    short_description?: StringNullableWithAggregatesFilter<"products"> | string | null
    thumbnailId?: IntNullableWithAggregatesFilter<"products"> | number | null
    weight?: FloatNullableWithAggregatesFilter<"products"> | number | null
    length?: FloatNullableWithAggregatesFilter<"products"> | number | null
    width?: FloatNullableWithAggregatesFilter<"products"> | number | null
    height?: FloatNullableWithAggregatesFilter<"products"> | number | null
    status?: EnumProductStatusWithAggregatesFilter<"products"> | $Enums.ProductStatus
    createdAt?: DateTimeWithAggregatesFilter<"products"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"products"> | Date | string
  }

  export type productGalleriesWhereInput = {
    AND?: productGalleriesWhereInput | productGalleriesWhereInput[]
    OR?: productGalleriesWhereInput[]
    NOT?: productGalleriesWhereInput | productGalleriesWhereInput[]
    productId?: IntFilter<"productGalleries"> | number
    mediaId?: IntFilter<"productGalleries"> | number
    product?: XOR<ProductsRelationFilter, productsWhereInput>
    media?: XOR<MediaRelationFilter, mediaWhereInput>
  }

  export type productGalleriesOrderByWithRelationInput = {
    productId?: SortOrder
    mediaId?: SortOrder
    product?: productsOrderByWithRelationInput
    media?: mediaOrderByWithRelationInput
  }

  export type productGalleriesWhereUniqueInput = Prisma.AtLeast<{
    productId_mediaId?: productGalleriesProductIdMediaIdCompoundUniqueInput
    AND?: productGalleriesWhereInput | productGalleriesWhereInput[]
    OR?: productGalleriesWhereInput[]
    NOT?: productGalleriesWhereInput | productGalleriesWhereInput[]
    productId?: IntFilter<"productGalleries"> | number
    mediaId?: IntFilter<"productGalleries"> | number
    product?: XOR<ProductsRelationFilter, productsWhereInput>
    media?: XOR<MediaRelationFilter, mediaWhereInput>
  }, "productId_mediaId">

  export type productGalleriesOrderByWithAggregationInput = {
    productId?: SortOrder
    mediaId?: SortOrder
    _count?: productGalleriesCountOrderByAggregateInput
    _avg?: productGalleriesAvgOrderByAggregateInput
    _max?: productGalleriesMaxOrderByAggregateInput
    _min?: productGalleriesMinOrderByAggregateInput
    _sum?: productGalleriesSumOrderByAggregateInput
  }

  export type productGalleriesScalarWhereWithAggregatesInput = {
    AND?: productGalleriesScalarWhereWithAggregatesInput | productGalleriesScalarWhereWithAggregatesInput[]
    OR?: productGalleriesScalarWhereWithAggregatesInput[]
    NOT?: productGalleriesScalarWhereWithAggregatesInput | productGalleriesScalarWhereWithAggregatesInput[]
    productId?: IntWithAggregatesFilter<"productGalleries"> | number
    mediaId?: IntWithAggregatesFilter<"productGalleries"> | number
  }

  export type productCategoriesWhereInput = {
    AND?: productCategoriesWhereInput | productCategoriesWhereInput[]
    OR?: productCategoriesWhereInput[]
    NOT?: productCategoriesWhereInput | productCategoriesWhereInput[]
    id?: IntFilter<"productCategories"> | number
    name?: StringFilter<"productCategories"> | string
    slug?: StringFilter<"productCategories"> | string
    photoId?: IntNullableFilter<"productCategories"> | number | null
    createdAt?: DateTimeFilter<"productCategories"> | Date | string
    updatedAt?: DateTimeFilter<"productCategories"> | Date | string
    photo?: XOR<MediaNullableRelationFilter, mediaWhereInput> | null
    products?: CategoriesOnProductsListRelationFilter
  }

  export type productCategoriesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    photoId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    photo?: mediaOrderByWithRelationInput
    products?: categoriesOnProductsOrderByRelationAggregateInput
  }

  export type productCategoriesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    slug?: string
    AND?: productCategoriesWhereInput | productCategoriesWhereInput[]
    OR?: productCategoriesWhereInput[]
    NOT?: productCategoriesWhereInput | productCategoriesWhereInput[]
    photoId?: IntNullableFilter<"productCategories"> | number | null
    createdAt?: DateTimeFilter<"productCategories"> | Date | string
    updatedAt?: DateTimeFilter<"productCategories"> | Date | string
    photo?: XOR<MediaNullableRelationFilter, mediaWhereInput> | null
    products?: CategoriesOnProductsListRelationFilter
  }, "id" | "name" | "slug">

  export type productCategoriesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    photoId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: productCategoriesCountOrderByAggregateInput
    _avg?: productCategoriesAvgOrderByAggregateInput
    _max?: productCategoriesMaxOrderByAggregateInput
    _min?: productCategoriesMinOrderByAggregateInput
    _sum?: productCategoriesSumOrderByAggregateInput
  }

  export type productCategoriesScalarWhereWithAggregatesInput = {
    AND?: productCategoriesScalarWhereWithAggregatesInput | productCategoriesScalarWhereWithAggregatesInput[]
    OR?: productCategoriesScalarWhereWithAggregatesInput[]
    NOT?: productCategoriesScalarWhereWithAggregatesInput | productCategoriesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"productCategories"> | number
    name?: StringWithAggregatesFilter<"productCategories"> | string
    slug?: StringWithAggregatesFilter<"productCategories"> | string
    photoId?: IntNullableWithAggregatesFilter<"productCategories"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"productCategories"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"productCategories"> | Date | string
  }

  export type categoriesOnProductsWhereInput = {
    AND?: categoriesOnProductsWhereInput | categoriesOnProductsWhereInput[]
    OR?: categoriesOnProductsWhereInput[]
    NOT?: categoriesOnProductsWhereInput | categoriesOnProductsWhereInput[]
    productId?: IntFilter<"categoriesOnProducts"> | number
    categoryId?: IntFilter<"categoriesOnProducts"> | number
    product?: XOR<ProductsRelationFilter, productsWhereInput>
    category?: XOR<ProductCategoriesRelationFilter, productCategoriesWhereInput>
  }

  export type categoriesOnProductsOrderByWithRelationInput = {
    productId?: SortOrder
    categoryId?: SortOrder
    product?: productsOrderByWithRelationInput
    category?: productCategoriesOrderByWithRelationInput
  }

  export type categoriesOnProductsWhereUniqueInput = Prisma.AtLeast<{
    productId_categoryId?: categoriesOnProductsProductIdCategoryIdCompoundUniqueInput
    AND?: categoriesOnProductsWhereInput | categoriesOnProductsWhereInput[]
    OR?: categoriesOnProductsWhereInput[]
    NOT?: categoriesOnProductsWhereInput | categoriesOnProductsWhereInput[]
    productId?: IntFilter<"categoriesOnProducts"> | number
    categoryId?: IntFilter<"categoriesOnProducts"> | number
    product?: XOR<ProductsRelationFilter, productsWhereInput>
    category?: XOR<ProductCategoriesRelationFilter, productCategoriesWhereInput>
  }, "productId_categoryId">

  export type categoriesOnProductsOrderByWithAggregationInput = {
    productId?: SortOrder
    categoryId?: SortOrder
    _count?: categoriesOnProductsCountOrderByAggregateInput
    _avg?: categoriesOnProductsAvgOrderByAggregateInput
    _max?: categoriesOnProductsMaxOrderByAggregateInput
    _min?: categoriesOnProductsMinOrderByAggregateInput
    _sum?: categoriesOnProductsSumOrderByAggregateInput
  }

  export type categoriesOnProductsScalarWhereWithAggregatesInput = {
    AND?: categoriesOnProductsScalarWhereWithAggregatesInput | categoriesOnProductsScalarWhereWithAggregatesInput[]
    OR?: categoriesOnProductsScalarWhereWithAggregatesInput[]
    NOT?: categoriesOnProductsScalarWhereWithAggregatesInput | categoriesOnProductsScalarWhereWithAggregatesInput[]
    productId?: IntWithAggregatesFilter<"categoriesOnProducts"> | number
    categoryId?: IntWithAggregatesFilter<"categoriesOnProducts"> | number
  }

  export type productCartsWhereInput = {
    AND?: productCartsWhereInput | productCartsWhereInput[]
    OR?: productCartsWhereInput[]
    NOT?: productCartsWhereInput | productCartsWhereInput[]
    id?: IntFilter<"productCarts"> | number
    productId?: IntFilter<"productCarts"> | number
    userId?: IntFilter<"productCarts"> | number
    quantity?: IntFilter<"productCarts"> | number
    product?: XOR<ProductsRelationFilter, productsWhereInput>
    user?: XOR<Users_metaRelationFilter, users_metaWhereInput>
  }

  export type productCartsOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
    quantity?: SortOrder
    product?: productsOrderByWithRelationInput
    user?: users_metaOrderByWithRelationInput
  }

  export type productCartsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: productCartsWhereInput | productCartsWhereInput[]
    OR?: productCartsWhereInput[]
    NOT?: productCartsWhereInput | productCartsWhereInput[]
    productId?: IntFilter<"productCarts"> | number
    userId?: IntFilter<"productCarts"> | number
    quantity?: IntFilter<"productCarts"> | number
    product?: XOR<ProductsRelationFilter, productsWhereInput>
    user?: XOR<Users_metaRelationFilter, users_metaWhereInput>
  }, "id">

  export type productCartsOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
    quantity?: SortOrder
    _count?: productCartsCountOrderByAggregateInput
    _avg?: productCartsAvgOrderByAggregateInput
    _max?: productCartsMaxOrderByAggregateInput
    _min?: productCartsMinOrderByAggregateInput
    _sum?: productCartsSumOrderByAggregateInput
  }

  export type productCartsScalarWhereWithAggregatesInput = {
    AND?: productCartsScalarWhereWithAggregatesInput | productCartsScalarWhereWithAggregatesInput[]
    OR?: productCartsScalarWhereWithAggregatesInput[]
    NOT?: productCartsScalarWhereWithAggregatesInput | productCartsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"productCarts"> | number
    productId?: IntWithAggregatesFilter<"productCarts"> | number
    userId?: IntWithAggregatesFilter<"productCarts"> | number
    quantity?: IntWithAggregatesFilter<"productCarts"> | number
  }

  export type productReviewsWhereInput = {
    AND?: productReviewsWhereInput | productReviewsWhereInput[]
    OR?: productReviewsWhereInput[]
    NOT?: productReviewsWhereInput | productReviewsWhereInput[]
    id?: IntFilter<"productReviews"> | number
    rating?: IntFilter<"productReviews"> | number
    comment?: StringNullableFilter<"productReviews"> | string | null
    status?: EnumProductReviewStatusFilter<"productReviews"> | $Enums.ProductReviewStatus
    userId?: IntFilter<"productReviews"> | number
    productId?: IntFilter<"productReviews"> | number
    createdAt?: DateTimeFilter<"productReviews"> | Date | string
    updatedAt?: DateTimeFilter<"productReviews"> | Date | string
    user?: XOR<Users_metaRelationFilter, users_metaWhereInput>
    product?: XOR<ProductsRelationFilter, productsWhereInput>
  }

  export type productReviewsOrderByWithRelationInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    status?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: users_metaOrderByWithRelationInput
    product?: productsOrderByWithRelationInput
  }

  export type productReviewsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: productReviewsWhereInput | productReviewsWhereInput[]
    OR?: productReviewsWhereInput[]
    NOT?: productReviewsWhereInput | productReviewsWhereInput[]
    rating?: IntFilter<"productReviews"> | number
    comment?: StringNullableFilter<"productReviews"> | string | null
    status?: EnumProductReviewStatusFilter<"productReviews"> | $Enums.ProductReviewStatus
    userId?: IntFilter<"productReviews"> | number
    productId?: IntFilter<"productReviews"> | number
    createdAt?: DateTimeFilter<"productReviews"> | Date | string
    updatedAt?: DateTimeFilter<"productReviews"> | Date | string
    user?: XOR<Users_metaRelationFilter, users_metaWhereInput>
    product?: XOR<ProductsRelationFilter, productsWhereInput>
  }, "id">

  export type productReviewsOrderByWithAggregationInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    status?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: productReviewsCountOrderByAggregateInput
    _avg?: productReviewsAvgOrderByAggregateInput
    _max?: productReviewsMaxOrderByAggregateInput
    _min?: productReviewsMinOrderByAggregateInput
    _sum?: productReviewsSumOrderByAggregateInput
  }

  export type productReviewsScalarWhereWithAggregatesInput = {
    AND?: productReviewsScalarWhereWithAggregatesInput | productReviewsScalarWhereWithAggregatesInput[]
    OR?: productReviewsScalarWhereWithAggregatesInput[]
    NOT?: productReviewsScalarWhereWithAggregatesInput | productReviewsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"productReviews"> | number
    rating?: IntWithAggregatesFilter<"productReviews"> | number
    comment?: StringNullableWithAggregatesFilter<"productReviews"> | string | null
    status?: EnumProductReviewStatusWithAggregatesFilter<"productReviews"> | $Enums.ProductReviewStatus
    userId?: IntWithAggregatesFilter<"productReviews"> | number
    productId?: IntWithAggregatesFilter<"productReviews"> | number
    createdAt?: DateTimeWithAggregatesFilter<"productReviews"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"productReviews"> | Date | string
  }

  export type mediaWhereInput = {
    AND?: mediaWhereInput | mediaWhereInput[]
    OR?: mediaWhereInput[]
    NOT?: mediaWhereInput | mediaWhereInput[]
    id?: IntFilter<"media"> | number
    url?: StringFilter<"media"> | string
    userId?: IntFilter<"media"> | number
    createdAt?: DateTimeFilter<"media"> | Date | string
    updatedAt?: DateTimeFilter<"media"> | Date | string
    user?: XOR<Users_metaRelationFilter, users_metaWhereInput>
    productCategories?: ProductCategoriesListRelationFilter
    product?: ProductsListRelationFilter
    galleries?: ProductGalleriesListRelationFilter
  }

  export type mediaOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: users_metaOrderByWithRelationInput
    productCategories?: productCategoriesOrderByRelationAggregateInput
    product?: productsOrderByRelationAggregateInput
    galleries?: productGalleriesOrderByRelationAggregateInput
  }

  export type mediaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: mediaWhereInput | mediaWhereInput[]
    OR?: mediaWhereInput[]
    NOT?: mediaWhereInput | mediaWhereInput[]
    url?: StringFilter<"media"> | string
    userId?: IntFilter<"media"> | number
    createdAt?: DateTimeFilter<"media"> | Date | string
    updatedAt?: DateTimeFilter<"media"> | Date | string
    user?: XOR<Users_metaRelationFilter, users_metaWhereInput>
    productCategories?: ProductCategoriesListRelationFilter
    product?: ProductsListRelationFilter
    galleries?: ProductGalleriesListRelationFilter
  }, "id">

  export type mediaOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: mediaCountOrderByAggregateInput
    _avg?: mediaAvgOrderByAggregateInput
    _max?: mediaMaxOrderByAggregateInput
    _min?: mediaMinOrderByAggregateInput
    _sum?: mediaSumOrderByAggregateInput
  }

  export type mediaScalarWhereWithAggregatesInput = {
    AND?: mediaScalarWhereWithAggregatesInput | mediaScalarWhereWithAggregatesInput[]
    OR?: mediaScalarWhereWithAggregatesInput[]
    NOT?: mediaScalarWhereWithAggregatesInput | mediaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"media"> | number
    url?: StringWithAggregatesFilter<"media"> | string
    userId?: IntWithAggregatesFilter<"media"> | number
    createdAt?: DateTimeWithAggregatesFilter<"media"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"media"> | Date | string
  }

  export type ordersWhereInput = {
    AND?: ordersWhereInput | ordersWhereInput[]
    OR?: ordersWhereInput[]
    NOT?: ordersWhereInput | ordersWhereInput[]
    id?: IntFilter<"orders"> | number
    order_status?: EnumOrderStatusFilter<"orders"> | $Enums.OrderStatus
    payment_method?: StringFilter<"orders"> | string
    payment_status?: EnumPaymentStatusFilter<"orders"> | $Enums.PaymentStatus
    sub_total?: FloatFilter<"orders"> | number
    tax_rate?: FloatFilter<"orders"> | number
    tax_total?: FloatFilter<"orders"> | number
    discount?: FloatFilter<"orders"> | number
    order_total?: FloatFilter<"orders"> | number
    userId?: IntFilter<"orders"> | number
    billing_address_id?: IntFilter<"orders"> | number
    shipping_address_id?: IntFilter<"orders"> | number
    createdAt?: DateTimeFilter<"orders"> | Date | string
    updatedAt?: DateTimeFilter<"orders"> | Date | string
    user?: XOR<Users_metaRelationFilter, users_metaWhereInput>
    billing_address?: XOR<AddressesRelationFilter, addressesWhereInput>
    shipping_address?: XOR<AddressesRelationFilter, addressesWhereInput>
    items?: OrderItemsListRelationFilter
  }

  export type ordersOrderByWithRelationInput = {
    id?: SortOrder
    order_status?: SortOrder
    payment_method?: SortOrder
    payment_status?: SortOrder
    sub_total?: SortOrder
    tax_rate?: SortOrder
    tax_total?: SortOrder
    discount?: SortOrder
    order_total?: SortOrder
    userId?: SortOrder
    billing_address_id?: SortOrder
    shipping_address_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: users_metaOrderByWithRelationInput
    billing_address?: addressesOrderByWithRelationInput
    shipping_address?: addressesOrderByWithRelationInput
    items?: orderItemsOrderByRelationAggregateInput
  }

  export type ordersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ordersWhereInput | ordersWhereInput[]
    OR?: ordersWhereInput[]
    NOT?: ordersWhereInput | ordersWhereInput[]
    order_status?: EnumOrderStatusFilter<"orders"> | $Enums.OrderStatus
    payment_method?: StringFilter<"orders"> | string
    payment_status?: EnumPaymentStatusFilter<"orders"> | $Enums.PaymentStatus
    sub_total?: FloatFilter<"orders"> | number
    tax_rate?: FloatFilter<"orders"> | number
    tax_total?: FloatFilter<"orders"> | number
    discount?: FloatFilter<"orders"> | number
    order_total?: FloatFilter<"orders"> | number
    userId?: IntFilter<"orders"> | number
    billing_address_id?: IntFilter<"orders"> | number
    shipping_address_id?: IntFilter<"orders"> | number
    createdAt?: DateTimeFilter<"orders"> | Date | string
    updatedAt?: DateTimeFilter<"orders"> | Date | string
    user?: XOR<Users_metaRelationFilter, users_metaWhereInput>
    billing_address?: XOR<AddressesRelationFilter, addressesWhereInput>
    shipping_address?: XOR<AddressesRelationFilter, addressesWhereInput>
    items?: OrderItemsListRelationFilter
  }, "id">

  export type ordersOrderByWithAggregationInput = {
    id?: SortOrder
    order_status?: SortOrder
    payment_method?: SortOrder
    payment_status?: SortOrder
    sub_total?: SortOrder
    tax_rate?: SortOrder
    tax_total?: SortOrder
    discount?: SortOrder
    order_total?: SortOrder
    userId?: SortOrder
    billing_address_id?: SortOrder
    shipping_address_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ordersCountOrderByAggregateInput
    _avg?: ordersAvgOrderByAggregateInput
    _max?: ordersMaxOrderByAggregateInput
    _min?: ordersMinOrderByAggregateInput
    _sum?: ordersSumOrderByAggregateInput
  }

  export type ordersScalarWhereWithAggregatesInput = {
    AND?: ordersScalarWhereWithAggregatesInput | ordersScalarWhereWithAggregatesInput[]
    OR?: ordersScalarWhereWithAggregatesInput[]
    NOT?: ordersScalarWhereWithAggregatesInput | ordersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"orders"> | number
    order_status?: EnumOrderStatusWithAggregatesFilter<"orders"> | $Enums.OrderStatus
    payment_method?: StringWithAggregatesFilter<"orders"> | string
    payment_status?: EnumPaymentStatusWithAggregatesFilter<"orders"> | $Enums.PaymentStatus
    sub_total?: FloatWithAggregatesFilter<"orders"> | number
    tax_rate?: FloatWithAggregatesFilter<"orders"> | number
    tax_total?: FloatWithAggregatesFilter<"orders"> | number
    discount?: FloatWithAggregatesFilter<"orders"> | number
    order_total?: FloatWithAggregatesFilter<"orders"> | number
    userId?: IntWithAggregatesFilter<"orders"> | number
    billing_address_id?: IntWithAggregatesFilter<"orders"> | number
    shipping_address_id?: IntWithAggregatesFilter<"orders"> | number
    createdAt?: DateTimeWithAggregatesFilter<"orders"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"orders"> | Date | string
  }

  export type orderItemsWhereInput = {
    AND?: orderItemsWhereInput | orderItemsWhereInput[]
    OR?: orderItemsWhereInput[]
    NOT?: orderItemsWhereInput | orderItemsWhereInput[]
    id?: IntFilter<"orderItems"> | number
    quantity?: IntFilter<"orderItems"> | number
    price?: FloatFilter<"orderItems"> | number
    productId?: IntFilter<"orderItems"> | number
    orderId?: IntFilter<"orderItems"> | number
    createdAt?: DateTimeFilter<"orderItems"> | Date | string
    updatedAt?: DateTimeFilter<"orderItems"> | Date | string
    product?: XOR<ProductsRelationFilter, productsWhereInput>
    order?: XOR<OrdersRelationFilter, ordersWhereInput>
  }

  export type orderItemsOrderByWithRelationInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    productId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    product?: productsOrderByWithRelationInput
    order?: ordersOrderByWithRelationInput
  }

  export type orderItemsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: orderItemsWhereInput | orderItemsWhereInput[]
    OR?: orderItemsWhereInput[]
    NOT?: orderItemsWhereInput | orderItemsWhereInput[]
    quantity?: IntFilter<"orderItems"> | number
    price?: FloatFilter<"orderItems"> | number
    productId?: IntFilter<"orderItems"> | number
    orderId?: IntFilter<"orderItems"> | number
    createdAt?: DateTimeFilter<"orderItems"> | Date | string
    updatedAt?: DateTimeFilter<"orderItems"> | Date | string
    product?: XOR<ProductsRelationFilter, productsWhereInput>
    order?: XOR<OrdersRelationFilter, ordersWhereInput>
  }, "id">

  export type orderItemsOrderByWithAggregationInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    productId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: orderItemsCountOrderByAggregateInput
    _avg?: orderItemsAvgOrderByAggregateInput
    _max?: orderItemsMaxOrderByAggregateInput
    _min?: orderItemsMinOrderByAggregateInput
    _sum?: orderItemsSumOrderByAggregateInput
  }

  export type orderItemsScalarWhereWithAggregatesInput = {
    AND?: orderItemsScalarWhereWithAggregatesInput | orderItemsScalarWhereWithAggregatesInput[]
    OR?: orderItemsScalarWhereWithAggregatesInput[]
    NOT?: orderItemsScalarWhereWithAggregatesInput | orderItemsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"orderItems"> | number
    quantity?: IntWithAggregatesFilter<"orderItems"> | number
    price?: FloatWithAggregatesFilter<"orderItems"> | number
    productId?: IntWithAggregatesFilter<"orderItems"> | number
    orderId?: IntWithAggregatesFilter<"orderItems"> | number
    createdAt?: DateTimeWithAggregatesFilter<"orderItems"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"orderItems"> | Date | string
  }

  export type wishlistsWhereInput = {
    AND?: wishlistsWhereInput | wishlistsWhereInput[]
    OR?: wishlistsWhereInput[]
    NOT?: wishlistsWhereInput | wishlistsWhereInput[]
    id?: IntFilter<"wishlists"> | number
    userId?: IntFilter<"wishlists"> | number
    productId?: IntFilter<"wishlists"> | number
    createdAt?: DateTimeFilter<"wishlists"> | Date | string
    updatedAt?: DateTimeFilter<"wishlists"> | Date | string
    user?: XOR<Users_metaRelationFilter, users_metaWhereInput>
    product?: XOR<ProductsRelationFilter, productsWhereInput>
  }

  export type wishlistsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: users_metaOrderByWithRelationInput
    product?: productsOrderByWithRelationInput
  }

  export type wishlistsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: wishlistsWhereInput | wishlistsWhereInput[]
    OR?: wishlistsWhereInput[]
    NOT?: wishlistsWhereInput | wishlistsWhereInput[]
    userId?: IntFilter<"wishlists"> | number
    productId?: IntFilter<"wishlists"> | number
    createdAt?: DateTimeFilter<"wishlists"> | Date | string
    updatedAt?: DateTimeFilter<"wishlists"> | Date | string
    user?: XOR<Users_metaRelationFilter, users_metaWhereInput>
    product?: XOR<ProductsRelationFilter, productsWhereInput>
  }, "id">

  export type wishlistsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: wishlistsCountOrderByAggregateInput
    _avg?: wishlistsAvgOrderByAggregateInput
    _max?: wishlistsMaxOrderByAggregateInput
    _min?: wishlistsMinOrderByAggregateInput
    _sum?: wishlistsSumOrderByAggregateInput
  }

  export type wishlistsScalarWhereWithAggregatesInput = {
    AND?: wishlistsScalarWhereWithAggregatesInput | wishlistsScalarWhereWithAggregatesInput[]
    OR?: wishlistsScalarWhereWithAggregatesInput[]
    NOT?: wishlistsScalarWhereWithAggregatesInput | wishlistsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"wishlists"> | number
    userId?: IntWithAggregatesFilter<"wishlists"> | number
    productId?: IntWithAggregatesFilter<"wishlists"> | number
    createdAt?: DateTimeWithAggregatesFilter<"wishlists"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"wishlists"> | Date | string
  }

  export type usersCreateInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meta?: users_metaCreateNestedOneWithoutUserInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meta?: users_metaUncheckedCreateNestedOneWithoutUserInput
  }

  export type usersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meta?: users_metaUpdateOneWithoutUserNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meta?: users_metaUncheckedUpdateOneWithoutUserNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type users_metaCreateInput = {
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: usersCreateNestedOneWithoutMetaInput
    products?: productsCreateNestedManyWithoutAuthorInput
    carts?: productCartsCreateNestedManyWithoutUserInput
    media?: mediaCreateNestedManyWithoutUserInput
    addresses?: addressesCreateNestedManyWithoutUserInput
    orders?: ordersCreateNestedManyWithoutUserInput
    wishlists?: wishlistsCreateNestedManyWithoutUserInput
    product_reviews?: productReviewsCreateNestedManyWithoutUserInput
  }

  export type users_metaUncheckedCreateInput = {
    id?: number
    userId: number
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: productsUncheckedCreateNestedManyWithoutAuthorInput
    carts?: productCartsUncheckedCreateNestedManyWithoutUserInput
    media?: mediaUncheckedCreateNestedManyWithoutUserInput
    addresses?: addressesUncheckedCreateNestedManyWithoutUserInput
    orders?: ordersUncheckedCreateNestedManyWithoutUserInput
    wishlists?: wishlistsUncheckedCreateNestedManyWithoutUserInput
    product_reviews?: productReviewsUncheckedCreateNestedManyWithoutUserInput
  }

  export type users_metaUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: usersUpdateOneRequiredWithoutMetaNestedInput
    products?: productsUpdateManyWithoutAuthorNestedInput
    carts?: productCartsUpdateManyWithoutUserNestedInput
    media?: mediaUpdateManyWithoutUserNestedInput
    addresses?: addressesUpdateManyWithoutUserNestedInput
    orders?: ordersUpdateManyWithoutUserNestedInput
    wishlists?: wishlistsUpdateManyWithoutUserNestedInput
    product_reviews?: productReviewsUpdateManyWithoutUserNestedInput
  }

  export type users_metaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productsUncheckedUpdateManyWithoutAuthorNestedInput
    carts?: productCartsUncheckedUpdateManyWithoutUserNestedInput
    media?: mediaUncheckedUpdateManyWithoutUserNestedInput
    addresses?: addressesUncheckedUpdateManyWithoutUserNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUserNestedInput
    wishlists?: wishlistsUncheckedUpdateManyWithoutUserNestedInput
    product_reviews?: productReviewsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type users_metaCreateManyInput = {
    id?: number
    userId: number
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type users_metaUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type users_metaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type addressesCreateInput = {
    type?: $Enums.AddressType
    full_name: string
    email: string
    phone: string
    street_address: string
    street_address_2?: string | null
    district: string
    country: string
    zip_code: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: users_metaCreateNestedOneWithoutAddressesInput
    billing_orders?: ordersCreateNestedManyWithoutBilling_addressInput
    shipping_orders?: ordersCreateNestedManyWithoutShipping_addressInput
  }

  export type addressesUncheckedCreateInput = {
    id?: number
    type?: $Enums.AddressType
    full_name: string
    email: string
    phone: string
    street_address: string
    street_address_2?: string | null
    district: string
    country: string
    zip_code: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    billing_orders?: ordersUncheckedCreateNestedManyWithoutBilling_addressInput
    shipping_orders?: ordersUncheckedCreateNestedManyWithoutShipping_addressInput
  }

  export type addressesUpdateInput = {
    type?: EnumAddressTypeFieldUpdateOperationsInput | $Enums.AddressType
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    street_address_2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: users_metaUpdateOneRequiredWithoutAddressesNestedInput
    billing_orders?: ordersUpdateManyWithoutBilling_addressNestedInput
    shipping_orders?: ordersUpdateManyWithoutShipping_addressNestedInput
  }

  export type addressesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumAddressTypeFieldUpdateOperationsInput | $Enums.AddressType
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    street_address_2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billing_orders?: ordersUncheckedUpdateManyWithoutBilling_addressNestedInput
    shipping_orders?: ordersUncheckedUpdateManyWithoutShipping_addressNestedInput
  }

  export type addressesCreateManyInput = {
    id?: number
    type?: $Enums.AddressType
    full_name: string
    email: string
    phone: string
    street_address: string
    street_address_2?: string | null
    district: string
    country: string
    zip_code: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type addressesUpdateManyMutationInput = {
    type?: EnumAddressTypeFieldUpdateOperationsInput | $Enums.AddressType
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    street_address_2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type addressesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumAddressTypeFieldUpdateOperationsInput | $Enums.AddressType
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    street_address_2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productsCreateInput = {
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    author: users_metaCreateNestedOneWithoutProductsInput
    thumbnail?: mediaCreateNestedOneWithoutProductInput
    categories?: categoriesOnProductsCreateNestedManyWithoutProductInput
    carts?: productCartsCreateNestedManyWithoutProductInput
    galleries?: productGalleriesCreateNestedManyWithoutProductInput
    order_items?: orderItemsCreateNestedManyWithoutProductInput
    wishlists?: wishlistsCreateNestedManyWithoutProductInput
    reviews?: productReviewsCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateInput = {
    id?: number
    authorId: number
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    thumbnailId?: number | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: categoriesOnProductsUncheckedCreateNestedManyWithoutProductInput
    carts?: productCartsUncheckedCreateNestedManyWithoutProductInput
    galleries?: productGalleriesUncheckedCreateNestedManyWithoutProductInput
    order_items?: orderItemsUncheckedCreateNestedManyWithoutProductInput
    wishlists?: wishlistsUncheckedCreateNestedManyWithoutProductInput
    reviews?: productReviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: users_metaUpdateOneRequiredWithoutProductsNestedInput
    thumbnail?: mediaUpdateOneWithoutProductNestedInput
    categories?: categoriesOnProductsUpdateManyWithoutProductNestedInput
    carts?: productCartsUpdateManyWithoutProductNestedInput
    galleries?: productGalleriesUpdateManyWithoutProductNestedInput
    order_items?: orderItemsUpdateManyWithoutProductNestedInput
    wishlists?: wishlistsUpdateManyWithoutProductNestedInput
    reviews?: productReviewsUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailId?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: categoriesOnProductsUncheckedUpdateManyWithoutProductNestedInput
    carts?: productCartsUncheckedUpdateManyWithoutProductNestedInput
    galleries?: productGalleriesUncheckedUpdateManyWithoutProductNestedInput
    order_items?: orderItemsUncheckedUpdateManyWithoutProductNestedInput
    wishlists?: wishlistsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: productReviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsCreateManyInput = {
    id?: number
    authorId: number
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    thumbnailId?: number | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type productsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailId?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productGalleriesCreateInput = {
    product: productsCreateNestedOneWithoutGalleriesInput
    media: mediaCreateNestedOneWithoutGalleriesInput
  }

  export type productGalleriesUncheckedCreateInput = {
    productId: number
    mediaId: number
  }

  export type productGalleriesUpdateInput = {
    product?: productsUpdateOneRequiredWithoutGalleriesNestedInput
    media?: mediaUpdateOneRequiredWithoutGalleriesNestedInput
  }

  export type productGalleriesUncheckedUpdateInput = {
    productId?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type productGalleriesCreateManyInput = {
    productId: number
    mediaId: number
  }

  export type productGalleriesUpdateManyMutationInput = {

  }

  export type productGalleriesUncheckedUpdateManyInput = {
    productId?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type productCategoriesCreateInput = {
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photo?: mediaCreateNestedOneWithoutProductCategoriesInput
    products?: categoriesOnProductsCreateNestedManyWithoutCategoryInput
  }

  export type productCategoriesUncheckedCreateInput = {
    id?: number
    name: string
    slug: string
    photoId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: categoriesOnProductsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type productCategoriesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photo?: mediaUpdateOneWithoutProductCategoriesNestedInput
    products?: categoriesOnProductsUpdateManyWithoutCategoryNestedInput
  }

  export type productCategoriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    photoId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: categoriesOnProductsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type productCategoriesCreateManyInput = {
    id?: number
    name: string
    slug: string
    photoId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type productCategoriesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productCategoriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    photoId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoriesOnProductsCreateInput = {
    product: productsCreateNestedOneWithoutCategoriesInput
    category: productCategoriesCreateNestedOneWithoutProductsInput
  }

  export type categoriesOnProductsUncheckedCreateInput = {
    productId: number
    categoryId: number
  }

  export type categoriesOnProductsUpdateInput = {
    product?: productsUpdateOneRequiredWithoutCategoriesNestedInput
    category?: productCategoriesUpdateOneRequiredWithoutProductsNestedInput
  }

  export type categoriesOnProductsUncheckedUpdateInput = {
    productId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type categoriesOnProductsCreateManyInput = {
    productId: number
    categoryId: number
  }

  export type categoriesOnProductsUpdateManyMutationInput = {

  }

  export type categoriesOnProductsUncheckedUpdateManyInput = {
    productId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type productCartsCreateInput = {
    quantity: number
    product: productsCreateNestedOneWithoutCartsInput
    user: users_metaCreateNestedOneWithoutCartsInput
  }

  export type productCartsUncheckedCreateInput = {
    id?: number
    productId: number
    userId: number
    quantity: number
  }

  export type productCartsUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    product?: productsUpdateOneRequiredWithoutCartsNestedInput
    user?: users_metaUpdateOneRequiredWithoutCartsNestedInput
  }

  export type productCartsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type productCartsCreateManyInput = {
    id?: number
    productId: number
    userId: number
    quantity: number
  }

  export type productCartsUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type productCartsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type productReviewsCreateInput = {
    rating: number
    comment?: string | null
    status?: $Enums.ProductReviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: users_metaCreateNestedOneWithoutProduct_reviewsInput
    product: productsCreateNestedOneWithoutReviewsInput
  }

  export type productReviewsUncheckedCreateInput = {
    id?: number
    rating: number
    comment?: string | null
    status?: $Enums.ProductReviewStatus
    userId: number
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type productReviewsUpdateInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProductReviewStatusFieldUpdateOperationsInput | $Enums.ProductReviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: users_metaUpdateOneRequiredWithoutProduct_reviewsNestedInput
    product?: productsUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type productReviewsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProductReviewStatusFieldUpdateOperationsInput | $Enums.ProductReviewStatus
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productReviewsCreateManyInput = {
    id?: number
    rating: number
    comment?: string | null
    status?: $Enums.ProductReviewStatus
    userId: number
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type productReviewsUpdateManyMutationInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProductReviewStatusFieldUpdateOperationsInput | $Enums.ProductReviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productReviewsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProductReviewStatusFieldUpdateOperationsInput | $Enums.ProductReviewStatus
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type mediaCreateInput = {
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: users_metaCreateNestedOneWithoutMediaInput
    productCategories?: productCategoriesCreateNestedManyWithoutPhotoInput
    product?: productsCreateNestedManyWithoutThumbnailInput
    galleries?: productGalleriesCreateNestedManyWithoutMediaInput
  }

  export type mediaUncheckedCreateInput = {
    id?: number
    url: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    productCategories?: productCategoriesUncheckedCreateNestedManyWithoutPhotoInput
    product?: productsUncheckedCreateNestedManyWithoutThumbnailInput
    galleries?: productGalleriesUncheckedCreateNestedManyWithoutMediaInput
  }

  export type mediaUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: users_metaUpdateOneRequiredWithoutMediaNestedInput
    productCategories?: productCategoriesUpdateManyWithoutPhotoNestedInput
    product?: productsUpdateManyWithoutThumbnailNestedInput
    galleries?: productGalleriesUpdateManyWithoutMediaNestedInput
  }

  export type mediaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productCategories?: productCategoriesUncheckedUpdateManyWithoutPhotoNestedInput
    product?: productsUncheckedUpdateManyWithoutThumbnailNestedInput
    galleries?: productGalleriesUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type mediaCreateManyInput = {
    id?: number
    url: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type mediaUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type mediaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ordersCreateInput = {
    order_status?: $Enums.OrderStatus
    payment_method: string
    payment_status?: $Enums.PaymentStatus
    sub_total: number
    tax_rate: number
    tax_total: number
    discount: number
    order_total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: users_metaCreateNestedOneWithoutOrdersInput
    billing_address: addressesCreateNestedOneWithoutBilling_ordersInput
    shipping_address: addressesCreateNestedOneWithoutShipping_ordersInput
    items?: orderItemsCreateNestedManyWithoutOrderInput
  }

  export type ordersUncheckedCreateInput = {
    id?: number
    order_status?: $Enums.OrderStatus
    payment_method: string
    payment_status?: $Enums.PaymentStatus
    sub_total: number
    tax_rate: number
    tax_total: number
    discount: number
    order_total: number
    userId: number
    billing_address_id: number
    shipping_address_id: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: orderItemsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type ordersUpdateInput = {
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    payment_method?: StringFieldUpdateOperationsInput | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    sub_total?: FloatFieldUpdateOperationsInput | number
    tax_rate?: FloatFieldUpdateOperationsInput | number
    tax_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    order_total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: users_metaUpdateOneRequiredWithoutOrdersNestedInput
    billing_address?: addressesUpdateOneRequiredWithoutBilling_ordersNestedInput
    shipping_address?: addressesUpdateOneRequiredWithoutShipping_ordersNestedInput
    items?: orderItemsUpdateManyWithoutOrderNestedInput
  }

  export type ordersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    payment_method?: StringFieldUpdateOperationsInput | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    sub_total?: FloatFieldUpdateOperationsInput | number
    tax_rate?: FloatFieldUpdateOperationsInput | number
    tax_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    order_total?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    billing_address_id?: IntFieldUpdateOperationsInput | number
    shipping_address_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: orderItemsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type ordersCreateManyInput = {
    id?: number
    order_status?: $Enums.OrderStatus
    payment_method: string
    payment_status?: $Enums.PaymentStatus
    sub_total: number
    tax_rate: number
    tax_total: number
    discount: number
    order_total: number
    userId: number
    billing_address_id: number
    shipping_address_id: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ordersUpdateManyMutationInput = {
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    payment_method?: StringFieldUpdateOperationsInput | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    sub_total?: FloatFieldUpdateOperationsInput | number
    tax_rate?: FloatFieldUpdateOperationsInput | number
    tax_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    order_total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ordersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    payment_method?: StringFieldUpdateOperationsInput | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    sub_total?: FloatFieldUpdateOperationsInput | number
    tax_rate?: FloatFieldUpdateOperationsInput | number
    tax_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    order_total?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    billing_address_id?: IntFieldUpdateOperationsInput | number
    shipping_address_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderItemsCreateInput = {
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    product: productsCreateNestedOneWithoutOrder_itemsInput
    order: ordersCreateNestedOneWithoutItemsInput
  }

  export type orderItemsUncheckedCreateInput = {
    id?: number
    quantity: number
    price: number
    productId: number
    orderId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderItemsUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productsUpdateOneRequiredWithoutOrder_itemsNestedInput
    order?: ordersUpdateOneRequiredWithoutItemsNestedInput
  }

  export type orderItemsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderItemsCreateManyInput = {
    id?: number
    quantity: number
    price: number
    productId: number
    orderId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderItemsUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderItemsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wishlistsCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: users_metaCreateNestedOneWithoutWishlistsInput
    product: productsCreateNestedOneWithoutWishlistsInput
  }

  export type wishlistsUncheckedCreateInput = {
    id?: number
    userId: number
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type wishlistsUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: users_metaUpdateOneRequiredWithoutWishlistsNestedInput
    product?: productsUpdateOneRequiredWithoutWishlistsNestedInput
  }

  export type wishlistsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wishlistsCreateManyInput = {
    id?: number
    userId: number
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type wishlistsUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wishlistsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type Users_metaNullableRelationFilter = {
    is?: users_metaWhereInput | null
    isNot?: users_metaWhereInput | null
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type ProductsListRelationFilter = {
    every?: productsWhereInput
    some?: productsWhereInput
    none?: productsWhereInput
  }

  export type ProductCartsListRelationFilter = {
    every?: productCartsWhereInput
    some?: productCartsWhereInput
    none?: productCartsWhereInput
  }

  export type MediaListRelationFilter = {
    every?: mediaWhereInput
    some?: mediaWhereInput
    none?: mediaWhereInput
  }

  export type AddressesListRelationFilter = {
    every?: addressesWhereInput
    some?: addressesWhereInput
    none?: addressesWhereInput
  }

  export type OrdersListRelationFilter = {
    every?: ordersWhereInput
    some?: ordersWhereInput
    none?: ordersWhereInput
  }

  export type WishlistsListRelationFilter = {
    every?: wishlistsWhereInput
    some?: wishlistsWhereInput
    none?: wishlistsWhereInput
  }

  export type ProductReviewsListRelationFilter = {
    every?: productReviewsWhereInput
    some?: productReviewsWhereInput
    none?: productReviewsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type productsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productCartsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type mediaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type addressesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ordersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type wishlistsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productReviewsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type users_metaCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    photo?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    access_token?: SortOrder
    isVerified?: SortOrder
    isInTrash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type users_metaAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type users_metaMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    photo?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    access_token?: SortOrder
    isVerified?: SortOrder
    isInTrash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type users_metaMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    photo?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    access_token?: SortOrder
    isVerified?: SortOrder
    isInTrash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type users_metaSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumAddressTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AddressType | EnumAddressTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AddressType[]
    notIn?: $Enums.AddressType[]
    not?: NestedEnumAddressTypeFilter<$PrismaModel> | $Enums.AddressType
  }

  export type Users_metaRelationFilter = {
    is?: users_metaWhereInput
    isNot?: users_metaWhereInput
  }

  export type addressesCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    street_address?: SortOrder
    street_address_2?: SortOrder
    district?: SortOrder
    country?: SortOrder
    zip_code?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type addressesAvgOrderByAggregateInput = {
    id?: SortOrder
    zip_code?: SortOrder
    userId?: SortOrder
  }

  export type addressesMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    street_address?: SortOrder
    street_address_2?: SortOrder
    district?: SortOrder
    country?: SortOrder
    zip_code?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type addressesMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    street_address?: SortOrder
    street_address_2?: SortOrder
    district?: SortOrder
    country?: SortOrder
    zip_code?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type addressesSumOrderByAggregateInput = {
    id?: SortOrder
    zip_code?: SortOrder
    userId?: SortOrder
  }

  export type EnumAddressTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AddressType | EnumAddressTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AddressType[]
    notIn?: $Enums.AddressType[]
    not?: NestedEnumAddressTypeWithAggregatesFilter<$PrismaModel> | $Enums.AddressType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAddressTypeFilter<$PrismaModel>
    _max?: NestedEnumAddressTypeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumStockStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.StockStatus | EnumStockStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StockStatus[]
    notIn?: $Enums.StockStatus[]
    not?: NestedEnumStockStatusFilter<$PrismaModel> | $Enums.StockStatus
  }

  export type EnumProductStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductStatus | EnumProductStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProductStatus[]
    notIn?: $Enums.ProductStatus[]
    not?: NestedEnumProductStatusFilter<$PrismaModel> | $Enums.ProductStatus
  }

  export type MediaNullableRelationFilter = {
    is?: mediaWhereInput | null
    isNot?: mediaWhereInput | null
  }

  export type CategoriesOnProductsListRelationFilter = {
    every?: categoriesOnProductsWhereInput
    some?: categoriesOnProductsWhereInput
    none?: categoriesOnProductsWhereInput
  }

  export type ProductGalleriesListRelationFilter = {
    every?: productGalleriesWhereInput
    some?: productGalleriesWhereInput
    none?: productGalleriesWhereInput
  }

  export type OrderItemsListRelationFilter = {
    every?: orderItemsWhereInput
    some?: orderItemsWhereInput
    none?: orderItemsWhereInput
  }

  export type categoriesOnProductsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productGalleriesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type orderItemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productsCountOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    price?: SortOrder
    regular_price?: SortOrder
    sale_price?: SortOrder
    stock_quantity?: SortOrder
    stock_status?: SortOrder
    sku?: SortOrder
    description?: SortOrder
    short_description?: SortOrder
    thumbnailId?: SortOrder
    weight?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type productsAvgOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    price?: SortOrder
    regular_price?: SortOrder
    sale_price?: SortOrder
    stock_quantity?: SortOrder
    thumbnailId?: SortOrder
    weight?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type productsMaxOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    price?: SortOrder
    regular_price?: SortOrder
    sale_price?: SortOrder
    stock_quantity?: SortOrder
    stock_status?: SortOrder
    sku?: SortOrder
    description?: SortOrder
    short_description?: SortOrder
    thumbnailId?: SortOrder
    weight?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type productsMinOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    price?: SortOrder
    regular_price?: SortOrder
    sale_price?: SortOrder
    stock_quantity?: SortOrder
    stock_status?: SortOrder
    sku?: SortOrder
    description?: SortOrder
    short_description?: SortOrder
    thumbnailId?: SortOrder
    weight?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type productsSumOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    price?: SortOrder
    regular_price?: SortOrder
    sale_price?: SortOrder
    stock_quantity?: SortOrder
    thumbnailId?: SortOrder
    weight?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumStockStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StockStatus | EnumStockStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StockStatus[]
    notIn?: $Enums.StockStatus[]
    not?: NestedEnumStockStatusWithAggregatesFilter<$PrismaModel> | $Enums.StockStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStockStatusFilter<$PrismaModel>
    _max?: NestedEnumStockStatusFilter<$PrismaModel>
  }

  export type EnumProductStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductStatus | EnumProductStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProductStatus[]
    notIn?: $Enums.ProductStatus[]
    not?: NestedEnumProductStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProductStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductStatusFilter<$PrismaModel>
    _max?: NestedEnumProductStatusFilter<$PrismaModel>
  }

  export type ProductsRelationFilter = {
    is?: productsWhereInput
    isNot?: productsWhereInput
  }

  export type MediaRelationFilter = {
    is?: mediaWhereInput
    isNot?: mediaWhereInput
  }

  export type productGalleriesProductIdMediaIdCompoundUniqueInput = {
    productId: number
    mediaId: number
  }

  export type productGalleriesCountOrderByAggregateInput = {
    productId?: SortOrder
    mediaId?: SortOrder
  }

  export type productGalleriesAvgOrderByAggregateInput = {
    productId?: SortOrder
    mediaId?: SortOrder
  }

  export type productGalleriesMaxOrderByAggregateInput = {
    productId?: SortOrder
    mediaId?: SortOrder
  }

  export type productGalleriesMinOrderByAggregateInput = {
    productId?: SortOrder
    mediaId?: SortOrder
  }

  export type productGalleriesSumOrderByAggregateInput = {
    productId?: SortOrder
    mediaId?: SortOrder
  }

  export type productCategoriesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    photoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type productCategoriesAvgOrderByAggregateInput = {
    id?: SortOrder
    photoId?: SortOrder
  }

  export type productCategoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    photoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type productCategoriesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    photoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type productCategoriesSumOrderByAggregateInput = {
    id?: SortOrder
    photoId?: SortOrder
  }

  export type ProductCategoriesRelationFilter = {
    is?: productCategoriesWhereInput
    isNot?: productCategoriesWhereInput
  }

  export type categoriesOnProductsProductIdCategoryIdCompoundUniqueInput = {
    productId: number
    categoryId: number
  }

  export type categoriesOnProductsCountOrderByAggregateInput = {
    productId?: SortOrder
    categoryId?: SortOrder
  }

  export type categoriesOnProductsAvgOrderByAggregateInput = {
    productId?: SortOrder
    categoryId?: SortOrder
  }

  export type categoriesOnProductsMaxOrderByAggregateInput = {
    productId?: SortOrder
    categoryId?: SortOrder
  }

  export type categoriesOnProductsMinOrderByAggregateInput = {
    productId?: SortOrder
    categoryId?: SortOrder
  }

  export type categoriesOnProductsSumOrderByAggregateInput = {
    productId?: SortOrder
    categoryId?: SortOrder
  }

  export type productCartsCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
    quantity?: SortOrder
  }

  export type productCartsAvgOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
    quantity?: SortOrder
  }

  export type productCartsMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
    quantity?: SortOrder
  }

  export type productCartsMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
    quantity?: SortOrder
  }

  export type productCartsSumOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
    quantity?: SortOrder
  }

  export type EnumProductReviewStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductReviewStatus | EnumProductReviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProductReviewStatus[]
    notIn?: $Enums.ProductReviewStatus[]
    not?: NestedEnumProductReviewStatusFilter<$PrismaModel> | $Enums.ProductReviewStatus
  }

  export type productReviewsCountOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type productReviewsAvgOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type productReviewsMaxOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type productReviewsMinOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type productReviewsSumOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type EnumProductReviewStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductReviewStatus | EnumProductReviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProductReviewStatus[]
    notIn?: $Enums.ProductReviewStatus[]
    not?: NestedEnumProductReviewStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProductReviewStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductReviewStatusFilter<$PrismaModel>
    _max?: NestedEnumProductReviewStatusFilter<$PrismaModel>
  }

  export type ProductCategoriesListRelationFilter = {
    every?: productCategoriesWhereInput
    some?: productCategoriesWhereInput
    none?: productCategoriesWhereInput
  }

  export type productCategoriesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type mediaCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type mediaAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type mediaMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type mediaMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type mediaSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[]
    notIn?: $Enums.OrderStatus[]
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type AddressesRelationFilter = {
    is?: addressesWhereInput
    isNot?: addressesWhereInput
  }

  export type ordersCountOrderByAggregateInput = {
    id?: SortOrder
    order_status?: SortOrder
    payment_method?: SortOrder
    payment_status?: SortOrder
    sub_total?: SortOrder
    tax_rate?: SortOrder
    tax_total?: SortOrder
    discount?: SortOrder
    order_total?: SortOrder
    userId?: SortOrder
    billing_address_id?: SortOrder
    shipping_address_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ordersAvgOrderByAggregateInput = {
    id?: SortOrder
    sub_total?: SortOrder
    tax_rate?: SortOrder
    tax_total?: SortOrder
    discount?: SortOrder
    order_total?: SortOrder
    userId?: SortOrder
    billing_address_id?: SortOrder
    shipping_address_id?: SortOrder
  }

  export type ordersMaxOrderByAggregateInput = {
    id?: SortOrder
    order_status?: SortOrder
    payment_method?: SortOrder
    payment_status?: SortOrder
    sub_total?: SortOrder
    tax_rate?: SortOrder
    tax_total?: SortOrder
    discount?: SortOrder
    order_total?: SortOrder
    userId?: SortOrder
    billing_address_id?: SortOrder
    shipping_address_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ordersMinOrderByAggregateInput = {
    id?: SortOrder
    order_status?: SortOrder
    payment_method?: SortOrder
    payment_status?: SortOrder
    sub_total?: SortOrder
    tax_rate?: SortOrder
    tax_total?: SortOrder
    discount?: SortOrder
    order_total?: SortOrder
    userId?: SortOrder
    billing_address_id?: SortOrder
    shipping_address_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ordersSumOrderByAggregateInput = {
    id?: SortOrder
    sub_total?: SortOrder
    tax_rate?: SortOrder
    tax_total?: SortOrder
    discount?: SortOrder
    order_total?: SortOrder
    userId?: SortOrder
    billing_address_id?: SortOrder
    shipping_address_id?: SortOrder
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[]
    notIn?: $Enums.OrderStatus[]
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type OrdersRelationFilter = {
    is?: ordersWhereInput
    isNot?: ordersWhereInput
  }

  export type orderItemsCountOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    productId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type orderItemsAvgOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    productId?: SortOrder
    orderId?: SortOrder
  }

  export type orderItemsMaxOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    productId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type orderItemsMinOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    productId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type orderItemsSumOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    productId?: SortOrder
    orderId?: SortOrder
  }

  export type wishlistsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type wishlistsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type wishlistsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type wishlistsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type wishlistsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type users_metaCreateNestedOneWithoutUserInput = {
    create?: XOR<users_metaCreateWithoutUserInput, users_metaUncheckedCreateWithoutUserInput>
    connectOrCreate?: users_metaCreateOrConnectWithoutUserInput
    connect?: users_metaWhereUniqueInput
  }

  export type users_metaUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<users_metaCreateWithoutUserInput, users_metaUncheckedCreateWithoutUserInput>
    connectOrCreate?: users_metaCreateOrConnectWithoutUserInput
    connect?: users_metaWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type users_metaUpdateOneWithoutUserNestedInput = {
    create?: XOR<users_metaCreateWithoutUserInput, users_metaUncheckedCreateWithoutUserInput>
    connectOrCreate?: users_metaCreateOrConnectWithoutUserInput
    upsert?: users_metaUpsertWithoutUserInput
    disconnect?: users_metaWhereInput | boolean
    delete?: users_metaWhereInput | boolean
    connect?: users_metaWhereUniqueInput
    update?: XOR<XOR<users_metaUpdateToOneWithWhereWithoutUserInput, users_metaUpdateWithoutUserInput>, users_metaUncheckedUpdateWithoutUserInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type users_metaUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<users_metaCreateWithoutUserInput, users_metaUncheckedCreateWithoutUserInput>
    connectOrCreate?: users_metaCreateOrConnectWithoutUserInput
    upsert?: users_metaUpsertWithoutUserInput
    disconnect?: users_metaWhereInput | boolean
    delete?: users_metaWhereInput | boolean
    connect?: users_metaWhereUniqueInput
    update?: XOR<XOR<users_metaUpdateToOneWithWhereWithoutUserInput, users_metaUpdateWithoutUserInput>, users_metaUncheckedUpdateWithoutUserInput>
  }

  export type usersCreateNestedOneWithoutMetaInput = {
    create?: XOR<usersCreateWithoutMetaInput, usersUncheckedCreateWithoutMetaInput>
    connectOrCreate?: usersCreateOrConnectWithoutMetaInput
    connect?: usersWhereUniqueInput
  }

  export type productsCreateNestedManyWithoutAuthorInput = {
    create?: XOR<productsCreateWithoutAuthorInput, productsUncheckedCreateWithoutAuthorInput> | productsCreateWithoutAuthorInput[] | productsUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: productsCreateOrConnectWithoutAuthorInput | productsCreateOrConnectWithoutAuthorInput[]
    createMany?: productsCreateManyAuthorInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productCartsCreateNestedManyWithoutUserInput = {
    create?: XOR<productCartsCreateWithoutUserInput, productCartsUncheckedCreateWithoutUserInput> | productCartsCreateWithoutUserInput[] | productCartsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productCartsCreateOrConnectWithoutUserInput | productCartsCreateOrConnectWithoutUserInput[]
    createMany?: productCartsCreateManyUserInputEnvelope
    connect?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
  }

  export type mediaCreateNestedManyWithoutUserInput = {
    create?: XOR<mediaCreateWithoutUserInput, mediaUncheckedCreateWithoutUserInput> | mediaCreateWithoutUserInput[] | mediaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: mediaCreateOrConnectWithoutUserInput | mediaCreateOrConnectWithoutUserInput[]
    createMany?: mediaCreateManyUserInputEnvelope
    connect?: mediaWhereUniqueInput | mediaWhereUniqueInput[]
  }

  export type addressesCreateNestedManyWithoutUserInput = {
    create?: XOR<addressesCreateWithoutUserInput, addressesUncheckedCreateWithoutUserInput> | addressesCreateWithoutUserInput[] | addressesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: addressesCreateOrConnectWithoutUserInput | addressesCreateOrConnectWithoutUserInput[]
    createMany?: addressesCreateManyUserInputEnvelope
    connect?: addressesWhereUniqueInput | addressesWhereUniqueInput[]
  }

  export type ordersCreateNestedManyWithoutUserInput = {
    create?: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput> | ordersCreateWithoutUserInput[] | ordersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUserInput | ordersCreateOrConnectWithoutUserInput[]
    createMany?: ordersCreateManyUserInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type wishlistsCreateNestedManyWithoutUserInput = {
    create?: XOR<wishlistsCreateWithoutUserInput, wishlistsUncheckedCreateWithoutUserInput> | wishlistsCreateWithoutUserInput[] | wishlistsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: wishlistsCreateOrConnectWithoutUserInput | wishlistsCreateOrConnectWithoutUserInput[]
    createMany?: wishlistsCreateManyUserInputEnvelope
    connect?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
  }

  export type productReviewsCreateNestedManyWithoutUserInput = {
    create?: XOR<productReviewsCreateWithoutUserInput, productReviewsUncheckedCreateWithoutUserInput> | productReviewsCreateWithoutUserInput[] | productReviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productReviewsCreateOrConnectWithoutUserInput | productReviewsCreateOrConnectWithoutUserInput[]
    createMany?: productReviewsCreateManyUserInputEnvelope
    connect?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<productsCreateWithoutAuthorInput, productsUncheckedCreateWithoutAuthorInput> | productsCreateWithoutAuthorInput[] | productsUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: productsCreateOrConnectWithoutAuthorInput | productsCreateOrConnectWithoutAuthorInput[]
    createMany?: productsCreateManyAuthorInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productCartsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<productCartsCreateWithoutUserInput, productCartsUncheckedCreateWithoutUserInput> | productCartsCreateWithoutUserInput[] | productCartsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productCartsCreateOrConnectWithoutUserInput | productCartsCreateOrConnectWithoutUserInput[]
    createMany?: productCartsCreateManyUserInputEnvelope
    connect?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
  }

  export type mediaUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<mediaCreateWithoutUserInput, mediaUncheckedCreateWithoutUserInput> | mediaCreateWithoutUserInput[] | mediaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: mediaCreateOrConnectWithoutUserInput | mediaCreateOrConnectWithoutUserInput[]
    createMany?: mediaCreateManyUserInputEnvelope
    connect?: mediaWhereUniqueInput | mediaWhereUniqueInput[]
  }

  export type addressesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<addressesCreateWithoutUserInput, addressesUncheckedCreateWithoutUserInput> | addressesCreateWithoutUserInput[] | addressesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: addressesCreateOrConnectWithoutUserInput | addressesCreateOrConnectWithoutUserInput[]
    createMany?: addressesCreateManyUserInputEnvelope
    connect?: addressesWhereUniqueInput | addressesWhereUniqueInput[]
  }

  export type ordersUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput> | ordersCreateWithoutUserInput[] | ordersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUserInput | ordersCreateOrConnectWithoutUserInput[]
    createMany?: ordersCreateManyUserInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type wishlistsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<wishlistsCreateWithoutUserInput, wishlistsUncheckedCreateWithoutUserInput> | wishlistsCreateWithoutUserInput[] | wishlistsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: wishlistsCreateOrConnectWithoutUserInput | wishlistsCreateOrConnectWithoutUserInput[]
    createMany?: wishlistsCreateManyUserInputEnvelope
    connect?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
  }

  export type productReviewsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<productReviewsCreateWithoutUserInput, productReviewsUncheckedCreateWithoutUserInput> | productReviewsCreateWithoutUserInput[] | productReviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productReviewsCreateOrConnectWithoutUserInput | productReviewsCreateOrConnectWithoutUserInput[]
    createMany?: productReviewsCreateManyUserInputEnvelope
    connect?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type usersUpdateOneRequiredWithoutMetaNestedInput = {
    create?: XOR<usersCreateWithoutMetaInput, usersUncheckedCreateWithoutMetaInput>
    connectOrCreate?: usersCreateOrConnectWithoutMetaInput
    upsert?: usersUpsertWithoutMetaInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutMetaInput, usersUpdateWithoutMetaInput>, usersUncheckedUpdateWithoutMetaInput>
  }

  export type productsUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<productsCreateWithoutAuthorInput, productsUncheckedCreateWithoutAuthorInput> | productsCreateWithoutAuthorInput[] | productsUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: productsCreateOrConnectWithoutAuthorInput | productsCreateOrConnectWithoutAuthorInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutAuthorInput | productsUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: productsCreateManyAuthorInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutAuthorInput | productsUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: productsUpdateManyWithWhereWithoutAuthorInput | productsUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type productCartsUpdateManyWithoutUserNestedInput = {
    create?: XOR<productCartsCreateWithoutUserInput, productCartsUncheckedCreateWithoutUserInput> | productCartsCreateWithoutUserInput[] | productCartsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productCartsCreateOrConnectWithoutUserInput | productCartsCreateOrConnectWithoutUserInput[]
    upsert?: productCartsUpsertWithWhereUniqueWithoutUserInput | productCartsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: productCartsCreateManyUserInputEnvelope
    set?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
    disconnect?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
    delete?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
    connect?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
    update?: productCartsUpdateWithWhereUniqueWithoutUserInput | productCartsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: productCartsUpdateManyWithWhereWithoutUserInput | productCartsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: productCartsScalarWhereInput | productCartsScalarWhereInput[]
  }

  export type mediaUpdateManyWithoutUserNestedInput = {
    create?: XOR<mediaCreateWithoutUserInput, mediaUncheckedCreateWithoutUserInput> | mediaCreateWithoutUserInput[] | mediaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: mediaCreateOrConnectWithoutUserInput | mediaCreateOrConnectWithoutUserInput[]
    upsert?: mediaUpsertWithWhereUniqueWithoutUserInput | mediaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: mediaCreateManyUserInputEnvelope
    set?: mediaWhereUniqueInput | mediaWhereUniqueInput[]
    disconnect?: mediaWhereUniqueInput | mediaWhereUniqueInput[]
    delete?: mediaWhereUniqueInput | mediaWhereUniqueInput[]
    connect?: mediaWhereUniqueInput | mediaWhereUniqueInput[]
    update?: mediaUpdateWithWhereUniqueWithoutUserInput | mediaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: mediaUpdateManyWithWhereWithoutUserInput | mediaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: mediaScalarWhereInput | mediaScalarWhereInput[]
  }

  export type addressesUpdateManyWithoutUserNestedInput = {
    create?: XOR<addressesCreateWithoutUserInput, addressesUncheckedCreateWithoutUserInput> | addressesCreateWithoutUserInput[] | addressesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: addressesCreateOrConnectWithoutUserInput | addressesCreateOrConnectWithoutUserInput[]
    upsert?: addressesUpsertWithWhereUniqueWithoutUserInput | addressesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: addressesCreateManyUserInputEnvelope
    set?: addressesWhereUniqueInput | addressesWhereUniqueInput[]
    disconnect?: addressesWhereUniqueInput | addressesWhereUniqueInput[]
    delete?: addressesWhereUniqueInput | addressesWhereUniqueInput[]
    connect?: addressesWhereUniqueInput | addressesWhereUniqueInput[]
    update?: addressesUpdateWithWhereUniqueWithoutUserInput | addressesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: addressesUpdateManyWithWhereWithoutUserInput | addressesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: addressesScalarWhereInput | addressesScalarWhereInput[]
  }

  export type ordersUpdateManyWithoutUserNestedInput = {
    create?: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput> | ordersCreateWithoutUserInput[] | ordersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUserInput | ordersCreateOrConnectWithoutUserInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutUserInput | ordersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ordersCreateManyUserInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutUserInput | ordersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutUserInput | ordersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type wishlistsUpdateManyWithoutUserNestedInput = {
    create?: XOR<wishlistsCreateWithoutUserInput, wishlistsUncheckedCreateWithoutUserInput> | wishlistsCreateWithoutUserInput[] | wishlistsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: wishlistsCreateOrConnectWithoutUserInput | wishlistsCreateOrConnectWithoutUserInput[]
    upsert?: wishlistsUpsertWithWhereUniqueWithoutUserInput | wishlistsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: wishlistsCreateManyUserInputEnvelope
    set?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
    disconnect?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
    delete?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
    connect?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
    update?: wishlistsUpdateWithWhereUniqueWithoutUserInput | wishlistsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: wishlistsUpdateManyWithWhereWithoutUserInput | wishlistsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: wishlistsScalarWhereInput | wishlistsScalarWhereInput[]
  }

  export type productReviewsUpdateManyWithoutUserNestedInput = {
    create?: XOR<productReviewsCreateWithoutUserInput, productReviewsUncheckedCreateWithoutUserInput> | productReviewsCreateWithoutUserInput[] | productReviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productReviewsCreateOrConnectWithoutUserInput | productReviewsCreateOrConnectWithoutUserInput[]
    upsert?: productReviewsUpsertWithWhereUniqueWithoutUserInput | productReviewsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: productReviewsCreateManyUserInputEnvelope
    set?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
    disconnect?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
    delete?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
    connect?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
    update?: productReviewsUpdateWithWhereUniqueWithoutUserInput | productReviewsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: productReviewsUpdateManyWithWhereWithoutUserInput | productReviewsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: productReviewsScalarWhereInput | productReviewsScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<productsCreateWithoutAuthorInput, productsUncheckedCreateWithoutAuthorInput> | productsCreateWithoutAuthorInput[] | productsUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: productsCreateOrConnectWithoutAuthorInput | productsCreateOrConnectWithoutAuthorInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutAuthorInput | productsUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: productsCreateManyAuthorInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutAuthorInput | productsUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: productsUpdateManyWithWhereWithoutAuthorInput | productsUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type productCartsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<productCartsCreateWithoutUserInput, productCartsUncheckedCreateWithoutUserInput> | productCartsCreateWithoutUserInput[] | productCartsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productCartsCreateOrConnectWithoutUserInput | productCartsCreateOrConnectWithoutUserInput[]
    upsert?: productCartsUpsertWithWhereUniqueWithoutUserInput | productCartsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: productCartsCreateManyUserInputEnvelope
    set?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
    disconnect?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
    delete?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
    connect?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
    update?: productCartsUpdateWithWhereUniqueWithoutUserInput | productCartsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: productCartsUpdateManyWithWhereWithoutUserInput | productCartsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: productCartsScalarWhereInput | productCartsScalarWhereInput[]
  }

  export type mediaUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<mediaCreateWithoutUserInput, mediaUncheckedCreateWithoutUserInput> | mediaCreateWithoutUserInput[] | mediaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: mediaCreateOrConnectWithoutUserInput | mediaCreateOrConnectWithoutUserInput[]
    upsert?: mediaUpsertWithWhereUniqueWithoutUserInput | mediaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: mediaCreateManyUserInputEnvelope
    set?: mediaWhereUniqueInput | mediaWhereUniqueInput[]
    disconnect?: mediaWhereUniqueInput | mediaWhereUniqueInput[]
    delete?: mediaWhereUniqueInput | mediaWhereUniqueInput[]
    connect?: mediaWhereUniqueInput | mediaWhereUniqueInput[]
    update?: mediaUpdateWithWhereUniqueWithoutUserInput | mediaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: mediaUpdateManyWithWhereWithoutUserInput | mediaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: mediaScalarWhereInput | mediaScalarWhereInput[]
  }

  export type addressesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<addressesCreateWithoutUserInput, addressesUncheckedCreateWithoutUserInput> | addressesCreateWithoutUserInput[] | addressesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: addressesCreateOrConnectWithoutUserInput | addressesCreateOrConnectWithoutUserInput[]
    upsert?: addressesUpsertWithWhereUniqueWithoutUserInput | addressesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: addressesCreateManyUserInputEnvelope
    set?: addressesWhereUniqueInput | addressesWhereUniqueInput[]
    disconnect?: addressesWhereUniqueInput | addressesWhereUniqueInput[]
    delete?: addressesWhereUniqueInput | addressesWhereUniqueInput[]
    connect?: addressesWhereUniqueInput | addressesWhereUniqueInput[]
    update?: addressesUpdateWithWhereUniqueWithoutUserInput | addressesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: addressesUpdateManyWithWhereWithoutUserInput | addressesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: addressesScalarWhereInput | addressesScalarWhereInput[]
  }

  export type ordersUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput> | ordersCreateWithoutUserInput[] | ordersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUserInput | ordersCreateOrConnectWithoutUserInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutUserInput | ordersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ordersCreateManyUserInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutUserInput | ordersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutUserInput | ordersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type wishlistsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<wishlistsCreateWithoutUserInput, wishlistsUncheckedCreateWithoutUserInput> | wishlistsCreateWithoutUserInput[] | wishlistsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: wishlistsCreateOrConnectWithoutUserInput | wishlistsCreateOrConnectWithoutUserInput[]
    upsert?: wishlistsUpsertWithWhereUniqueWithoutUserInput | wishlistsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: wishlistsCreateManyUserInputEnvelope
    set?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
    disconnect?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
    delete?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
    connect?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
    update?: wishlistsUpdateWithWhereUniqueWithoutUserInput | wishlistsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: wishlistsUpdateManyWithWhereWithoutUserInput | wishlistsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: wishlistsScalarWhereInput | wishlistsScalarWhereInput[]
  }

  export type productReviewsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<productReviewsCreateWithoutUserInput, productReviewsUncheckedCreateWithoutUserInput> | productReviewsCreateWithoutUserInput[] | productReviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productReviewsCreateOrConnectWithoutUserInput | productReviewsCreateOrConnectWithoutUserInput[]
    upsert?: productReviewsUpsertWithWhereUniqueWithoutUserInput | productReviewsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: productReviewsCreateManyUserInputEnvelope
    set?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
    disconnect?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
    delete?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
    connect?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
    update?: productReviewsUpdateWithWhereUniqueWithoutUserInput | productReviewsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: productReviewsUpdateManyWithWhereWithoutUserInput | productReviewsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: productReviewsScalarWhereInput | productReviewsScalarWhereInput[]
  }

  export type users_metaCreateNestedOneWithoutAddressesInput = {
    create?: XOR<users_metaCreateWithoutAddressesInput, users_metaUncheckedCreateWithoutAddressesInput>
    connectOrCreate?: users_metaCreateOrConnectWithoutAddressesInput
    connect?: users_metaWhereUniqueInput
  }

  export type ordersCreateNestedManyWithoutBilling_addressInput = {
    create?: XOR<ordersCreateWithoutBilling_addressInput, ordersUncheckedCreateWithoutBilling_addressInput> | ordersCreateWithoutBilling_addressInput[] | ordersUncheckedCreateWithoutBilling_addressInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutBilling_addressInput | ordersCreateOrConnectWithoutBilling_addressInput[]
    createMany?: ordersCreateManyBilling_addressInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type ordersCreateNestedManyWithoutShipping_addressInput = {
    create?: XOR<ordersCreateWithoutShipping_addressInput, ordersUncheckedCreateWithoutShipping_addressInput> | ordersCreateWithoutShipping_addressInput[] | ordersUncheckedCreateWithoutShipping_addressInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutShipping_addressInput | ordersCreateOrConnectWithoutShipping_addressInput[]
    createMany?: ordersCreateManyShipping_addressInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type ordersUncheckedCreateNestedManyWithoutBilling_addressInput = {
    create?: XOR<ordersCreateWithoutBilling_addressInput, ordersUncheckedCreateWithoutBilling_addressInput> | ordersCreateWithoutBilling_addressInput[] | ordersUncheckedCreateWithoutBilling_addressInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutBilling_addressInput | ordersCreateOrConnectWithoutBilling_addressInput[]
    createMany?: ordersCreateManyBilling_addressInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type ordersUncheckedCreateNestedManyWithoutShipping_addressInput = {
    create?: XOR<ordersCreateWithoutShipping_addressInput, ordersUncheckedCreateWithoutShipping_addressInput> | ordersCreateWithoutShipping_addressInput[] | ordersUncheckedCreateWithoutShipping_addressInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutShipping_addressInput | ordersCreateOrConnectWithoutShipping_addressInput[]
    createMany?: ordersCreateManyShipping_addressInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type EnumAddressTypeFieldUpdateOperationsInput = {
    set?: $Enums.AddressType
  }

  export type users_metaUpdateOneRequiredWithoutAddressesNestedInput = {
    create?: XOR<users_metaCreateWithoutAddressesInput, users_metaUncheckedCreateWithoutAddressesInput>
    connectOrCreate?: users_metaCreateOrConnectWithoutAddressesInput
    upsert?: users_metaUpsertWithoutAddressesInput
    connect?: users_metaWhereUniqueInput
    update?: XOR<XOR<users_metaUpdateToOneWithWhereWithoutAddressesInput, users_metaUpdateWithoutAddressesInput>, users_metaUncheckedUpdateWithoutAddressesInput>
  }

  export type ordersUpdateManyWithoutBilling_addressNestedInput = {
    create?: XOR<ordersCreateWithoutBilling_addressInput, ordersUncheckedCreateWithoutBilling_addressInput> | ordersCreateWithoutBilling_addressInput[] | ordersUncheckedCreateWithoutBilling_addressInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutBilling_addressInput | ordersCreateOrConnectWithoutBilling_addressInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutBilling_addressInput | ordersUpsertWithWhereUniqueWithoutBilling_addressInput[]
    createMany?: ordersCreateManyBilling_addressInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutBilling_addressInput | ordersUpdateWithWhereUniqueWithoutBilling_addressInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutBilling_addressInput | ordersUpdateManyWithWhereWithoutBilling_addressInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type ordersUpdateManyWithoutShipping_addressNestedInput = {
    create?: XOR<ordersCreateWithoutShipping_addressInput, ordersUncheckedCreateWithoutShipping_addressInput> | ordersCreateWithoutShipping_addressInput[] | ordersUncheckedCreateWithoutShipping_addressInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutShipping_addressInput | ordersCreateOrConnectWithoutShipping_addressInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutShipping_addressInput | ordersUpsertWithWhereUniqueWithoutShipping_addressInput[]
    createMany?: ordersCreateManyShipping_addressInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutShipping_addressInput | ordersUpdateWithWhereUniqueWithoutShipping_addressInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutShipping_addressInput | ordersUpdateManyWithWhereWithoutShipping_addressInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type ordersUncheckedUpdateManyWithoutBilling_addressNestedInput = {
    create?: XOR<ordersCreateWithoutBilling_addressInput, ordersUncheckedCreateWithoutBilling_addressInput> | ordersCreateWithoutBilling_addressInput[] | ordersUncheckedCreateWithoutBilling_addressInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutBilling_addressInput | ordersCreateOrConnectWithoutBilling_addressInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutBilling_addressInput | ordersUpsertWithWhereUniqueWithoutBilling_addressInput[]
    createMany?: ordersCreateManyBilling_addressInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutBilling_addressInput | ordersUpdateWithWhereUniqueWithoutBilling_addressInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutBilling_addressInput | ordersUpdateManyWithWhereWithoutBilling_addressInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type ordersUncheckedUpdateManyWithoutShipping_addressNestedInput = {
    create?: XOR<ordersCreateWithoutShipping_addressInput, ordersUncheckedCreateWithoutShipping_addressInput> | ordersCreateWithoutShipping_addressInput[] | ordersUncheckedCreateWithoutShipping_addressInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutShipping_addressInput | ordersCreateOrConnectWithoutShipping_addressInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutShipping_addressInput | ordersUpsertWithWhereUniqueWithoutShipping_addressInput[]
    createMany?: ordersCreateManyShipping_addressInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutShipping_addressInput | ordersUpdateWithWhereUniqueWithoutShipping_addressInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutShipping_addressInput | ordersUpdateManyWithWhereWithoutShipping_addressInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type users_metaCreateNestedOneWithoutProductsInput = {
    create?: XOR<users_metaCreateWithoutProductsInput, users_metaUncheckedCreateWithoutProductsInput>
    connectOrCreate?: users_metaCreateOrConnectWithoutProductsInput
    connect?: users_metaWhereUniqueInput
  }

  export type mediaCreateNestedOneWithoutProductInput = {
    create?: XOR<mediaCreateWithoutProductInput, mediaUncheckedCreateWithoutProductInput>
    connectOrCreate?: mediaCreateOrConnectWithoutProductInput
    connect?: mediaWhereUniqueInput
  }

  export type categoriesOnProductsCreateNestedManyWithoutProductInput = {
    create?: XOR<categoriesOnProductsCreateWithoutProductInput, categoriesOnProductsUncheckedCreateWithoutProductInput> | categoriesOnProductsCreateWithoutProductInput[] | categoriesOnProductsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: categoriesOnProductsCreateOrConnectWithoutProductInput | categoriesOnProductsCreateOrConnectWithoutProductInput[]
    createMany?: categoriesOnProductsCreateManyProductInputEnvelope
    connect?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
  }

  export type productCartsCreateNestedManyWithoutProductInput = {
    create?: XOR<productCartsCreateWithoutProductInput, productCartsUncheckedCreateWithoutProductInput> | productCartsCreateWithoutProductInput[] | productCartsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productCartsCreateOrConnectWithoutProductInput | productCartsCreateOrConnectWithoutProductInput[]
    createMany?: productCartsCreateManyProductInputEnvelope
    connect?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
  }

  export type productGalleriesCreateNestedManyWithoutProductInput = {
    create?: XOR<productGalleriesCreateWithoutProductInput, productGalleriesUncheckedCreateWithoutProductInput> | productGalleriesCreateWithoutProductInput[] | productGalleriesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productGalleriesCreateOrConnectWithoutProductInput | productGalleriesCreateOrConnectWithoutProductInput[]
    createMany?: productGalleriesCreateManyProductInputEnvelope
    connect?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
  }

  export type orderItemsCreateNestedManyWithoutProductInput = {
    create?: XOR<orderItemsCreateWithoutProductInput, orderItemsUncheckedCreateWithoutProductInput> | orderItemsCreateWithoutProductInput[] | orderItemsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: orderItemsCreateOrConnectWithoutProductInput | orderItemsCreateOrConnectWithoutProductInput[]
    createMany?: orderItemsCreateManyProductInputEnvelope
    connect?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
  }

  export type wishlistsCreateNestedManyWithoutProductInput = {
    create?: XOR<wishlistsCreateWithoutProductInput, wishlistsUncheckedCreateWithoutProductInput> | wishlistsCreateWithoutProductInput[] | wishlistsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: wishlistsCreateOrConnectWithoutProductInput | wishlistsCreateOrConnectWithoutProductInput[]
    createMany?: wishlistsCreateManyProductInputEnvelope
    connect?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
  }

  export type productReviewsCreateNestedManyWithoutProductInput = {
    create?: XOR<productReviewsCreateWithoutProductInput, productReviewsUncheckedCreateWithoutProductInput> | productReviewsCreateWithoutProductInput[] | productReviewsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productReviewsCreateOrConnectWithoutProductInput | productReviewsCreateOrConnectWithoutProductInput[]
    createMany?: productReviewsCreateManyProductInputEnvelope
    connect?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
  }

  export type categoriesOnProductsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<categoriesOnProductsCreateWithoutProductInput, categoriesOnProductsUncheckedCreateWithoutProductInput> | categoriesOnProductsCreateWithoutProductInput[] | categoriesOnProductsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: categoriesOnProductsCreateOrConnectWithoutProductInput | categoriesOnProductsCreateOrConnectWithoutProductInput[]
    createMany?: categoriesOnProductsCreateManyProductInputEnvelope
    connect?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
  }

  export type productCartsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<productCartsCreateWithoutProductInput, productCartsUncheckedCreateWithoutProductInput> | productCartsCreateWithoutProductInput[] | productCartsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productCartsCreateOrConnectWithoutProductInput | productCartsCreateOrConnectWithoutProductInput[]
    createMany?: productCartsCreateManyProductInputEnvelope
    connect?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
  }

  export type productGalleriesUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<productGalleriesCreateWithoutProductInput, productGalleriesUncheckedCreateWithoutProductInput> | productGalleriesCreateWithoutProductInput[] | productGalleriesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productGalleriesCreateOrConnectWithoutProductInput | productGalleriesCreateOrConnectWithoutProductInput[]
    createMany?: productGalleriesCreateManyProductInputEnvelope
    connect?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
  }

  export type orderItemsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<orderItemsCreateWithoutProductInput, orderItemsUncheckedCreateWithoutProductInput> | orderItemsCreateWithoutProductInput[] | orderItemsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: orderItemsCreateOrConnectWithoutProductInput | orderItemsCreateOrConnectWithoutProductInput[]
    createMany?: orderItemsCreateManyProductInputEnvelope
    connect?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
  }

  export type wishlistsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<wishlistsCreateWithoutProductInput, wishlistsUncheckedCreateWithoutProductInput> | wishlistsCreateWithoutProductInput[] | wishlistsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: wishlistsCreateOrConnectWithoutProductInput | wishlistsCreateOrConnectWithoutProductInput[]
    createMany?: wishlistsCreateManyProductInputEnvelope
    connect?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
  }

  export type productReviewsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<productReviewsCreateWithoutProductInput, productReviewsUncheckedCreateWithoutProductInput> | productReviewsCreateWithoutProductInput[] | productReviewsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productReviewsCreateOrConnectWithoutProductInput | productReviewsCreateOrConnectWithoutProductInput[]
    createMany?: productReviewsCreateManyProductInputEnvelope
    connect?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumStockStatusFieldUpdateOperationsInput = {
    set?: $Enums.StockStatus
  }

  export type EnumProductStatusFieldUpdateOperationsInput = {
    set?: $Enums.ProductStatus
  }

  export type users_metaUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<users_metaCreateWithoutProductsInput, users_metaUncheckedCreateWithoutProductsInput>
    connectOrCreate?: users_metaCreateOrConnectWithoutProductsInput
    upsert?: users_metaUpsertWithoutProductsInput
    connect?: users_metaWhereUniqueInput
    update?: XOR<XOR<users_metaUpdateToOneWithWhereWithoutProductsInput, users_metaUpdateWithoutProductsInput>, users_metaUncheckedUpdateWithoutProductsInput>
  }

  export type mediaUpdateOneWithoutProductNestedInput = {
    create?: XOR<mediaCreateWithoutProductInput, mediaUncheckedCreateWithoutProductInput>
    connectOrCreate?: mediaCreateOrConnectWithoutProductInput
    upsert?: mediaUpsertWithoutProductInput
    disconnect?: mediaWhereInput | boolean
    delete?: mediaWhereInput | boolean
    connect?: mediaWhereUniqueInput
    update?: XOR<XOR<mediaUpdateToOneWithWhereWithoutProductInput, mediaUpdateWithoutProductInput>, mediaUncheckedUpdateWithoutProductInput>
  }

  export type categoriesOnProductsUpdateManyWithoutProductNestedInput = {
    create?: XOR<categoriesOnProductsCreateWithoutProductInput, categoriesOnProductsUncheckedCreateWithoutProductInput> | categoriesOnProductsCreateWithoutProductInput[] | categoriesOnProductsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: categoriesOnProductsCreateOrConnectWithoutProductInput | categoriesOnProductsCreateOrConnectWithoutProductInput[]
    upsert?: categoriesOnProductsUpsertWithWhereUniqueWithoutProductInput | categoriesOnProductsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: categoriesOnProductsCreateManyProductInputEnvelope
    set?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
    disconnect?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
    delete?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
    connect?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
    update?: categoriesOnProductsUpdateWithWhereUniqueWithoutProductInput | categoriesOnProductsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: categoriesOnProductsUpdateManyWithWhereWithoutProductInput | categoriesOnProductsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: categoriesOnProductsScalarWhereInput | categoriesOnProductsScalarWhereInput[]
  }

  export type productCartsUpdateManyWithoutProductNestedInput = {
    create?: XOR<productCartsCreateWithoutProductInput, productCartsUncheckedCreateWithoutProductInput> | productCartsCreateWithoutProductInput[] | productCartsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productCartsCreateOrConnectWithoutProductInput | productCartsCreateOrConnectWithoutProductInput[]
    upsert?: productCartsUpsertWithWhereUniqueWithoutProductInput | productCartsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: productCartsCreateManyProductInputEnvelope
    set?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
    disconnect?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
    delete?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
    connect?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
    update?: productCartsUpdateWithWhereUniqueWithoutProductInput | productCartsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: productCartsUpdateManyWithWhereWithoutProductInput | productCartsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: productCartsScalarWhereInput | productCartsScalarWhereInput[]
  }

  export type productGalleriesUpdateManyWithoutProductNestedInput = {
    create?: XOR<productGalleriesCreateWithoutProductInput, productGalleriesUncheckedCreateWithoutProductInput> | productGalleriesCreateWithoutProductInput[] | productGalleriesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productGalleriesCreateOrConnectWithoutProductInput | productGalleriesCreateOrConnectWithoutProductInput[]
    upsert?: productGalleriesUpsertWithWhereUniqueWithoutProductInput | productGalleriesUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: productGalleriesCreateManyProductInputEnvelope
    set?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
    disconnect?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
    delete?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
    connect?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
    update?: productGalleriesUpdateWithWhereUniqueWithoutProductInput | productGalleriesUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: productGalleriesUpdateManyWithWhereWithoutProductInput | productGalleriesUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: productGalleriesScalarWhereInput | productGalleriesScalarWhereInput[]
  }

  export type orderItemsUpdateManyWithoutProductNestedInput = {
    create?: XOR<orderItemsCreateWithoutProductInput, orderItemsUncheckedCreateWithoutProductInput> | orderItemsCreateWithoutProductInput[] | orderItemsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: orderItemsCreateOrConnectWithoutProductInput | orderItemsCreateOrConnectWithoutProductInput[]
    upsert?: orderItemsUpsertWithWhereUniqueWithoutProductInput | orderItemsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: orderItemsCreateManyProductInputEnvelope
    set?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
    disconnect?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
    delete?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
    connect?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
    update?: orderItemsUpdateWithWhereUniqueWithoutProductInput | orderItemsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: orderItemsUpdateManyWithWhereWithoutProductInput | orderItemsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: orderItemsScalarWhereInput | orderItemsScalarWhereInput[]
  }

  export type wishlistsUpdateManyWithoutProductNestedInput = {
    create?: XOR<wishlistsCreateWithoutProductInput, wishlistsUncheckedCreateWithoutProductInput> | wishlistsCreateWithoutProductInput[] | wishlistsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: wishlistsCreateOrConnectWithoutProductInput | wishlistsCreateOrConnectWithoutProductInput[]
    upsert?: wishlistsUpsertWithWhereUniqueWithoutProductInput | wishlistsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: wishlistsCreateManyProductInputEnvelope
    set?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
    disconnect?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
    delete?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
    connect?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
    update?: wishlistsUpdateWithWhereUniqueWithoutProductInput | wishlistsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: wishlistsUpdateManyWithWhereWithoutProductInput | wishlistsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: wishlistsScalarWhereInput | wishlistsScalarWhereInput[]
  }

  export type productReviewsUpdateManyWithoutProductNestedInput = {
    create?: XOR<productReviewsCreateWithoutProductInput, productReviewsUncheckedCreateWithoutProductInput> | productReviewsCreateWithoutProductInput[] | productReviewsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productReviewsCreateOrConnectWithoutProductInput | productReviewsCreateOrConnectWithoutProductInput[]
    upsert?: productReviewsUpsertWithWhereUniqueWithoutProductInput | productReviewsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: productReviewsCreateManyProductInputEnvelope
    set?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
    disconnect?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
    delete?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
    connect?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
    update?: productReviewsUpdateWithWhereUniqueWithoutProductInput | productReviewsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: productReviewsUpdateManyWithWhereWithoutProductInput | productReviewsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: productReviewsScalarWhereInput | productReviewsScalarWhereInput[]
  }

  export type categoriesOnProductsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<categoriesOnProductsCreateWithoutProductInput, categoriesOnProductsUncheckedCreateWithoutProductInput> | categoriesOnProductsCreateWithoutProductInput[] | categoriesOnProductsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: categoriesOnProductsCreateOrConnectWithoutProductInput | categoriesOnProductsCreateOrConnectWithoutProductInput[]
    upsert?: categoriesOnProductsUpsertWithWhereUniqueWithoutProductInput | categoriesOnProductsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: categoriesOnProductsCreateManyProductInputEnvelope
    set?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
    disconnect?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
    delete?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
    connect?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
    update?: categoriesOnProductsUpdateWithWhereUniqueWithoutProductInput | categoriesOnProductsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: categoriesOnProductsUpdateManyWithWhereWithoutProductInput | categoriesOnProductsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: categoriesOnProductsScalarWhereInput | categoriesOnProductsScalarWhereInput[]
  }

  export type productCartsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<productCartsCreateWithoutProductInput, productCartsUncheckedCreateWithoutProductInput> | productCartsCreateWithoutProductInput[] | productCartsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productCartsCreateOrConnectWithoutProductInput | productCartsCreateOrConnectWithoutProductInput[]
    upsert?: productCartsUpsertWithWhereUniqueWithoutProductInput | productCartsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: productCartsCreateManyProductInputEnvelope
    set?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
    disconnect?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
    delete?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
    connect?: productCartsWhereUniqueInput | productCartsWhereUniqueInput[]
    update?: productCartsUpdateWithWhereUniqueWithoutProductInput | productCartsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: productCartsUpdateManyWithWhereWithoutProductInput | productCartsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: productCartsScalarWhereInput | productCartsScalarWhereInput[]
  }

  export type productGalleriesUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<productGalleriesCreateWithoutProductInput, productGalleriesUncheckedCreateWithoutProductInput> | productGalleriesCreateWithoutProductInput[] | productGalleriesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productGalleriesCreateOrConnectWithoutProductInput | productGalleriesCreateOrConnectWithoutProductInput[]
    upsert?: productGalleriesUpsertWithWhereUniqueWithoutProductInput | productGalleriesUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: productGalleriesCreateManyProductInputEnvelope
    set?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
    disconnect?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
    delete?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
    connect?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
    update?: productGalleriesUpdateWithWhereUniqueWithoutProductInput | productGalleriesUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: productGalleriesUpdateManyWithWhereWithoutProductInput | productGalleriesUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: productGalleriesScalarWhereInput | productGalleriesScalarWhereInput[]
  }

  export type orderItemsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<orderItemsCreateWithoutProductInput, orderItemsUncheckedCreateWithoutProductInput> | orderItemsCreateWithoutProductInput[] | orderItemsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: orderItemsCreateOrConnectWithoutProductInput | orderItemsCreateOrConnectWithoutProductInput[]
    upsert?: orderItemsUpsertWithWhereUniqueWithoutProductInput | orderItemsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: orderItemsCreateManyProductInputEnvelope
    set?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
    disconnect?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
    delete?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
    connect?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
    update?: orderItemsUpdateWithWhereUniqueWithoutProductInput | orderItemsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: orderItemsUpdateManyWithWhereWithoutProductInput | orderItemsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: orderItemsScalarWhereInput | orderItemsScalarWhereInput[]
  }

  export type wishlistsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<wishlistsCreateWithoutProductInput, wishlistsUncheckedCreateWithoutProductInput> | wishlistsCreateWithoutProductInput[] | wishlistsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: wishlistsCreateOrConnectWithoutProductInput | wishlistsCreateOrConnectWithoutProductInput[]
    upsert?: wishlistsUpsertWithWhereUniqueWithoutProductInput | wishlistsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: wishlistsCreateManyProductInputEnvelope
    set?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
    disconnect?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
    delete?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
    connect?: wishlistsWhereUniqueInput | wishlistsWhereUniqueInput[]
    update?: wishlistsUpdateWithWhereUniqueWithoutProductInput | wishlistsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: wishlistsUpdateManyWithWhereWithoutProductInput | wishlistsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: wishlistsScalarWhereInput | wishlistsScalarWhereInput[]
  }

  export type productReviewsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<productReviewsCreateWithoutProductInput, productReviewsUncheckedCreateWithoutProductInput> | productReviewsCreateWithoutProductInput[] | productReviewsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productReviewsCreateOrConnectWithoutProductInput | productReviewsCreateOrConnectWithoutProductInput[]
    upsert?: productReviewsUpsertWithWhereUniqueWithoutProductInput | productReviewsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: productReviewsCreateManyProductInputEnvelope
    set?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
    disconnect?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
    delete?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
    connect?: productReviewsWhereUniqueInput | productReviewsWhereUniqueInput[]
    update?: productReviewsUpdateWithWhereUniqueWithoutProductInput | productReviewsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: productReviewsUpdateManyWithWhereWithoutProductInput | productReviewsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: productReviewsScalarWhereInput | productReviewsScalarWhereInput[]
  }

  export type productsCreateNestedOneWithoutGalleriesInput = {
    create?: XOR<productsCreateWithoutGalleriesInput, productsUncheckedCreateWithoutGalleriesInput>
    connectOrCreate?: productsCreateOrConnectWithoutGalleriesInput
    connect?: productsWhereUniqueInput
  }

  export type mediaCreateNestedOneWithoutGalleriesInput = {
    create?: XOR<mediaCreateWithoutGalleriesInput, mediaUncheckedCreateWithoutGalleriesInput>
    connectOrCreate?: mediaCreateOrConnectWithoutGalleriesInput
    connect?: mediaWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutGalleriesNestedInput = {
    create?: XOR<productsCreateWithoutGalleriesInput, productsUncheckedCreateWithoutGalleriesInput>
    connectOrCreate?: productsCreateOrConnectWithoutGalleriesInput
    upsert?: productsUpsertWithoutGalleriesInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutGalleriesInput, productsUpdateWithoutGalleriesInput>, productsUncheckedUpdateWithoutGalleriesInput>
  }

  export type mediaUpdateOneRequiredWithoutGalleriesNestedInput = {
    create?: XOR<mediaCreateWithoutGalleriesInput, mediaUncheckedCreateWithoutGalleriesInput>
    connectOrCreate?: mediaCreateOrConnectWithoutGalleriesInput
    upsert?: mediaUpsertWithoutGalleriesInput
    connect?: mediaWhereUniqueInput
    update?: XOR<XOR<mediaUpdateToOneWithWhereWithoutGalleriesInput, mediaUpdateWithoutGalleriesInput>, mediaUncheckedUpdateWithoutGalleriesInput>
  }

  export type mediaCreateNestedOneWithoutProductCategoriesInput = {
    create?: XOR<mediaCreateWithoutProductCategoriesInput, mediaUncheckedCreateWithoutProductCategoriesInput>
    connectOrCreate?: mediaCreateOrConnectWithoutProductCategoriesInput
    connect?: mediaWhereUniqueInput
  }

  export type categoriesOnProductsCreateNestedManyWithoutCategoryInput = {
    create?: XOR<categoriesOnProductsCreateWithoutCategoryInput, categoriesOnProductsUncheckedCreateWithoutCategoryInput> | categoriesOnProductsCreateWithoutCategoryInput[] | categoriesOnProductsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: categoriesOnProductsCreateOrConnectWithoutCategoryInput | categoriesOnProductsCreateOrConnectWithoutCategoryInput[]
    createMany?: categoriesOnProductsCreateManyCategoryInputEnvelope
    connect?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
  }

  export type categoriesOnProductsUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<categoriesOnProductsCreateWithoutCategoryInput, categoriesOnProductsUncheckedCreateWithoutCategoryInput> | categoriesOnProductsCreateWithoutCategoryInput[] | categoriesOnProductsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: categoriesOnProductsCreateOrConnectWithoutCategoryInput | categoriesOnProductsCreateOrConnectWithoutCategoryInput[]
    createMany?: categoriesOnProductsCreateManyCategoryInputEnvelope
    connect?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
  }

  export type mediaUpdateOneWithoutProductCategoriesNestedInput = {
    create?: XOR<mediaCreateWithoutProductCategoriesInput, mediaUncheckedCreateWithoutProductCategoriesInput>
    connectOrCreate?: mediaCreateOrConnectWithoutProductCategoriesInput
    upsert?: mediaUpsertWithoutProductCategoriesInput
    disconnect?: mediaWhereInput | boolean
    delete?: mediaWhereInput | boolean
    connect?: mediaWhereUniqueInput
    update?: XOR<XOR<mediaUpdateToOneWithWhereWithoutProductCategoriesInput, mediaUpdateWithoutProductCategoriesInput>, mediaUncheckedUpdateWithoutProductCategoriesInput>
  }

  export type categoriesOnProductsUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<categoriesOnProductsCreateWithoutCategoryInput, categoriesOnProductsUncheckedCreateWithoutCategoryInput> | categoriesOnProductsCreateWithoutCategoryInput[] | categoriesOnProductsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: categoriesOnProductsCreateOrConnectWithoutCategoryInput | categoriesOnProductsCreateOrConnectWithoutCategoryInput[]
    upsert?: categoriesOnProductsUpsertWithWhereUniqueWithoutCategoryInput | categoriesOnProductsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: categoriesOnProductsCreateManyCategoryInputEnvelope
    set?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
    disconnect?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
    delete?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
    connect?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
    update?: categoriesOnProductsUpdateWithWhereUniqueWithoutCategoryInput | categoriesOnProductsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: categoriesOnProductsUpdateManyWithWhereWithoutCategoryInput | categoriesOnProductsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: categoriesOnProductsScalarWhereInput | categoriesOnProductsScalarWhereInput[]
  }

  export type categoriesOnProductsUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<categoriesOnProductsCreateWithoutCategoryInput, categoriesOnProductsUncheckedCreateWithoutCategoryInput> | categoriesOnProductsCreateWithoutCategoryInput[] | categoriesOnProductsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: categoriesOnProductsCreateOrConnectWithoutCategoryInput | categoriesOnProductsCreateOrConnectWithoutCategoryInput[]
    upsert?: categoriesOnProductsUpsertWithWhereUniqueWithoutCategoryInput | categoriesOnProductsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: categoriesOnProductsCreateManyCategoryInputEnvelope
    set?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
    disconnect?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
    delete?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
    connect?: categoriesOnProductsWhereUniqueInput | categoriesOnProductsWhereUniqueInput[]
    update?: categoriesOnProductsUpdateWithWhereUniqueWithoutCategoryInput | categoriesOnProductsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: categoriesOnProductsUpdateManyWithWhereWithoutCategoryInput | categoriesOnProductsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: categoriesOnProductsScalarWhereInput | categoriesOnProductsScalarWhereInput[]
  }

  export type productsCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<productsCreateWithoutCategoriesInput, productsUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: productsCreateOrConnectWithoutCategoriesInput
    connect?: productsWhereUniqueInput
  }

  export type productCategoriesCreateNestedOneWithoutProductsInput = {
    create?: XOR<productCategoriesCreateWithoutProductsInput, productCategoriesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: productCategoriesCreateOrConnectWithoutProductsInput
    connect?: productCategoriesWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<productsCreateWithoutCategoriesInput, productsUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: productsCreateOrConnectWithoutCategoriesInput
    upsert?: productsUpsertWithoutCategoriesInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutCategoriesInput, productsUpdateWithoutCategoriesInput>, productsUncheckedUpdateWithoutCategoriesInput>
  }

  export type productCategoriesUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<productCategoriesCreateWithoutProductsInput, productCategoriesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: productCategoriesCreateOrConnectWithoutProductsInput
    upsert?: productCategoriesUpsertWithoutProductsInput
    connect?: productCategoriesWhereUniqueInput
    update?: XOR<XOR<productCategoriesUpdateToOneWithWhereWithoutProductsInput, productCategoriesUpdateWithoutProductsInput>, productCategoriesUncheckedUpdateWithoutProductsInput>
  }

  export type productsCreateNestedOneWithoutCartsInput = {
    create?: XOR<productsCreateWithoutCartsInput, productsUncheckedCreateWithoutCartsInput>
    connectOrCreate?: productsCreateOrConnectWithoutCartsInput
    connect?: productsWhereUniqueInput
  }

  export type users_metaCreateNestedOneWithoutCartsInput = {
    create?: XOR<users_metaCreateWithoutCartsInput, users_metaUncheckedCreateWithoutCartsInput>
    connectOrCreate?: users_metaCreateOrConnectWithoutCartsInput
    connect?: users_metaWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutCartsNestedInput = {
    create?: XOR<productsCreateWithoutCartsInput, productsUncheckedCreateWithoutCartsInput>
    connectOrCreate?: productsCreateOrConnectWithoutCartsInput
    upsert?: productsUpsertWithoutCartsInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutCartsInput, productsUpdateWithoutCartsInput>, productsUncheckedUpdateWithoutCartsInput>
  }

  export type users_metaUpdateOneRequiredWithoutCartsNestedInput = {
    create?: XOR<users_metaCreateWithoutCartsInput, users_metaUncheckedCreateWithoutCartsInput>
    connectOrCreate?: users_metaCreateOrConnectWithoutCartsInput
    upsert?: users_metaUpsertWithoutCartsInput
    connect?: users_metaWhereUniqueInput
    update?: XOR<XOR<users_metaUpdateToOneWithWhereWithoutCartsInput, users_metaUpdateWithoutCartsInput>, users_metaUncheckedUpdateWithoutCartsInput>
  }

  export type users_metaCreateNestedOneWithoutProduct_reviewsInput = {
    create?: XOR<users_metaCreateWithoutProduct_reviewsInput, users_metaUncheckedCreateWithoutProduct_reviewsInput>
    connectOrCreate?: users_metaCreateOrConnectWithoutProduct_reviewsInput
    connect?: users_metaWhereUniqueInput
  }

  export type productsCreateNestedOneWithoutReviewsInput = {
    create?: XOR<productsCreateWithoutReviewsInput, productsUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: productsCreateOrConnectWithoutReviewsInput
    connect?: productsWhereUniqueInput
  }

  export type EnumProductReviewStatusFieldUpdateOperationsInput = {
    set?: $Enums.ProductReviewStatus
  }

  export type users_metaUpdateOneRequiredWithoutProduct_reviewsNestedInput = {
    create?: XOR<users_metaCreateWithoutProduct_reviewsInput, users_metaUncheckedCreateWithoutProduct_reviewsInput>
    connectOrCreate?: users_metaCreateOrConnectWithoutProduct_reviewsInput
    upsert?: users_metaUpsertWithoutProduct_reviewsInput
    connect?: users_metaWhereUniqueInput
    update?: XOR<XOR<users_metaUpdateToOneWithWhereWithoutProduct_reviewsInput, users_metaUpdateWithoutProduct_reviewsInput>, users_metaUncheckedUpdateWithoutProduct_reviewsInput>
  }

  export type productsUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<productsCreateWithoutReviewsInput, productsUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: productsCreateOrConnectWithoutReviewsInput
    upsert?: productsUpsertWithoutReviewsInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutReviewsInput, productsUpdateWithoutReviewsInput>, productsUncheckedUpdateWithoutReviewsInput>
  }

  export type users_metaCreateNestedOneWithoutMediaInput = {
    create?: XOR<users_metaCreateWithoutMediaInput, users_metaUncheckedCreateWithoutMediaInput>
    connectOrCreate?: users_metaCreateOrConnectWithoutMediaInput
    connect?: users_metaWhereUniqueInput
  }

  export type productCategoriesCreateNestedManyWithoutPhotoInput = {
    create?: XOR<productCategoriesCreateWithoutPhotoInput, productCategoriesUncheckedCreateWithoutPhotoInput> | productCategoriesCreateWithoutPhotoInput[] | productCategoriesUncheckedCreateWithoutPhotoInput[]
    connectOrCreate?: productCategoriesCreateOrConnectWithoutPhotoInput | productCategoriesCreateOrConnectWithoutPhotoInput[]
    createMany?: productCategoriesCreateManyPhotoInputEnvelope
    connect?: productCategoriesWhereUniqueInput | productCategoriesWhereUniqueInput[]
  }

  export type productsCreateNestedManyWithoutThumbnailInput = {
    create?: XOR<productsCreateWithoutThumbnailInput, productsUncheckedCreateWithoutThumbnailInput> | productsCreateWithoutThumbnailInput[] | productsUncheckedCreateWithoutThumbnailInput[]
    connectOrCreate?: productsCreateOrConnectWithoutThumbnailInput | productsCreateOrConnectWithoutThumbnailInput[]
    createMany?: productsCreateManyThumbnailInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productGalleriesCreateNestedManyWithoutMediaInput = {
    create?: XOR<productGalleriesCreateWithoutMediaInput, productGalleriesUncheckedCreateWithoutMediaInput> | productGalleriesCreateWithoutMediaInput[] | productGalleriesUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: productGalleriesCreateOrConnectWithoutMediaInput | productGalleriesCreateOrConnectWithoutMediaInput[]
    createMany?: productGalleriesCreateManyMediaInputEnvelope
    connect?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
  }

  export type productCategoriesUncheckedCreateNestedManyWithoutPhotoInput = {
    create?: XOR<productCategoriesCreateWithoutPhotoInput, productCategoriesUncheckedCreateWithoutPhotoInput> | productCategoriesCreateWithoutPhotoInput[] | productCategoriesUncheckedCreateWithoutPhotoInput[]
    connectOrCreate?: productCategoriesCreateOrConnectWithoutPhotoInput | productCategoriesCreateOrConnectWithoutPhotoInput[]
    createMany?: productCategoriesCreateManyPhotoInputEnvelope
    connect?: productCategoriesWhereUniqueInput | productCategoriesWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutThumbnailInput = {
    create?: XOR<productsCreateWithoutThumbnailInput, productsUncheckedCreateWithoutThumbnailInput> | productsCreateWithoutThumbnailInput[] | productsUncheckedCreateWithoutThumbnailInput[]
    connectOrCreate?: productsCreateOrConnectWithoutThumbnailInput | productsCreateOrConnectWithoutThumbnailInput[]
    createMany?: productsCreateManyThumbnailInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productGalleriesUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<productGalleriesCreateWithoutMediaInput, productGalleriesUncheckedCreateWithoutMediaInput> | productGalleriesCreateWithoutMediaInput[] | productGalleriesUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: productGalleriesCreateOrConnectWithoutMediaInput | productGalleriesCreateOrConnectWithoutMediaInput[]
    createMany?: productGalleriesCreateManyMediaInputEnvelope
    connect?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
  }

  export type users_metaUpdateOneRequiredWithoutMediaNestedInput = {
    create?: XOR<users_metaCreateWithoutMediaInput, users_metaUncheckedCreateWithoutMediaInput>
    connectOrCreate?: users_metaCreateOrConnectWithoutMediaInput
    upsert?: users_metaUpsertWithoutMediaInput
    connect?: users_metaWhereUniqueInput
    update?: XOR<XOR<users_metaUpdateToOneWithWhereWithoutMediaInput, users_metaUpdateWithoutMediaInput>, users_metaUncheckedUpdateWithoutMediaInput>
  }

  export type productCategoriesUpdateManyWithoutPhotoNestedInput = {
    create?: XOR<productCategoriesCreateWithoutPhotoInput, productCategoriesUncheckedCreateWithoutPhotoInput> | productCategoriesCreateWithoutPhotoInput[] | productCategoriesUncheckedCreateWithoutPhotoInput[]
    connectOrCreate?: productCategoriesCreateOrConnectWithoutPhotoInput | productCategoriesCreateOrConnectWithoutPhotoInput[]
    upsert?: productCategoriesUpsertWithWhereUniqueWithoutPhotoInput | productCategoriesUpsertWithWhereUniqueWithoutPhotoInput[]
    createMany?: productCategoriesCreateManyPhotoInputEnvelope
    set?: productCategoriesWhereUniqueInput | productCategoriesWhereUniqueInput[]
    disconnect?: productCategoriesWhereUniqueInput | productCategoriesWhereUniqueInput[]
    delete?: productCategoriesWhereUniqueInput | productCategoriesWhereUniqueInput[]
    connect?: productCategoriesWhereUniqueInput | productCategoriesWhereUniqueInput[]
    update?: productCategoriesUpdateWithWhereUniqueWithoutPhotoInput | productCategoriesUpdateWithWhereUniqueWithoutPhotoInput[]
    updateMany?: productCategoriesUpdateManyWithWhereWithoutPhotoInput | productCategoriesUpdateManyWithWhereWithoutPhotoInput[]
    deleteMany?: productCategoriesScalarWhereInput | productCategoriesScalarWhereInput[]
  }

  export type productsUpdateManyWithoutThumbnailNestedInput = {
    create?: XOR<productsCreateWithoutThumbnailInput, productsUncheckedCreateWithoutThumbnailInput> | productsCreateWithoutThumbnailInput[] | productsUncheckedCreateWithoutThumbnailInput[]
    connectOrCreate?: productsCreateOrConnectWithoutThumbnailInput | productsCreateOrConnectWithoutThumbnailInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutThumbnailInput | productsUpsertWithWhereUniqueWithoutThumbnailInput[]
    createMany?: productsCreateManyThumbnailInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutThumbnailInput | productsUpdateWithWhereUniqueWithoutThumbnailInput[]
    updateMany?: productsUpdateManyWithWhereWithoutThumbnailInput | productsUpdateManyWithWhereWithoutThumbnailInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type productGalleriesUpdateManyWithoutMediaNestedInput = {
    create?: XOR<productGalleriesCreateWithoutMediaInput, productGalleriesUncheckedCreateWithoutMediaInput> | productGalleriesCreateWithoutMediaInput[] | productGalleriesUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: productGalleriesCreateOrConnectWithoutMediaInput | productGalleriesCreateOrConnectWithoutMediaInput[]
    upsert?: productGalleriesUpsertWithWhereUniqueWithoutMediaInput | productGalleriesUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: productGalleriesCreateManyMediaInputEnvelope
    set?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
    disconnect?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
    delete?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
    connect?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
    update?: productGalleriesUpdateWithWhereUniqueWithoutMediaInput | productGalleriesUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: productGalleriesUpdateManyWithWhereWithoutMediaInput | productGalleriesUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: productGalleriesScalarWhereInput | productGalleriesScalarWhereInput[]
  }

  export type productCategoriesUncheckedUpdateManyWithoutPhotoNestedInput = {
    create?: XOR<productCategoriesCreateWithoutPhotoInput, productCategoriesUncheckedCreateWithoutPhotoInput> | productCategoriesCreateWithoutPhotoInput[] | productCategoriesUncheckedCreateWithoutPhotoInput[]
    connectOrCreate?: productCategoriesCreateOrConnectWithoutPhotoInput | productCategoriesCreateOrConnectWithoutPhotoInput[]
    upsert?: productCategoriesUpsertWithWhereUniqueWithoutPhotoInput | productCategoriesUpsertWithWhereUniqueWithoutPhotoInput[]
    createMany?: productCategoriesCreateManyPhotoInputEnvelope
    set?: productCategoriesWhereUniqueInput | productCategoriesWhereUniqueInput[]
    disconnect?: productCategoriesWhereUniqueInput | productCategoriesWhereUniqueInput[]
    delete?: productCategoriesWhereUniqueInput | productCategoriesWhereUniqueInput[]
    connect?: productCategoriesWhereUniqueInput | productCategoriesWhereUniqueInput[]
    update?: productCategoriesUpdateWithWhereUniqueWithoutPhotoInput | productCategoriesUpdateWithWhereUniqueWithoutPhotoInput[]
    updateMany?: productCategoriesUpdateManyWithWhereWithoutPhotoInput | productCategoriesUpdateManyWithWhereWithoutPhotoInput[]
    deleteMany?: productCategoriesScalarWhereInput | productCategoriesScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutThumbnailNestedInput = {
    create?: XOR<productsCreateWithoutThumbnailInput, productsUncheckedCreateWithoutThumbnailInput> | productsCreateWithoutThumbnailInput[] | productsUncheckedCreateWithoutThumbnailInput[]
    connectOrCreate?: productsCreateOrConnectWithoutThumbnailInput | productsCreateOrConnectWithoutThumbnailInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutThumbnailInput | productsUpsertWithWhereUniqueWithoutThumbnailInput[]
    createMany?: productsCreateManyThumbnailInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutThumbnailInput | productsUpdateWithWhereUniqueWithoutThumbnailInput[]
    updateMany?: productsUpdateManyWithWhereWithoutThumbnailInput | productsUpdateManyWithWhereWithoutThumbnailInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type productGalleriesUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<productGalleriesCreateWithoutMediaInput, productGalleriesUncheckedCreateWithoutMediaInput> | productGalleriesCreateWithoutMediaInput[] | productGalleriesUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: productGalleriesCreateOrConnectWithoutMediaInput | productGalleriesCreateOrConnectWithoutMediaInput[]
    upsert?: productGalleriesUpsertWithWhereUniqueWithoutMediaInput | productGalleriesUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: productGalleriesCreateManyMediaInputEnvelope
    set?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
    disconnect?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
    delete?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
    connect?: productGalleriesWhereUniqueInput | productGalleriesWhereUniqueInput[]
    update?: productGalleriesUpdateWithWhereUniqueWithoutMediaInput | productGalleriesUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: productGalleriesUpdateManyWithWhereWithoutMediaInput | productGalleriesUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: productGalleriesScalarWhereInput | productGalleriesScalarWhereInput[]
  }

  export type users_metaCreateNestedOneWithoutOrdersInput = {
    create?: XOR<users_metaCreateWithoutOrdersInput, users_metaUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: users_metaCreateOrConnectWithoutOrdersInput
    connect?: users_metaWhereUniqueInput
  }

  export type addressesCreateNestedOneWithoutBilling_ordersInput = {
    create?: XOR<addressesCreateWithoutBilling_ordersInput, addressesUncheckedCreateWithoutBilling_ordersInput>
    connectOrCreate?: addressesCreateOrConnectWithoutBilling_ordersInput
    connect?: addressesWhereUniqueInput
  }

  export type addressesCreateNestedOneWithoutShipping_ordersInput = {
    create?: XOR<addressesCreateWithoutShipping_ordersInput, addressesUncheckedCreateWithoutShipping_ordersInput>
    connectOrCreate?: addressesCreateOrConnectWithoutShipping_ordersInput
    connect?: addressesWhereUniqueInput
  }

  export type orderItemsCreateNestedManyWithoutOrderInput = {
    create?: XOR<orderItemsCreateWithoutOrderInput, orderItemsUncheckedCreateWithoutOrderInput> | orderItemsCreateWithoutOrderInput[] | orderItemsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: orderItemsCreateOrConnectWithoutOrderInput | orderItemsCreateOrConnectWithoutOrderInput[]
    createMany?: orderItemsCreateManyOrderInputEnvelope
    connect?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
  }

  export type orderItemsUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<orderItemsCreateWithoutOrderInput, orderItemsUncheckedCreateWithoutOrderInput> | orderItemsCreateWithoutOrderInput[] | orderItemsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: orderItemsCreateOrConnectWithoutOrderInput | orderItemsCreateOrConnectWithoutOrderInput[]
    createMany?: orderItemsCreateManyOrderInputEnvelope
    connect?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type users_metaUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<users_metaCreateWithoutOrdersInput, users_metaUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: users_metaCreateOrConnectWithoutOrdersInput
    upsert?: users_metaUpsertWithoutOrdersInput
    connect?: users_metaWhereUniqueInput
    update?: XOR<XOR<users_metaUpdateToOneWithWhereWithoutOrdersInput, users_metaUpdateWithoutOrdersInput>, users_metaUncheckedUpdateWithoutOrdersInput>
  }

  export type addressesUpdateOneRequiredWithoutBilling_ordersNestedInput = {
    create?: XOR<addressesCreateWithoutBilling_ordersInput, addressesUncheckedCreateWithoutBilling_ordersInput>
    connectOrCreate?: addressesCreateOrConnectWithoutBilling_ordersInput
    upsert?: addressesUpsertWithoutBilling_ordersInput
    connect?: addressesWhereUniqueInput
    update?: XOR<XOR<addressesUpdateToOneWithWhereWithoutBilling_ordersInput, addressesUpdateWithoutBilling_ordersInput>, addressesUncheckedUpdateWithoutBilling_ordersInput>
  }

  export type addressesUpdateOneRequiredWithoutShipping_ordersNestedInput = {
    create?: XOR<addressesCreateWithoutShipping_ordersInput, addressesUncheckedCreateWithoutShipping_ordersInput>
    connectOrCreate?: addressesCreateOrConnectWithoutShipping_ordersInput
    upsert?: addressesUpsertWithoutShipping_ordersInput
    connect?: addressesWhereUniqueInput
    update?: XOR<XOR<addressesUpdateToOneWithWhereWithoutShipping_ordersInput, addressesUpdateWithoutShipping_ordersInput>, addressesUncheckedUpdateWithoutShipping_ordersInput>
  }

  export type orderItemsUpdateManyWithoutOrderNestedInput = {
    create?: XOR<orderItemsCreateWithoutOrderInput, orderItemsUncheckedCreateWithoutOrderInput> | orderItemsCreateWithoutOrderInput[] | orderItemsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: orderItemsCreateOrConnectWithoutOrderInput | orderItemsCreateOrConnectWithoutOrderInput[]
    upsert?: orderItemsUpsertWithWhereUniqueWithoutOrderInput | orderItemsUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: orderItemsCreateManyOrderInputEnvelope
    set?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
    disconnect?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
    delete?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
    connect?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
    update?: orderItemsUpdateWithWhereUniqueWithoutOrderInput | orderItemsUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: orderItemsUpdateManyWithWhereWithoutOrderInput | orderItemsUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: orderItemsScalarWhereInput | orderItemsScalarWhereInput[]
  }

  export type orderItemsUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<orderItemsCreateWithoutOrderInput, orderItemsUncheckedCreateWithoutOrderInput> | orderItemsCreateWithoutOrderInput[] | orderItemsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: orderItemsCreateOrConnectWithoutOrderInput | orderItemsCreateOrConnectWithoutOrderInput[]
    upsert?: orderItemsUpsertWithWhereUniqueWithoutOrderInput | orderItemsUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: orderItemsCreateManyOrderInputEnvelope
    set?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
    disconnect?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
    delete?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
    connect?: orderItemsWhereUniqueInput | orderItemsWhereUniqueInput[]
    update?: orderItemsUpdateWithWhereUniqueWithoutOrderInput | orderItemsUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: orderItemsUpdateManyWithWhereWithoutOrderInput | orderItemsUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: orderItemsScalarWhereInput | orderItemsScalarWhereInput[]
  }

  export type productsCreateNestedOneWithoutOrder_itemsInput = {
    create?: XOR<productsCreateWithoutOrder_itemsInput, productsUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: productsCreateOrConnectWithoutOrder_itemsInput
    connect?: productsWhereUniqueInput
  }

  export type ordersCreateNestedOneWithoutItemsInput = {
    create?: XOR<ordersCreateWithoutItemsInput, ordersUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ordersCreateOrConnectWithoutItemsInput
    connect?: ordersWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutOrder_itemsNestedInput = {
    create?: XOR<productsCreateWithoutOrder_itemsInput, productsUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: productsCreateOrConnectWithoutOrder_itemsInput
    upsert?: productsUpsertWithoutOrder_itemsInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutOrder_itemsInput, productsUpdateWithoutOrder_itemsInput>, productsUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type ordersUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<ordersCreateWithoutItemsInput, ordersUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ordersCreateOrConnectWithoutItemsInput
    upsert?: ordersUpsertWithoutItemsInput
    connect?: ordersWhereUniqueInput
    update?: XOR<XOR<ordersUpdateToOneWithWhereWithoutItemsInput, ordersUpdateWithoutItemsInput>, ordersUncheckedUpdateWithoutItemsInput>
  }

  export type users_metaCreateNestedOneWithoutWishlistsInput = {
    create?: XOR<users_metaCreateWithoutWishlistsInput, users_metaUncheckedCreateWithoutWishlistsInput>
    connectOrCreate?: users_metaCreateOrConnectWithoutWishlistsInput
    connect?: users_metaWhereUniqueInput
  }

  export type productsCreateNestedOneWithoutWishlistsInput = {
    create?: XOR<productsCreateWithoutWishlistsInput, productsUncheckedCreateWithoutWishlistsInput>
    connectOrCreate?: productsCreateOrConnectWithoutWishlistsInput
    connect?: productsWhereUniqueInput
  }

  export type users_metaUpdateOneRequiredWithoutWishlistsNestedInput = {
    create?: XOR<users_metaCreateWithoutWishlistsInput, users_metaUncheckedCreateWithoutWishlistsInput>
    connectOrCreate?: users_metaCreateOrConnectWithoutWishlistsInput
    upsert?: users_metaUpsertWithoutWishlistsInput
    connect?: users_metaWhereUniqueInput
    update?: XOR<XOR<users_metaUpdateToOneWithWhereWithoutWishlistsInput, users_metaUpdateWithoutWishlistsInput>, users_metaUncheckedUpdateWithoutWishlistsInput>
  }

  export type productsUpdateOneRequiredWithoutWishlistsNestedInput = {
    create?: XOR<productsCreateWithoutWishlistsInput, productsUncheckedCreateWithoutWishlistsInput>
    connectOrCreate?: productsCreateOrConnectWithoutWishlistsInput
    upsert?: productsUpsertWithoutWishlistsInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutWishlistsInput, productsUpdateWithoutWishlistsInput>, productsUncheckedUpdateWithoutWishlistsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumAddressTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AddressType | EnumAddressTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AddressType[]
    notIn?: $Enums.AddressType[]
    not?: NestedEnumAddressTypeFilter<$PrismaModel> | $Enums.AddressType
  }

  export type NestedEnumAddressTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AddressType | EnumAddressTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AddressType[]
    notIn?: $Enums.AddressType[]
    not?: NestedEnumAddressTypeWithAggregatesFilter<$PrismaModel> | $Enums.AddressType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAddressTypeFilter<$PrismaModel>
    _max?: NestedEnumAddressTypeFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumStockStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.StockStatus | EnumStockStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StockStatus[]
    notIn?: $Enums.StockStatus[]
    not?: NestedEnumStockStatusFilter<$PrismaModel> | $Enums.StockStatus
  }

  export type NestedEnumProductStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductStatus | EnumProductStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProductStatus[]
    notIn?: $Enums.ProductStatus[]
    not?: NestedEnumProductStatusFilter<$PrismaModel> | $Enums.ProductStatus
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumStockStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StockStatus | EnumStockStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StockStatus[]
    notIn?: $Enums.StockStatus[]
    not?: NestedEnumStockStatusWithAggregatesFilter<$PrismaModel> | $Enums.StockStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStockStatusFilter<$PrismaModel>
    _max?: NestedEnumStockStatusFilter<$PrismaModel>
  }

  export type NestedEnumProductStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductStatus | EnumProductStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProductStatus[]
    notIn?: $Enums.ProductStatus[]
    not?: NestedEnumProductStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProductStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductStatusFilter<$PrismaModel>
    _max?: NestedEnumProductStatusFilter<$PrismaModel>
  }

  export type NestedEnumProductReviewStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductReviewStatus | EnumProductReviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProductReviewStatus[]
    notIn?: $Enums.ProductReviewStatus[]
    not?: NestedEnumProductReviewStatusFilter<$PrismaModel> | $Enums.ProductReviewStatus
  }

  export type NestedEnumProductReviewStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductReviewStatus | EnumProductReviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProductReviewStatus[]
    notIn?: $Enums.ProductReviewStatus[]
    not?: NestedEnumProductReviewStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProductReviewStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductReviewStatusFilter<$PrismaModel>
    _max?: NestedEnumProductReviewStatusFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[]
    notIn?: $Enums.OrderStatus[]
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[]
    notIn?: $Enums.OrderStatus[]
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type users_metaCreateWithoutUserInput = {
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: productsCreateNestedManyWithoutAuthorInput
    carts?: productCartsCreateNestedManyWithoutUserInput
    media?: mediaCreateNestedManyWithoutUserInput
    addresses?: addressesCreateNestedManyWithoutUserInput
    orders?: ordersCreateNestedManyWithoutUserInput
    wishlists?: wishlistsCreateNestedManyWithoutUserInput
    product_reviews?: productReviewsCreateNestedManyWithoutUserInput
  }

  export type users_metaUncheckedCreateWithoutUserInput = {
    id?: number
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: productsUncheckedCreateNestedManyWithoutAuthorInput
    carts?: productCartsUncheckedCreateNestedManyWithoutUserInput
    media?: mediaUncheckedCreateNestedManyWithoutUserInput
    addresses?: addressesUncheckedCreateNestedManyWithoutUserInput
    orders?: ordersUncheckedCreateNestedManyWithoutUserInput
    wishlists?: wishlistsUncheckedCreateNestedManyWithoutUserInput
    product_reviews?: productReviewsUncheckedCreateNestedManyWithoutUserInput
  }

  export type users_metaCreateOrConnectWithoutUserInput = {
    where: users_metaWhereUniqueInput
    create: XOR<users_metaCreateWithoutUserInput, users_metaUncheckedCreateWithoutUserInput>
  }

  export type users_metaUpsertWithoutUserInput = {
    update: XOR<users_metaUpdateWithoutUserInput, users_metaUncheckedUpdateWithoutUserInput>
    create: XOR<users_metaCreateWithoutUserInput, users_metaUncheckedCreateWithoutUserInput>
    where?: users_metaWhereInput
  }

  export type users_metaUpdateToOneWithWhereWithoutUserInput = {
    where?: users_metaWhereInput
    data: XOR<users_metaUpdateWithoutUserInput, users_metaUncheckedUpdateWithoutUserInput>
  }

  export type users_metaUpdateWithoutUserInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productsUpdateManyWithoutAuthorNestedInput
    carts?: productCartsUpdateManyWithoutUserNestedInput
    media?: mediaUpdateManyWithoutUserNestedInput
    addresses?: addressesUpdateManyWithoutUserNestedInput
    orders?: ordersUpdateManyWithoutUserNestedInput
    wishlists?: wishlistsUpdateManyWithoutUserNestedInput
    product_reviews?: productReviewsUpdateManyWithoutUserNestedInput
  }

  export type users_metaUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productsUncheckedUpdateManyWithoutAuthorNestedInput
    carts?: productCartsUncheckedUpdateManyWithoutUserNestedInput
    media?: mediaUncheckedUpdateManyWithoutUserNestedInput
    addresses?: addressesUncheckedUpdateManyWithoutUserNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUserNestedInput
    wishlists?: wishlistsUncheckedUpdateManyWithoutUserNestedInput
    product_reviews?: productReviewsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type usersCreateWithoutMetaInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersUncheckedCreateWithoutMetaInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersCreateOrConnectWithoutMetaInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutMetaInput, usersUncheckedCreateWithoutMetaInput>
  }

  export type productsCreateWithoutAuthorInput = {
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    thumbnail?: mediaCreateNestedOneWithoutProductInput
    categories?: categoriesOnProductsCreateNestedManyWithoutProductInput
    carts?: productCartsCreateNestedManyWithoutProductInput
    galleries?: productGalleriesCreateNestedManyWithoutProductInput
    order_items?: orderItemsCreateNestedManyWithoutProductInput
    wishlists?: wishlistsCreateNestedManyWithoutProductInput
    reviews?: productReviewsCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutAuthorInput = {
    id?: number
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    thumbnailId?: number | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: categoriesOnProductsUncheckedCreateNestedManyWithoutProductInput
    carts?: productCartsUncheckedCreateNestedManyWithoutProductInput
    galleries?: productGalleriesUncheckedCreateNestedManyWithoutProductInput
    order_items?: orderItemsUncheckedCreateNestedManyWithoutProductInput
    wishlists?: wishlistsUncheckedCreateNestedManyWithoutProductInput
    reviews?: productReviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutAuthorInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutAuthorInput, productsUncheckedCreateWithoutAuthorInput>
  }

  export type productsCreateManyAuthorInputEnvelope = {
    data: productsCreateManyAuthorInput | productsCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type productCartsCreateWithoutUserInput = {
    quantity: number
    product: productsCreateNestedOneWithoutCartsInput
  }

  export type productCartsUncheckedCreateWithoutUserInput = {
    id?: number
    productId: number
    quantity: number
  }

  export type productCartsCreateOrConnectWithoutUserInput = {
    where: productCartsWhereUniqueInput
    create: XOR<productCartsCreateWithoutUserInput, productCartsUncheckedCreateWithoutUserInput>
  }

  export type productCartsCreateManyUserInputEnvelope = {
    data: productCartsCreateManyUserInput | productCartsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type mediaCreateWithoutUserInput = {
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
    productCategories?: productCategoriesCreateNestedManyWithoutPhotoInput
    product?: productsCreateNestedManyWithoutThumbnailInput
    galleries?: productGalleriesCreateNestedManyWithoutMediaInput
  }

  export type mediaUncheckedCreateWithoutUserInput = {
    id?: number
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
    productCategories?: productCategoriesUncheckedCreateNestedManyWithoutPhotoInput
    product?: productsUncheckedCreateNestedManyWithoutThumbnailInput
    galleries?: productGalleriesUncheckedCreateNestedManyWithoutMediaInput
  }

  export type mediaCreateOrConnectWithoutUserInput = {
    where: mediaWhereUniqueInput
    create: XOR<mediaCreateWithoutUserInput, mediaUncheckedCreateWithoutUserInput>
  }

  export type mediaCreateManyUserInputEnvelope = {
    data: mediaCreateManyUserInput | mediaCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type addressesCreateWithoutUserInput = {
    type?: $Enums.AddressType
    full_name: string
    email: string
    phone: string
    street_address: string
    street_address_2?: string | null
    district: string
    country: string
    zip_code: number
    createdAt?: Date | string
    updatedAt?: Date | string
    billing_orders?: ordersCreateNestedManyWithoutBilling_addressInput
    shipping_orders?: ordersCreateNestedManyWithoutShipping_addressInput
  }

  export type addressesUncheckedCreateWithoutUserInput = {
    id?: number
    type?: $Enums.AddressType
    full_name: string
    email: string
    phone: string
    street_address: string
    street_address_2?: string | null
    district: string
    country: string
    zip_code: number
    createdAt?: Date | string
    updatedAt?: Date | string
    billing_orders?: ordersUncheckedCreateNestedManyWithoutBilling_addressInput
    shipping_orders?: ordersUncheckedCreateNestedManyWithoutShipping_addressInput
  }

  export type addressesCreateOrConnectWithoutUserInput = {
    where: addressesWhereUniqueInput
    create: XOR<addressesCreateWithoutUserInput, addressesUncheckedCreateWithoutUserInput>
  }

  export type addressesCreateManyUserInputEnvelope = {
    data: addressesCreateManyUserInput | addressesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ordersCreateWithoutUserInput = {
    order_status?: $Enums.OrderStatus
    payment_method: string
    payment_status?: $Enums.PaymentStatus
    sub_total: number
    tax_rate: number
    tax_total: number
    discount: number
    order_total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    billing_address: addressesCreateNestedOneWithoutBilling_ordersInput
    shipping_address: addressesCreateNestedOneWithoutShipping_ordersInput
    items?: orderItemsCreateNestedManyWithoutOrderInput
  }

  export type ordersUncheckedCreateWithoutUserInput = {
    id?: number
    order_status?: $Enums.OrderStatus
    payment_method: string
    payment_status?: $Enums.PaymentStatus
    sub_total: number
    tax_rate: number
    tax_total: number
    discount: number
    order_total: number
    billing_address_id: number
    shipping_address_id: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: orderItemsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type ordersCreateOrConnectWithoutUserInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput>
  }

  export type ordersCreateManyUserInputEnvelope = {
    data: ordersCreateManyUserInput | ordersCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type wishlistsCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    product: productsCreateNestedOneWithoutWishlistsInput
  }

  export type wishlistsUncheckedCreateWithoutUserInput = {
    id?: number
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type wishlistsCreateOrConnectWithoutUserInput = {
    where: wishlistsWhereUniqueInput
    create: XOR<wishlistsCreateWithoutUserInput, wishlistsUncheckedCreateWithoutUserInput>
  }

  export type wishlistsCreateManyUserInputEnvelope = {
    data: wishlistsCreateManyUserInput | wishlistsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type productReviewsCreateWithoutUserInput = {
    rating: number
    comment?: string | null
    status?: $Enums.ProductReviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    product: productsCreateNestedOneWithoutReviewsInput
  }

  export type productReviewsUncheckedCreateWithoutUserInput = {
    id?: number
    rating: number
    comment?: string | null
    status?: $Enums.ProductReviewStatus
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type productReviewsCreateOrConnectWithoutUserInput = {
    where: productReviewsWhereUniqueInput
    create: XOR<productReviewsCreateWithoutUserInput, productReviewsUncheckedCreateWithoutUserInput>
  }

  export type productReviewsCreateManyUserInputEnvelope = {
    data: productReviewsCreateManyUserInput | productReviewsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutMetaInput = {
    update: XOR<usersUpdateWithoutMetaInput, usersUncheckedUpdateWithoutMetaInput>
    create: XOR<usersCreateWithoutMetaInput, usersUncheckedCreateWithoutMetaInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutMetaInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutMetaInput, usersUncheckedUpdateWithoutMetaInput>
  }

  export type usersUpdateWithoutMetaInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateWithoutMetaInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productsUpsertWithWhereUniqueWithoutAuthorInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutAuthorInput, productsUncheckedUpdateWithoutAuthorInput>
    create: XOR<productsCreateWithoutAuthorInput, productsUncheckedCreateWithoutAuthorInput>
  }

  export type productsUpdateWithWhereUniqueWithoutAuthorInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutAuthorInput, productsUncheckedUpdateWithoutAuthorInput>
  }

  export type productsUpdateManyWithWhereWithoutAuthorInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutAuthorInput>
  }

  export type productsScalarWhereInput = {
    AND?: productsScalarWhereInput | productsScalarWhereInput[]
    OR?: productsScalarWhereInput[]
    NOT?: productsScalarWhereInput | productsScalarWhereInput[]
    id?: IntFilter<"products"> | number
    authorId?: IntFilter<"products"> | number
    name?: StringFilter<"products"> | string
    slug?: StringFilter<"products"> | string
    price?: FloatFilter<"products"> | number
    regular_price?: FloatFilter<"products"> | number
    sale_price?: FloatNullableFilter<"products"> | number | null
    stock_quantity?: IntNullableFilter<"products"> | number | null
    stock_status?: EnumStockStatusFilter<"products"> | $Enums.StockStatus
    sku?: StringNullableFilter<"products"> | string | null
    description?: StringNullableFilter<"products"> | string | null
    short_description?: StringNullableFilter<"products"> | string | null
    thumbnailId?: IntNullableFilter<"products"> | number | null
    weight?: FloatNullableFilter<"products"> | number | null
    length?: FloatNullableFilter<"products"> | number | null
    width?: FloatNullableFilter<"products"> | number | null
    height?: FloatNullableFilter<"products"> | number | null
    status?: EnumProductStatusFilter<"products"> | $Enums.ProductStatus
    createdAt?: DateTimeFilter<"products"> | Date | string
    updatedAt?: DateTimeFilter<"products"> | Date | string
  }

  export type productCartsUpsertWithWhereUniqueWithoutUserInput = {
    where: productCartsWhereUniqueInput
    update: XOR<productCartsUpdateWithoutUserInput, productCartsUncheckedUpdateWithoutUserInput>
    create: XOR<productCartsCreateWithoutUserInput, productCartsUncheckedCreateWithoutUserInput>
  }

  export type productCartsUpdateWithWhereUniqueWithoutUserInput = {
    where: productCartsWhereUniqueInput
    data: XOR<productCartsUpdateWithoutUserInput, productCartsUncheckedUpdateWithoutUserInput>
  }

  export type productCartsUpdateManyWithWhereWithoutUserInput = {
    where: productCartsScalarWhereInput
    data: XOR<productCartsUpdateManyMutationInput, productCartsUncheckedUpdateManyWithoutUserInput>
  }

  export type productCartsScalarWhereInput = {
    AND?: productCartsScalarWhereInput | productCartsScalarWhereInput[]
    OR?: productCartsScalarWhereInput[]
    NOT?: productCartsScalarWhereInput | productCartsScalarWhereInput[]
    id?: IntFilter<"productCarts"> | number
    productId?: IntFilter<"productCarts"> | number
    userId?: IntFilter<"productCarts"> | number
    quantity?: IntFilter<"productCarts"> | number
  }

  export type mediaUpsertWithWhereUniqueWithoutUserInput = {
    where: mediaWhereUniqueInput
    update: XOR<mediaUpdateWithoutUserInput, mediaUncheckedUpdateWithoutUserInput>
    create: XOR<mediaCreateWithoutUserInput, mediaUncheckedCreateWithoutUserInput>
  }

  export type mediaUpdateWithWhereUniqueWithoutUserInput = {
    where: mediaWhereUniqueInput
    data: XOR<mediaUpdateWithoutUserInput, mediaUncheckedUpdateWithoutUserInput>
  }

  export type mediaUpdateManyWithWhereWithoutUserInput = {
    where: mediaScalarWhereInput
    data: XOR<mediaUpdateManyMutationInput, mediaUncheckedUpdateManyWithoutUserInput>
  }

  export type mediaScalarWhereInput = {
    AND?: mediaScalarWhereInput | mediaScalarWhereInput[]
    OR?: mediaScalarWhereInput[]
    NOT?: mediaScalarWhereInput | mediaScalarWhereInput[]
    id?: IntFilter<"media"> | number
    url?: StringFilter<"media"> | string
    userId?: IntFilter<"media"> | number
    createdAt?: DateTimeFilter<"media"> | Date | string
    updatedAt?: DateTimeFilter<"media"> | Date | string
  }

  export type addressesUpsertWithWhereUniqueWithoutUserInput = {
    where: addressesWhereUniqueInput
    update: XOR<addressesUpdateWithoutUserInput, addressesUncheckedUpdateWithoutUserInput>
    create: XOR<addressesCreateWithoutUserInput, addressesUncheckedCreateWithoutUserInput>
  }

  export type addressesUpdateWithWhereUniqueWithoutUserInput = {
    where: addressesWhereUniqueInput
    data: XOR<addressesUpdateWithoutUserInput, addressesUncheckedUpdateWithoutUserInput>
  }

  export type addressesUpdateManyWithWhereWithoutUserInput = {
    where: addressesScalarWhereInput
    data: XOR<addressesUpdateManyMutationInput, addressesUncheckedUpdateManyWithoutUserInput>
  }

  export type addressesScalarWhereInput = {
    AND?: addressesScalarWhereInput | addressesScalarWhereInput[]
    OR?: addressesScalarWhereInput[]
    NOT?: addressesScalarWhereInput | addressesScalarWhereInput[]
    id?: IntFilter<"addresses"> | number
    type?: EnumAddressTypeFilter<"addresses"> | $Enums.AddressType
    full_name?: StringFilter<"addresses"> | string
    email?: StringFilter<"addresses"> | string
    phone?: StringFilter<"addresses"> | string
    street_address?: StringFilter<"addresses"> | string
    street_address_2?: StringNullableFilter<"addresses"> | string | null
    district?: StringFilter<"addresses"> | string
    country?: StringFilter<"addresses"> | string
    zip_code?: IntFilter<"addresses"> | number
    userId?: IntFilter<"addresses"> | number
    createdAt?: DateTimeFilter<"addresses"> | Date | string
    updatedAt?: DateTimeFilter<"addresses"> | Date | string
  }

  export type ordersUpsertWithWhereUniqueWithoutUserInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutUserInput, ordersUncheckedUpdateWithoutUserInput>
    create: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutUserInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutUserInput, ordersUncheckedUpdateWithoutUserInput>
  }

  export type ordersUpdateManyWithWhereWithoutUserInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutUserInput>
  }

  export type ordersScalarWhereInput = {
    AND?: ordersScalarWhereInput | ordersScalarWhereInput[]
    OR?: ordersScalarWhereInput[]
    NOT?: ordersScalarWhereInput | ordersScalarWhereInput[]
    id?: IntFilter<"orders"> | number
    order_status?: EnumOrderStatusFilter<"orders"> | $Enums.OrderStatus
    payment_method?: StringFilter<"orders"> | string
    payment_status?: EnumPaymentStatusFilter<"orders"> | $Enums.PaymentStatus
    sub_total?: FloatFilter<"orders"> | number
    tax_rate?: FloatFilter<"orders"> | number
    tax_total?: FloatFilter<"orders"> | number
    discount?: FloatFilter<"orders"> | number
    order_total?: FloatFilter<"orders"> | number
    userId?: IntFilter<"orders"> | number
    billing_address_id?: IntFilter<"orders"> | number
    shipping_address_id?: IntFilter<"orders"> | number
    createdAt?: DateTimeFilter<"orders"> | Date | string
    updatedAt?: DateTimeFilter<"orders"> | Date | string
  }

  export type wishlistsUpsertWithWhereUniqueWithoutUserInput = {
    where: wishlistsWhereUniqueInput
    update: XOR<wishlistsUpdateWithoutUserInput, wishlistsUncheckedUpdateWithoutUserInput>
    create: XOR<wishlistsCreateWithoutUserInput, wishlistsUncheckedCreateWithoutUserInput>
  }

  export type wishlistsUpdateWithWhereUniqueWithoutUserInput = {
    where: wishlistsWhereUniqueInput
    data: XOR<wishlistsUpdateWithoutUserInput, wishlistsUncheckedUpdateWithoutUserInput>
  }

  export type wishlistsUpdateManyWithWhereWithoutUserInput = {
    where: wishlistsScalarWhereInput
    data: XOR<wishlistsUpdateManyMutationInput, wishlistsUncheckedUpdateManyWithoutUserInput>
  }

  export type wishlistsScalarWhereInput = {
    AND?: wishlistsScalarWhereInput | wishlistsScalarWhereInput[]
    OR?: wishlistsScalarWhereInput[]
    NOT?: wishlistsScalarWhereInput | wishlistsScalarWhereInput[]
    id?: IntFilter<"wishlists"> | number
    userId?: IntFilter<"wishlists"> | number
    productId?: IntFilter<"wishlists"> | number
    createdAt?: DateTimeFilter<"wishlists"> | Date | string
    updatedAt?: DateTimeFilter<"wishlists"> | Date | string
  }

  export type productReviewsUpsertWithWhereUniqueWithoutUserInput = {
    where: productReviewsWhereUniqueInput
    update: XOR<productReviewsUpdateWithoutUserInput, productReviewsUncheckedUpdateWithoutUserInput>
    create: XOR<productReviewsCreateWithoutUserInput, productReviewsUncheckedCreateWithoutUserInput>
  }

  export type productReviewsUpdateWithWhereUniqueWithoutUserInput = {
    where: productReviewsWhereUniqueInput
    data: XOR<productReviewsUpdateWithoutUserInput, productReviewsUncheckedUpdateWithoutUserInput>
  }

  export type productReviewsUpdateManyWithWhereWithoutUserInput = {
    where: productReviewsScalarWhereInput
    data: XOR<productReviewsUpdateManyMutationInput, productReviewsUncheckedUpdateManyWithoutUserInput>
  }

  export type productReviewsScalarWhereInput = {
    AND?: productReviewsScalarWhereInput | productReviewsScalarWhereInput[]
    OR?: productReviewsScalarWhereInput[]
    NOT?: productReviewsScalarWhereInput | productReviewsScalarWhereInput[]
    id?: IntFilter<"productReviews"> | number
    rating?: IntFilter<"productReviews"> | number
    comment?: StringNullableFilter<"productReviews"> | string | null
    status?: EnumProductReviewStatusFilter<"productReviews"> | $Enums.ProductReviewStatus
    userId?: IntFilter<"productReviews"> | number
    productId?: IntFilter<"productReviews"> | number
    createdAt?: DateTimeFilter<"productReviews"> | Date | string
    updatedAt?: DateTimeFilter<"productReviews"> | Date | string
  }

  export type users_metaCreateWithoutAddressesInput = {
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: usersCreateNestedOneWithoutMetaInput
    products?: productsCreateNestedManyWithoutAuthorInput
    carts?: productCartsCreateNestedManyWithoutUserInput
    media?: mediaCreateNestedManyWithoutUserInput
    orders?: ordersCreateNestedManyWithoutUserInput
    wishlists?: wishlistsCreateNestedManyWithoutUserInput
    product_reviews?: productReviewsCreateNestedManyWithoutUserInput
  }

  export type users_metaUncheckedCreateWithoutAddressesInput = {
    id?: number
    userId: number
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: productsUncheckedCreateNestedManyWithoutAuthorInput
    carts?: productCartsUncheckedCreateNestedManyWithoutUserInput
    media?: mediaUncheckedCreateNestedManyWithoutUserInput
    orders?: ordersUncheckedCreateNestedManyWithoutUserInput
    wishlists?: wishlistsUncheckedCreateNestedManyWithoutUserInput
    product_reviews?: productReviewsUncheckedCreateNestedManyWithoutUserInput
  }

  export type users_metaCreateOrConnectWithoutAddressesInput = {
    where: users_metaWhereUniqueInput
    create: XOR<users_metaCreateWithoutAddressesInput, users_metaUncheckedCreateWithoutAddressesInput>
  }

  export type ordersCreateWithoutBilling_addressInput = {
    order_status?: $Enums.OrderStatus
    payment_method: string
    payment_status?: $Enums.PaymentStatus
    sub_total: number
    tax_rate: number
    tax_total: number
    discount: number
    order_total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: users_metaCreateNestedOneWithoutOrdersInput
    shipping_address: addressesCreateNestedOneWithoutShipping_ordersInput
    items?: orderItemsCreateNestedManyWithoutOrderInput
  }

  export type ordersUncheckedCreateWithoutBilling_addressInput = {
    id?: number
    order_status?: $Enums.OrderStatus
    payment_method: string
    payment_status?: $Enums.PaymentStatus
    sub_total: number
    tax_rate: number
    tax_total: number
    discount: number
    order_total: number
    userId: number
    shipping_address_id: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: orderItemsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type ordersCreateOrConnectWithoutBilling_addressInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutBilling_addressInput, ordersUncheckedCreateWithoutBilling_addressInput>
  }

  export type ordersCreateManyBilling_addressInputEnvelope = {
    data: ordersCreateManyBilling_addressInput | ordersCreateManyBilling_addressInput[]
    skipDuplicates?: boolean
  }

  export type ordersCreateWithoutShipping_addressInput = {
    order_status?: $Enums.OrderStatus
    payment_method: string
    payment_status?: $Enums.PaymentStatus
    sub_total: number
    tax_rate: number
    tax_total: number
    discount: number
    order_total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: users_metaCreateNestedOneWithoutOrdersInput
    billing_address: addressesCreateNestedOneWithoutBilling_ordersInput
    items?: orderItemsCreateNestedManyWithoutOrderInput
  }

  export type ordersUncheckedCreateWithoutShipping_addressInput = {
    id?: number
    order_status?: $Enums.OrderStatus
    payment_method: string
    payment_status?: $Enums.PaymentStatus
    sub_total: number
    tax_rate: number
    tax_total: number
    discount: number
    order_total: number
    userId: number
    billing_address_id: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: orderItemsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type ordersCreateOrConnectWithoutShipping_addressInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutShipping_addressInput, ordersUncheckedCreateWithoutShipping_addressInput>
  }

  export type ordersCreateManyShipping_addressInputEnvelope = {
    data: ordersCreateManyShipping_addressInput | ordersCreateManyShipping_addressInput[]
    skipDuplicates?: boolean
  }

  export type users_metaUpsertWithoutAddressesInput = {
    update: XOR<users_metaUpdateWithoutAddressesInput, users_metaUncheckedUpdateWithoutAddressesInput>
    create: XOR<users_metaCreateWithoutAddressesInput, users_metaUncheckedCreateWithoutAddressesInput>
    where?: users_metaWhereInput
  }

  export type users_metaUpdateToOneWithWhereWithoutAddressesInput = {
    where?: users_metaWhereInput
    data: XOR<users_metaUpdateWithoutAddressesInput, users_metaUncheckedUpdateWithoutAddressesInput>
  }

  export type users_metaUpdateWithoutAddressesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: usersUpdateOneRequiredWithoutMetaNestedInput
    products?: productsUpdateManyWithoutAuthorNestedInput
    carts?: productCartsUpdateManyWithoutUserNestedInput
    media?: mediaUpdateManyWithoutUserNestedInput
    orders?: ordersUpdateManyWithoutUserNestedInput
    wishlists?: wishlistsUpdateManyWithoutUserNestedInput
    product_reviews?: productReviewsUpdateManyWithoutUserNestedInput
  }

  export type users_metaUncheckedUpdateWithoutAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productsUncheckedUpdateManyWithoutAuthorNestedInput
    carts?: productCartsUncheckedUpdateManyWithoutUserNestedInput
    media?: mediaUncheckedUpdateManyWithoutUserNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUserNestedInput
    wishlists?: wishlistsUncheckedUpdateManyWithoutUserNestedInput
    product_reviews?: productReviewsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ordersUpsertWithWhereUniqueWithoutBilling_addressInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutBilling_addressInput, ordersUncheckedUpdateWithoutBilling_addressInput>
    create: XOR<ordersCreateWithoutBilling_addressInput, ordersUncheckedCreateWithoutBilling_addressInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutBilling_addressInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutBilling_addressInput, ordersUncheckedUpdateWithoutBilling_addressInput>
  }

  export type ordersUpdateManyWithWhereWithoutBilling_addressInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutBilling_addressInput>
  }

  export type ordersUpsertWithWhereUniqueWithoutShipping_addressInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutShipping_addressInput, ordersUncheckedUpdateWithoutShipping_addressInput>
    create: XOR<ordersCreateWithoutShipping_addressInput, ordersUncheckedCreateWithoutShipping_addressInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutShipping_addressInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutShipping_addressInput, ordersUncheckedUpdateWithoutShipping_addressInput>
  }

  export type ordersUpdateManyWithWhereWithoutShipping_addressInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutShipping_addressInput>
  }

  export type users_metaCreateWithoutProductsInput = {
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: usersCreateNestedOneWithoutMetaInput
    carts?: productCartsCreateNestedManyWithoutUserInput
    media?: mediaCreateNestedManyWithoutUserInput
    addresses?: addressesCreateNestedManyWithoutUserInput
    orders?: ordersCreateNestedManyWithoutUserInput
    wishlists?: wishlistsCreateNestedManyWithoutUserInput
    product_reviews?: productReviewsCreateNestedManyWithoutUserInput
  }

  export type users_metaUncheckedCreateWithoutProductsInput = {
    id?: number
    userId: number
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    carts?: productCartsUncheckedCreateNestedManyWithoutUserInput
    media?: mediaUncheckedCreateNestedManyWithoutUserInput
    addresses?: addressesUncheckedCreateNestedManyWithoutUserInput
    orders?: ordersUncheckedCreateNestedManyWithoutUserInput
    wishlists?: wishlistsUncheckedCreateNestedManyWithoutUserInput
    product_reviews?: productReviewsUncheckedCreateNestedManyWithoutUserInput
  }

  export type users_metaCreateOrConnectWithoutProductsInput = {
    where: users_metaWhereUniqueInput
    create: XOR<users_metaCreateWithoutProductsInput, users_metaUncheckedCreateWithoutProductsInput>
  }

  export type mediaCreateWithoutProductInput = {
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: users_metaCreateNestedOneWithoutMediaInput
    productCategories?: productCategoriesCreateNestedManyWithoutPhotoInput
    galleries?: productGalleriesCreateNestedManyWithoutMediaInput
  }

  export type mediaUncheckedCreateWithoutProductInput = {
    id?: number
    url: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    productCategories?: productCategoriesUncheckedCreateNestedManyWithoutPhotoInput
    galleries?: productGalleriesUncheckedCreateNestedManyWithoutMediaInput
  }

  export type mediaCreateOrConnectWithoutProductInput = {
    where: mediaWhereUniqueInput
    create: XOR<mediaCreateWithoutProductInput, mediaUncheckedCreateWithoutProductInput>
  }

  export type categoriesOnProductsCreateWithoutProductInput = {
    category: productCategoriesCreateNestedOneWithoutProductsInput
  }

  export type categoriesOnProductsUncheckedCreateWithoutProductInput = {
    categoryId: number
  }

  export type categoriesOnProductsCreateOrConnectWithoutProductInput = {
    where: categoriesOnProductsWhereUniqueInput
    create: XOR<categoriesOnProductsCreateWithoutProductInput, categoriesOnProductsUncheckedCreateWithoutProductInput>
  }

  export type categoriesOnProductsCreateManyProductInputEnvelope = {
    data: categoriesOnProductsCreateManyProductInput | categoriesOnProductsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type productCartsCreateWithoutProductInput = {
    quantity: number
    user: users_metaCreateNestedOneWithoutCartsInput
  }

  export type productCartsUncheckedCreateWithoutProductInput = {
    id?: number
    userId: number
    quantity: number
  }

  export type productCartsCreateOrConnectWithoutProductInput = {
    where: productCartsWhereUniqueInput
    create: XOR<productCartsCreateWithoutProductInput, productCartsUncheckedCreateWithoutProductInput>
  }

  export type productCartsCreateManyProductInputEnvelope = {
    data: productCartsCreateManyProductInput | productCartsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type productGalleriesCreateWithoutProductInput = {
    media: mediaCreateNestedOneWithoutGalleriesInput
  }

  export type productGalleriesUncheckedCreateWithoutProductInput = {
    mediaId: number
  }

  export type productGalleriesCreateOrConnectWithoutProductInput = {
    where: productGalleriesWhereUniqueInput
    create: XOR<productGalleriesCreateWithoutProductInput, productGalleriesUncheckedCreateWithoutProductInput>
  }

  export type productGalleriesCreateManyProductInputEnvelope = {
    data: productGalleriesCreateManyProductInput | productGalleriesCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type orderItemsCreateWithoutProductInput = {
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    order: ordersCreateNestedOneWithoutItemsInput
  }

  export type orderItemsUncheckedCreateWithoutProductInput = {
    id?: number
    quantity: number
    price: number
    orderId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderItemsCreateOrConnectWithoutProductInput = {
    where: orderItemsWhereUniqueInput
    create: XOR<orderItemsCreateWithoutProductInput, orderItemsUncheckedCreateWithoutProductInput>
  }

  export type orderItemsCreateManyProductInputEnvelope = {
    data: orderItemsCreateManyProductInput | orderItemsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type wishlistsCreateWithoutProductInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: users_metaCreateNestedOneWithoutWishlistsInput
  }

  export type wishlistsUncheckedCreateWithoutProductInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type wishlistsCreateOrConnectWithoutProductInput = {
    where: wishlistsWhereUniqueInput
    create: XOR<wishlistsCreateWithoutProductInput, wishlistsUncheckedCreateWithoutProductInput>
  }

  export type wishlistsCreateManyProductInputEnvelope = {
    data: wishlistsCreateManyProductInput | wishlistsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type productReviewsCreateWithoutProductInput = {
    rating: number
    comment?: string | null
    status?: $Enums.ProductReviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: users_metaCreateNestedOneWithoutProduct_reviewsInput
  }

  export type productReviewsUncheckedCreateWithoutProductInput = {
    id?: number
    rating: number
    comment?: string | null
    status?: $Enums.ProductReviewStatus
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type productReviewsCreateOrConnectWithoutProductInput = {
    where: productReviewsWhereUniqueInput
    create: XOR<productReviewsCreateWithoutProductInput, productReviewsUncheckedCreateWithoutProductInput>
  }

  export type productReviewsCreateManyProductInputEnvelope = {
    data: productReviewsCreateManyProductInput | productReviewsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type users_metaUpsertWithoutProductsInput = {
    update: XOR<users_metaUpdateWithoutProductsInput, users_metaUncheckedUpdateWithoutProductsInput>
    create: XOR<users_metaCreateWithoutProductsInput, users_metaUncheckedCreateWithoutProductsInput>
    where?: users_metaWhereInput
  }

  export type users_metaUpdateToOneWithWhereWithoutProductsInput = {
    where?: users_metaWhereInput
    data: XOR<users_metaUpdateWithoutProductsInput, users_metaUncheckedUpdateWithoutProductsInput>
  }

  export type users_metaUpdateWithoutProductsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: usersUpdateOneRequiredWithoutMetaNestedInput
    carts?: productCartsUpdateManyWithoutUserNestedInput
    media?: mediaUpdateManyWithoutUserNestedInput
    addresses?: addressesUpdateManyWithoutUserNestedInput
    orders?: ordersUpdateManyWithoutUserNestedInput
    wishlists?: wishlistsUpdateManyWithoutUserNestedInput
    product_reviews?: productReviewsUpdateManyWithoutUserNestedInput
  }

  export type users_metaUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carts?: productCartsUncheckedUpdateManyWithoutUserNestedInput
    media?: mediaUncheckedUpdateManyWithoutUserNestedInput
    addresses?: addressesUncheckedUpdateManyWithoutUserNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUserNestedInput
    wishlists?: wishlistsUncheckedUpdateManyWithoutUserNestedInput
    product_reviews?: productReviewsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type mediaUpsertWithoutProductInput = {
    update: XOR<mediaUpdateWithoutProductInput, mediaUncheckedUpdateWithoutProductInput>
    create: XOR<mediaCreateWithoutProductInput, mediaUncheckedCreateWithoutProductInput>
    where?: mediaWhereInput
  }

  export type mediaUpdateToOneWithWhereWithoutProductInput = {
    where?: mediaWhereInput
    data: XOR<mediaUpdateWithoutProductInput, mediaUncheckedUpdateWithoutProductInput>
  }

  export type mediaUpdateWithoutProductInput = {
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: users_metaUpdateOneRequiredWithoutMediaNestedInput
    productCategories?: productCategoriesUpdateManyWithoutPhotoNestedInput
    galleries?: productGalleriesUpdateManyWithoutMediaNestedInput
  }

  export type mediaUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productCategories?: productCategoriesUncheckedUpdateManyWithoutPhotoNestedInput
    galleries?: productGalleriesUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type categoriesOnProductsUpsertWithWhereUniqueWithoutProductInput = {
    where: categoriesOnProductsWhereUniqueInput
    update: XOR<categoriesOnProductsUpdateWithoutProductInput, categoriesOnProductsUncheckedUpdateWithoutProductInput>
    create: XOR<categoriesOnProductsCreateWithoutProductInput, categoriesOnProductsUncheckedCreateWithoutProductInput>
  }

  export type categoriesOnProductsUpdateWithWhereUniqueWithoutProductInput = {
    where: categoriesOnProductsWhereUniqueInput
    data: XOR<categoriesOnProductsUpdateWithoutProductInput, categoriesOnProductsUncheckedUpdateWithoutProductInput>
  }

  export type categoriesOnProductsUpdateManyWithWhereWithoutProductInput = {
    where: categoriesOnProductsScalarWhereInput
    data: XOR<categoriesOnProductsUpdateManyMutationInput, categoriesOnProductsUncheckedUpdateManyWithoutProductInput>
  }

  export type categoriesOnProductsScalarWhereInput = {
    AND?: categoriesOnProductsScalarWhereInput | categoriesOnProductsScalarWhereInput[]
    OR?: categoriesOnProductsScalarWhereInput[]
    NOT?: categoriesOnProductsScalarWhereInput | categoriesOnProductsScalarWhereInput[]
    productId?: IntFilter<"categoriesOnProducts"> | number
    categoryId?: IntFilter<"categoriesOnProducts"> | number
  }

  export type productCartsUpsertWithWhereUniqueWithoutProductInput = {
    where: productCartsWhereUniqueInput
    update: XOR<productCartsUpdateWithoutProductInput, productCartsUncheckedUpdateWithoutProductInput>
    create: XOR<productCartsCreateWithoutProductInput, productCartsUncheckedCreateWithoutProductInput>
  }

  export type productCartsUpdateWithWhereUniqueWithoutProductInput = {
    where: productCartsWhereUniqueInput
    data: XOR<productCartsUpdateWithoutProductInput, productCartsUncheckedUpdateWithoutProductInput>
  }

  export type productCartsUpdateManyWithWhereWithoutProductInput = {
    where: productCartsScalarWhereInput
    data: XOR<productCartsUpdateManyMutationInput, productCartsUncheckedUpdateManyWithoutProductInput>
  }

  export type productGalleriesUpsertWithWhereUniqueWithoutProductInput = {
    where: productGalleriesWhereUniqueInput
    update: XOR<productGalleriesUpdateWithoutProductInput, productGalleriesUncheckedUpdateWithoutProductInput>
    create: XOR<productGalleriesCreateWithoutProductInput, productGalleriesUncheckedCreateWithoutProductInput>
  }

  export type productGalleriesUpdateWithWhereUniqueWithoutProductInput = {
    where: productGalleriesWhereUniqueInput
    data: XOR<productGalleriesUpdateWithoutProductInput, productGalleriesUncheckedUpdateWithoutProductInput>
  }

  export type productGalleriesUpdateManyWithWhereWithoutProductInput = {
    where: productGalleriesScalarWhereInput
    data: XOR<productGalleriesUpdateManyMutationInput, productGalleriesUncheckedUpdateManyWithoutProductInput>
  }

  export type productGalleriesScalarWhereInput = {
    AND?: productGalleriesScalarWhereInput | productGalleriesScalarWhereInput[]
    OR?: productGalleriesScalarWhereInput[]
    NOT?: productGalleriesScalarWhereInput | productGalleriesScalarWhereInput[]
    productId?: IntFilter<"productGalleries"> | number
    mediaId?: IntFilter<"productGalleries"> | number
  }

  export type orderItemsUpsertWithWhereUniqueWithoutProductInput = {
    where: orderItemsWhereUniqueInput
    update: XOR<orderItemsUpdateWithoutProductInput, orderItemsUncheckedUpdateWithoutProductInput>
    create: XOR<orderItemsCreateWithoutProductInput, orderItemsUncheckedCreateWithoutProductInput>
  }

  export type orderItemsUpdateWithWhereUniqueWithoutProductInput = {
    where: orderItemsWhereUniqueInput
    data: XOR<orderItemsUpdateWithoutProductInput, orderItemsUncheckedUpdateWithoutProductInput>
  }

  export type orderItemsUpdateManyWithWhereWithoutProductInput = {
    where: orderItemsScalarWhereInput
    data: XOR<orderItemsUpdateManyMutationInput, orderItemsUncheckedUpdateManyWithoutProductInput>
  }

  export type orderItemsScalarWhereInput = {
    AND?: orderItemsScalarWhereInput | orderItemsScalarWhereInput[]
    OR?: orderItemsScalarWhereInput[]
    NOT?: orderItemsScalarWhereInput | orderItemsScalarWhereInput[]
    id?: IntFilter<"orderItems"> | number
    quantity?: IntFilter<"orderItems"> | number
    price?: FloatFilter<"orderItems"> | number
    productId?: IntFilter<"orderItems"> | number
    orderId?: IntFilter<"orderItems"> | number
    createdAt?: DateTimeFilter<"orderItems"> | Date | string
    updatedAt?: DateTimeFilter<"orderItems"> | Date | string
  }

  export type wishlistsUpsertWithWhereUniqueWithoutProductInput = {
    where: wishlistsWhereUniqueInput
    update: XOR<wishlistsUpdateWithoutProductInput, wishlistsUncheckedUpdateWithoutProductInput>
    create: XOR<wishlistsCreateWithoutProductInput, wishlistsUncheckedCreateWithoutProductInput>
  }

  export type wishlistsUpdateWithWhereUniqueWithoutProductInput = {
    where: wishlistsWhereUniqueInput
    data: XOR<wishlistsUpdateWithoutProductInput, wishlistsUncheckedUpdateWithoutProductInput>
  }

  export type wishlistsUpdateManyWithWhereWithoutProductInput = {
    where: wishlistsScalarWhereInput
    data: XOR<wishlistsUpdateManyMutationInput, wishlistsUncheckedUpdateManyWithoutProductInput>
  }

  export type productReviewsUpsertWithWhereUniqueWithoutProductInput = {
    where: productReviewsWhereUniqueInput
    update: XOR<productReviewsUpdateWithoutProductInput, productReviewsUncheckedUpdateWithoutProductInput>
    create: XOR<productReviewsCreateWithoutProductInput, productReviewsUncheckedCreateWithoutProductInput>
  }

  export type productReviewsUpdateWithWhereUniqueWithoutProductInput = {
    where: productReviewsWhereUniqueInput
    data: XOR<productReviewsUpdateWithoutProductInput, productReviewsUncheckedUpdateWithoutProductInput>
  }

  export type productReviewsUpdateManyWithWhereWithoutProductInput = {
    where: productReviewsScalarWhereInput
    data: XOR<productReviewsUpdateManyMutationInput, productReviewsUncheckedUpdateManyWithoutProductInput>
  }

  export type productsCreateWithoutGalleriesInput = {
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    author: users_metaCreateNestedOneWithoutProductsInput
    thumbnail?: mediaCreateNestedOneWithoutProductInput
    categories?: categoriesOnProductsCreateNestedManyWithoutProductInput
    carts?: productCartsCreateNestedManyWithoutProductInput
    order_items?: orderItemsCreateNestedManyWithoutProductInput
    wishlists?: wishlistsCreateNestedManyWithoutProductInput
    reviews?: productReviewsCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutGalleriesInput = {
    id?: number
    authorId: number
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    thumbnailId?: number | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: categoriesOnProductsUncheckedCreateNestedManyWithoutProductInput
    carts?: productCartsUncheckedCreateNestedManyWithoutProductInput
    order_items?: orderItemsUncheckedCreateNestedManyWithoutProductInput
    wishlists?: wishlistsUncheckedCreateNestedManyWithoutProductInput
    reviews?: productReviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutGalleriesInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutGalleriesInput, productsUncheckedCreateWithoutGalleriesInput>
  }

  export type mediaCreateWithoutGalleriesInput = {
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: users_metaCreateNestedOneWithoutMediaInput
    productCategories?: productCategoriesCreateNestedManyWithoutPhotoInput
    product?: productsCreateNestedManyWithoutThumbnailInput
  }

  export type mediaUncheckedCreateWithoutGalleriesInput = {
    id?: number
    url: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    productCategories?: productCategoriesUncheckedCreateNestedManyWithoutPhotoInput
    product?: productsUncheckedCreateNestedManyWithoutThumbnailInput
  }

  export type mediaCreateOrConnectWithoutGalleriesInput = {
    where: mediaWhereUniqueInput
    create: XOR<mediaCreateWithoutGalleriesInput, mediaUncheckedCreateWithoutGalleriesInput>
  }

  export type productsUpsertWithoutGalleriesInput = {
    update: XOR<productsUpdateWithoutGalleriesInput, productsUncheckedUpdateWithoutGalleriesInput>
    create: XOR<productsCreateWithoutGalleriesInput, productsUncheckedCreateWithoutGalleriesInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutGalleriesInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutGalleriesInput, productsUncheckedUpdateWithoutGalleriesInput>
  }

  export type productsUpdateWithoutGalleriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: users_metaUpdateOneRequiredWithoutProductsNestedInput
    thumbnail?: mediaUpdateOneWithoutProductNestedInput
    categories?: categoriesOnProductsUpdateManyWithoutProductNestedInput
    carts?: productCartsUpdateManyWithoutProductNestedInput
    order_items?: orderItemsUpdateManyWithoutProductNestedInput
    wishlists?: wishlistsUpdateManyWithoutProductNestedInput
    reviews?: productReviewsUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutGalleriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailId?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: categoriesOnProductsUncheckedUpdateManyWithoutProductNestedInput
    carts?: productCartsUncheckedUpdateManyWithoutProductNestedInput
    order_items?: orderItemsUncheckedUpdateManyWithoutProductNestedInput
    wishlists?: wishlistsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: productReviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type mediaUpsertWithoutGalleriesInput = {
    update: XOR<mediaUpdateWithoutGalleriesInput, mediaUncheckedUpdateWithoutGalleriesInput>
    create: XOR<mediaCreateWithoutGalleriesInput, mediaUncheckedCreateWithoutGalleriesInput>
    where?: mediaWhereInput
  }

  export type mediaUpdateToOneWithWhereWithoutGalleriesInput = {
    where?: mediaWhereInput
    data: XOR<mediaUpdateWithoutGalleriesInput, mediaUncheckedUpdateWithoutGalleriesInput>
  }

  export type mediaUpdateWithoutGalleriesInput = {
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: users_metaUpdateOneRequiredWithoutMediaNestedInput
    productCategories?: productCategoriesUpdateManyWithoutPhotoNestedInput
    product?: productsUpdateManyWithoutThumbnailNestedInput
  }

  export type mediaUncheckedUpdateWithoutGalleriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productCategories?: productCategoriesUncheckedUpdateManyWithoutPhotoNestedInput
    product?: productsUncheckedUpdateManyWithoutThumbnailNestedInput
  }

  export type mediaCreateWithoutProductCategoriesInput = {
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: users_metaCreateNestedOneWithoutMediaInput
    product?: productsCreateNestedManyWithoutThumbnailInput
    galleries?: productGalleriesCreateNestedManyWithoutMediaInput
  }

  export type mediaUncheckedCreateWithoutProductCategoriesInput = {
    id?: number
    url: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    product?: productsUncheckedCreateNestedManyWithoutThumbnailInput
    galleries?: productGalleriesUncheckedCreateNestedManyWithoutMediaInput
  }

  export type mediaCreateOrConnectWithoutProductCategoriesInput = {
    where: mediaWhereUniqueInput
    create: XOR<mediaCreateWithoutProductCategoriesInput, mediaUncheckedCreateWithoutProductCategoriesInput>
  }

  export type categoriesOnProductsCreateWithoutCategoryInput = {
    product: productsCreateNestedOneWithoutCategoriesInput
  }

  export type categoriesOnProductsUncheckedCreateWithoutCategoryInput = {
    productId: number
  }

  export type categoriesOnProductsCreateOrConnectWithoutCategoryInput = {
    where: categoriesOnProductsWhereUniqueInput
    create: XOR<categoriesOnProductsCreateWithoutCategoryInput, categoriesOnProductsUncheckedCreateWithoutCategoryInput>
  }

  export type categoriesOnProductsCreateManyCategoryInputEnvelope = {
    data: categoriesOnProductsCreateManyCategoryInput | categoriesOnProductsCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type mediaUpsertWithoutProductCategoriesInput = {
    update: XOR<mediaUpdateWithoutProductCategoriesInput, mediaUncheckedUpdateWithoutProductCategoriesInput>
    create: XOR<mediaCreateWithoutProductCategoriesInput, mediaUncheckedCreateWithoutProductCategoriesInput>
    where?: mediaWhereInput
  }

  export type mediaUpdateToOneWithWhereWithoutProductCategoriesInput = {
    where?: mediaWhereInput
    data: XOR<mediaUpdateWithoutProductCategoriesInput, mediaUncheckedUpdateWithoutProductCategoriesInput>
  }

  export type mediaUpdateWithoutProductCategoriesInput = {
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: users_metaUpdateOneRequiredWithoutMediaNestedInput
    product?: productsUpdateManyWithoutThumbnailNestedInput
    galleries?: productGalleriesUpdateManyWithoutMediaNestedInput
  }

  export type mediaUncheckedUpdateWithoutProductCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productsUncheckedUpdateManyWithoutThumbnailNestedInput
    galleries?: productGalleriesUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type categoriesOnProductsUpsertWithWhereUniqueWithoutCategoryInput = {
    where: categoriesOnProductsWhereUniqueInput
    update: XOR<categoriesOnProductsUpdateWithoutCategoryInput, categoriesOnProductsUncheckedUpdateWithoutCategoryInput>
    create: XOR<categoriesOnProductsCreateWithoutCategoryInput, categoriesOnProductsUncheckedCreateWithoutCategoryInput>
  }

  export type categoriesOnProductsUpdateWithWhereUniqueWithoutCategoryInput = {
    where: categoriesOnProductsWhereUniqueInput
    data: XOR<categoriesOnProductsUpdateWithoutCategoryInput, categoriesOnProductsUncheckedUpdateWithoutCategoryInput>
  }

  export type categoriesOnProductsUpdateManyWithWhereWithoutCategoryInput = {
    where: categoriesOnProductsScalarWhereInput
    data: XOR<categoriesOnProductsUpdateManyMutationInput, categoriesOnProductsUncheckedUpdateManyWithoutCategoryInput>
  }

  export type productsCreateWithoutCategoriesInput = {
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    author: users_metaCreateNestedOneWithoutProductsInput
    thumbnail?: mediaCreateNestedOneWithoutProductInput
    carts?: productCartsCreateNestedManyWithoutProductInput
    galleries?: productGalleriesCreateNestedManyWithoutProductInput
    order_items?: orderItemsCreateNestedManyWithoutProductInput
    wishlists?: wishlistsCreateNestedManyWithoutProductInput
    reviews?: productReviewsCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutCategoriesInput = {
    id?: number
    authorId: number
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    thumbnailId?: number | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    carts?: productCartsUncheckedCreateNestedManyWithoutProductInput
    galleries?: productGalleriesUncheckedCreateNestedManyWithoutProductInput
    order_items?: orderItemsUncheckedCreateNestedManyWithoutProductInput
    wishlists?: wishlistsUncheckedCreateNestedManyWithoutProductInput
    reviews?: productReviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutCategoriesInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutCategoriesInput, productsUncheckedCreateWithoutCategoriesInput>
  }

  export type productCategoriesCreateWithoutProductsInput = {
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photo?: mediaCreateNestedOneWithoutProductCategoriesInput
  }

  export type productCategoriesUncheckedCreateWithoutProductsInput = {
    id?: number
    name: string
    slug: string
    photoId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type productCategoriesCreateOrConnectWithoutProductsInput = {
    where: productCategoriesWhereUniqueInput
    create: XOR<productCategoriesCreateWithoutProductsInput, productCategoriesUncheckedCreateWithoutProductsInput>
  }

  export type productsUpsertWithoutCategoriesInput = {
    update: XOR<productsUpdateWithoutCategoriesInput, productsUncheckedUpdateWithoutCategoriesInput>
    create: XOR<productsCreateWithoutCategoriesInput, productsUncheckedCreateWithoutCategoriesInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutCategoriesInput, productsUncheckedUpdateWithoutCategoriesInput>
  }

  export type productsUpdateWithoutCategoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: users_metaUpdateOneRequiredWithoutProductsNestedInput
    thumbnail?: mediaUpdateOneWithoutProductNestedInput
    carts?: productCartsUpdateManyWithoutProductNestedInput
    galleries?: productGalleriesUpdateManyWithoutProductNestedInput
    order_items?: orderItemsUpdateManyWithoutProductNestedInput
    wishlists?: wishlistsUpdateManyWithoutProductNestedInput
    reviews?: productReviewsUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailId?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carts?: productCartsUncheckedUpdateManyWithoutProductNestedInput
    galleries?: productGalleriesUncheckedUpdateManyWithoutProductNestedInput
    order_items?: orderItemsUncheckedUpdateManyWithoutProductNestedInput
    wishlists?: wishlistsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: productReviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productCategoriesUpsertWithoutProductsInput = {
    update: XOR<productCategoriesUpdateWithoutProductsInput, productCategoriesUncheckedUpdateWithoutProductsInput>
    create: XOR<productCategoriesCreateWithoutProductsInput, productCategoriesUncheckedCreateWithoutProductsInput>
    where?: productCategoriesWhereInput
  }

  export type productCategoriesUpdateToOneWithWhereWithoutProductsInput = {
    where?: productCategoriesWhereInput
    data: XOR<productCategoriesUpdateWithoutProductsInput, productCategoriesUncheckedUpdateWithoutProductsInput>
  }

  export type productCategoriesUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photo?: mediaUpdateOneWithoutProductCategoriesNestedInput
  }

  export type productCategoriesUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    photoId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productsCreateWithoutCartsInput = {
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    author: users_metaCreateNestedOneWithoutProductsInput
    thumbnail?: mediaCreateNestedOneWithoutProductInput
    categories?: categoriesOnProductsCreateNestedManyWithoutProductInput
    galleries?: productGalleriesCreateNestedManyWithoutProductInput
    order_items?: orderItemsCreateNestedManyWithoutProductInput
    wishlists?: wishlistsCreateNestedManyWithoutProductInput
    reviews?: productReviewsCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutCartsInput = {
    id?: number
    authorId: number
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    thumbnailId?: number | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: categoriesOnProductsUncheckedCreateNestedManyWithoutProductInput
    galleries?: productGalleriesUncheckedCreateNestedManyWithoutProductInput
    order_items?: orderItemsUncheckedCreateNestedManyWithoutProductInput
    wishlists?: wishlistsUncheckedCreateNestedManyWithoutProductInput
    reviews?: productReviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutCartsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutCartsInput, productsUncheckedCreateWithoutCartsInput>
  }

  export type users_metaCreateWithoutCartsInput = {
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: usersCreateNestedOneWithoutMetaInput
    products?: productsCreateNestedManyWithoutAuthorInput
    media?: mediaCreateNestedManyWithoutUserInput
    addresses?: addressesCreateNestedManyWithoutUserInput
    orders?: ordersCreateNestedManyWithoutUserInput
    wishlists?: wishlistsCreateNestedManyWithoutUserInput
    product_reviews?: productReviewsCreateNestedManyWithoutUserInput
  }

  export type users_metaUncheckedCreateWithoutCartsInput = {
    id?: number
    userId: number
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: productsUncheckedCreateNestedManyWithoutAuthorInput
    media?: mediaUncheckedCreateNestedManyWithoutUserInput
    addresses?: addressesUncheckedCreateNestedManyWithoutUserInput
    orders?: ordersUncheckedCreateNestedManyWithoutUserInput
    wishlists?: wishlistsUncheckedCreateNestedManyWithoutUserInput
    product_reviews?: productReviewsUncheckedCreateNestedManyWithoutUserInput
  }

  export type users_metaCreateOrConnectWithoutCartsInput = {
    where: users_metaWhereUniqueInput
    create: XOR<users_metaCreateWithoutCartsInput, users_metaUncheckedCreateWithoutCartsInput>
  }

  export type productsUpsertWithoutCartsInput = {
    update: XOR<productsUpdateWithoutCartsInput, productsUncheckedUpdateWithoutCartsInput>
    create: XOR<productsCreateWithoutCartsInput, productsUncheckedCreateWithoutCartsInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutCartsInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutCartsInput, productsUncheckedUpdateWithoutCartsInput>
  }

  export type productsUpdateWithoutCartsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: users_metaUpdateOneRequiredWithoutProductsNestedInput
    thumbnail?: mediaUpdateOneWithoutProductNestedInput
    categories?: categoriesOnProductsUpdateManyWithoutProductNestedInput
    galleries?: productGalleriesUpdateManyWithoutProductNestedInput
    order_items?: orderItemsUpdateManyWithoutProductNestedInput
    wishlists?: wishlistsUpdateManyWithoutProductNestedInput
    reviews?: productReviewsUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutCartsInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailId?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: categoriesOnProductsUncheckedUpdateManyWithoutProductNestedInput
    galleries?: productGalleriesUncheckedUpdateManyWithoutProductNestedInput
    order_items?: orderItemsUncheckedUpdateManyWithoutProductNestedInput
    wishlists?: wishlistsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: productReviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type users_metaUpsertWithoutCartsInput = {
    update: XOR<users_metaUpdateWithoutCartsInput, users_metaUncheckedUpdateWithoutCartsInput>
    create: XOR<users_metaCreateWithoutCartsInput, users_metaUncheckedCreateWithoutCartsInput>
    where?: users_metaWhereInput
  }

  export type users_metaUpdateToOneWithWhereWithoutCartsInput = {
    where?: users_metaWhereInput
    data: XOR<users_metaUpdateWithoutCartsInput, users_metaUncheckedUpdateWithoutCartsInput>
  }

  export type users_metaUpdateWithoutCartsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: usersUpdateOneRequiredWithoutMetaNestedInput
    products?: productsUpdateManyWithoutAuthorNestedInput
    media?: mediaUpdateManyWithoutUserNestedInput
    addresses?: addressesUpdateManyWithoutUserNestedInput
    orders?: ordersUpdateManyWithoutUserNestedInput
    wishlists?: wishlistsUpdateManyWithoutUserNestedInput
    product_reviews?: productReviewsUpdateManyWithoutUserNestedInput
  }

  export type users_metaUncheckedUpdateWithoutCartsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productsUncheckedUpdateManyWithoutAuthorNestedInput
    media?: mediaUncheckedUpdateManyWithoutUserNestedInput
    addresses?: addressesUncheckedUpdateManyWithoutUserNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUserNestedInput
    wishlists?: wishlistsUncheckedUpdateManyWithoutUserNestedInput
    product_reviews?: productReviewsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type users_metaCreateWithoutProduct_reviewsInput = {
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: usersCreateNestedOneWithoutMetaInput
    products?: productsCreateNestedManyWithoutAuthorInput
    carts?: productCartsCreateNestedManyWithoutUserInput
    media?: mediaCreateNestedManyWithoutUserInput
    addresses?: addressesCreateNestedManyWithoutUserInput
    orders?: ordersCreateNestedManyWithoutUserInput
    wishlists?: wishlistsCreateNestedManyWithoutUserInput
  }

  export type users_metaUncheckedCreateWithoutProduct_reviewsInput = {
    id?: number
    userId: number
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: productsUncheckedCreateNestedManyWithoutAuthorInput
    carts?: productCartsUncheckedCreateNestedManyWithoutUserInput
    media?: mediaUncheckedCreateNestedManyWithoutUserInput
    addresses?: addressesUncheckedCreateNestedManyWithoutUserInput
    orders?: ordersUncheckedCreateNestedManyWithoutUserInput
    wishlists?: wishlistsUncheckedCreateNestedManyWithoutUserInput
  }

  export type users_metaCreateOrConnectWithoutProduct_reviewsInput = {
    where: users_metaWhereUniqueInput
    create: XOR<users_metaCreateWithoutProduct_reviewsInput, users_metaUncheckedCreateWithoutProduct_reviewsInput>
  }

  export type productsCreateWithoutReviewsInput = {
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    author: users_metaCreateNestedOneWithoutProductsInput
    thumbnail?: mediaCreateNestedOneWithoutProductInput
    categories?: categoriesOnProductsCreateNestedManyWithoutProductInput
    carts?: productCartsCreateNestedManyWithoutProductInput
    galleries?: productGalleriesCreateNestedManyWithoutProductInput
    order_items?: orderItemsCreateNestedManyWithoutProductInput
    wishlists?: wishlistsCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutReviewsInput = {
    id?: number
    authorId: number
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    thumbnailId?: number | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: categoriesOnProductsUncheckedCreateNestedManyWithoutProductInput
    carts?: productCartsUncheckedCreateNestedManyWithoutProductInput
    galleries?: productGalleriesUncheckedCreateNestedManyWithoutProductInput
    order_items?: orderItemsUncheckedCreateNestedManyWithoutProductInput
    wishlists?: wishlistsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutReviewsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutReviewsInput, productsUncheckedCreateWithoutReviewsInput>
  }

  export type users_metaUpsertWithoutProduct_reviewsInput = {
    update: XOR<users_metaUpdateWithoutProduct_reviewsInput, users_metaUncheckedUpdateWithoutProduct_reviewsInput>
    create: XOR<users_metaCreateWithoutProduct_reviewsInput, users_metaUncheckedCreateWithoutProduct_reviewsInput>
    where?: users_metaWhereInput
  }

  export type users_metaUpdateToOneWithWhereWithoutProduct_reviewsInput = {
    where?: users_metaWhereInput
    data: XOR<users_metaUpdateWithoutProduct_reviewsInput, users_metaUncheckedUpdateWithoutProduct_reviewsInput>
  }

  export type users_metaUpdateWithoutProduct_reviewsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: usersUpdateOneRequiredWithoutMetaNestedInput
    products?: productsUpdateManyWithoutAuthorNestedInput
    carts?: productCartsUpdateManyWithoutUserNestedInput
    media?: mediaUpdateManyWithoutUserNestedInput
    addresses?: addressesUpdateManyWithoutUserNestedInput
    orders?: ordersUpdateManyWithoutUserNestedInput
    wishlists?: wishlistsUpdateManyWithoutUserNestedInput
  }

  export type users_metaUncheckedUpdateWithoutProduct_reviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productsUncheckedUpdateManyWithoutAuthorNestedInput
    carts?: productCartsUncheckedUpdateManyWithoutUserNestedInput
    media?: mediaUncheckedUpdateManyWithoutUserNestedInput
    addresses?: addressesUncheckedUpdateManyWithoutUserNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUserNestedInput
    wishlists?: wishlistsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productsUpsertWithoutReviewsInput = {
    update: XOR<productsUpdateWithoutReviewsInput, productsUncheckedUpdateWithoutReviewsInput>
    create: XOR<productsCreateWithoutReviewsInput, productsUncheckedCreateWithoutReviewsInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutReviewsInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutReviewsInput, productsUncheckedUpdateWithoutReviewsInput>
  }

  export type productsUpdateWithoutReviewsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: users_metaUpdateOneRequiredWithoutProductsNestedInput
    thumbnail?: mediaUpdateOneWithoutProductNestedInput
    categories?: categoriesOnProductsUpdateManyWithoutProductNestedInput
    carts?: productCartsUpdateManyWithoutProductNestedInput
    galleries?: productGalleriesUpdateManyWithoutProductNestedInput
    order_items?: orderItemsUpdateManyWithoutProductNestedInput
    wishlists?: wishlistsUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailId?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: categoriesOnProductsUncheckedUpdateManyWithoutProductNestedInput
    carts?: productCartsUncheckedUpdateManyWithoutProductNestedInput
    galleries?: productGalleriesUncheckedUpdateManyWithoutProductNestedInput
    order_items?: orderItemsUncheckedUpdateManyWithoutProductNestedInput
    wishlists?: wishlistsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type users_metaCreateWithoutMediaInput = {
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: usersCreateNestedOneWithoutMetaInput
    products?: productsCreateNestedManyWithoutAuthorInput
    carts?: productCartsCreateNestedManyWithoutUserInput
    addresses?: addressesCreateNestedManyWithoutUserInput
    orders?: ordersCreateNestedManyWithoutUserInput
    wishlists?: wishlistsCreateNestedManyWithoutUserInput
    product_reviews?: productReviewsCreateNestedManyWithoutUserInput
  }

  export type users_metaUncheckedCreateWithoutMediaInput = {
    id?: number
    userId: number
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: productsUncheckedCreateNestedManyWithoutAuthorInput
    carts?: productCartsUncheckedCreateNestedManyWithoutUserInput
    addresses?: addressesUncheckedCreateNestedManyWithoutUserInput
    orders?: ordersUncheckedCreateNestedManyWithoutUserInput
    wishlists?: wishlistsUncheckedCreateNestedManyWithoutUserInput
    product_reviews?: productReviewsUncheckedCreateNestedManyWithoutUserInput
  }

  export type users_metaCreateOrConnectWithoutMediaInput = {
    where: users_metaWhereUniqueInput
    create: XOR<users_metaCreateWithoutMediaInput, users_metaUncheckedCreateWithoutMediaInput>
  }

  export type productCategoriesCreateWithoutPhotoInput = {
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: categoriesOnProductsCreateNestedManyWithoutCategoryInput
  }

  export type productCategoriesUncheckedCreateWithoutPhotoInput = {
    id?: number
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: categoriesOnProductsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type productCategoriesCreateOrConnectWithoutPhotoInput = {
    where: productCategoriesWhereUniqueInput
    create: XOR<productCategoriesCreateWithoutPhotoInput, productCategoriesUncheckedCreateWithoutPhotoInput>
  }

  export type productCategoriesCreateManyPhotoInputEnvelope = {
    data: productCategoriesCreateManyPhotoInput | productCategoriesCreateManyPhotoInput[]
    skipDuplicates?: boolean
  }

  export type productsCreateWithoutThumbnailInput = {
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    author: users_metaCreateNestedOneWithoutProductsInput
    categories?: categoriesOnProductsCreateNestedManyWithoutProductInput
    carts?: productCartsCreateNestedManyWithoutProductInput
    galleries?: productGalleriesCreateNestedManyWithoutProductInput
    order_items?: orderItemsCreateNestedManyWithoutProductInput
    wishlists?: wishlistsCreateNestedManyWithoutProductInput
    reviews?: productReviewsCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutThumbnailInput = {
    id?: number
    authorId: number
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: categoriesOnProductsUncheckedCreateNestedManyWithoutProductInput
    carts?: productCartsUncheckedCreateNestedManyWithoutProductInput
    galleries?: productGalleriesUncheckedCreateNestedManyWithoutProductInput
    order_items?: orderItemsUncheckedCreateNestedManyWithoutProductInput
    wishlists?: wishlistsUncheckedCreateNestedManyWithoutProductInput
    reviews?: productReviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutThumbnailInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutThumbnailInput, productsUncheckedCreateWithoutThumbnailInput>
  }

  export type productsCreateManyThumbnailInputEnvelope = {
    data: productsCreateManyThumbnailInput | productsCreateManyThumbnailInput[]
    skipDuplicates?: boolean
  }

  export type productGalleriesCreateWithoutMediaInput = {
    product: productsCreateNestedOneWithoutGalleriesInput
  }

  export type productGalleriesUncheckedCreateWithoutMediaInput = {
    productId: number
  }

  export type productGalleriesCreateOrConnectWithoutMediaInput = {
    where: productGalleriesWhereUniqueInput
    create: XOR<productGalleriesCreateWithoutMediaInput, productGalleriesUncheckedCreateWithoutMediaInput>
  }

  export type productGalleriesCreateManyMediaInputEnvelope = {
    data: productGalleriesCreateManyMediaInput | productGalleriesCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type users_metaUpsertWithoutMediaInput = {
    update: XOR<users_metaUpdateWithoutMediaInput, users_metaUncheckedUpdateWithoutMediaInput>
    create: XOR<users_metaCreateWithoutMediaInput, users_metaUncheckedCreateWithoutMediaInput>
    where?: users_metaWhereInput
  }

  export type users_metaUpdateToOneWithWhereWithoutMediaInput = {
    where?: users_metaWhereInput
    data: XOR<users_metaUpdateWithoutMediaInput, users_metaUncheckedUpdateWithoutMediaInput>
  }

  export type users_metaUpdateWithoutMediaInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: usersUpdateOneRequiredWithoutMetaNestedInput
    products?: productsUpdateManyWithoutAuthorNestedInput
    carts?: productCartsUpdateManyWithoutUserNestedInput
    addresses?: addressesUpdateManyWithoutUserNestedInput
    orders?: ordersUpdateManyWithoutUserNestedInput
    wishlists?: wishlistsUpdateManyWithoutUserNestedInput
    product_reviews?: productReviewsUpdateManyWithoutUserNestedInput
  }

  export type users_metaUncheckedUpdateWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productsUncheckedUpdateManyWithoutAuthorNestedInput
    carts?: productCartsUncheckedUpdateManyWithoutUserNestedInput
    addresses?: addressesUncheckedUpdateManyWithoutUserNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUserNestedInput
    wishlists?: wishlistsUncheckedUpdateManyWithoutUserNestedInput
    product_reviews?: productReviewsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productCategoriesUpsertWithWhereUniqueWithoutPhotoInput = {
    where: productCategoriesWhereUniqueInput
    update: XOR<productCategoriesUpdateWithoutPhotoInput, productCategoriesUncheckedUpdateWithoutPhotoInput>
    create: XOR<productCategoriesCreateWithoutPhotoInput, productCategoriesUncheckedCreateWithoutPhotoInput>
  }

  export type productCategoriesUpdateWithWhereUniqueWithoutPhotoInput = {
    where: productCategoriesWhereUniqueInput
    data: XOR<productCategoriesUpdateWithoutPhotoInput, productCategoriesUncheckedUpdateWithoutPhotoInput>
  }

  export type productCategoriesUpdateManyWithWhereWithoutPhotoInput = {
    where: productCategoriesScalarWhereInput
    data: XOR<productCategoriesUpdateManyMutationInput, productCategoriesUncheckedUpdateManyWithoutPhotoInput>
  }

  export type productCategoriesScalarWhereInput = {
    AND?: productCategoriesScalarWhereInput | productCategoriesScalarWhereInput[]
    OR?: productCategoriesScalarWhereInput[]
    NOT?: productCategoriesScalarWhereInput | productCategoriesScalarWhereInput[]
    id?: IntFilter<"productCategories"> | number
    name?: StringFilter<"productCategories"> | string
    slug?: StringFilter<"productCategories"> | string
    photoId?: IntNullableFilter<"productCategories"> | number | null
    createdAt?: DateTimeFilter<"productCategories"> | Date | string
    updatedAt?: DateTimeFilter<"productCategories"> | Date | string
  }

  export type productsUpsertWithWhereUniqueWithoutThumbnailInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutThumbnailInput, productsUncheckedUpdateWithoutThumbnailInput>
    create: XOR<productsCreateWithoutThumbnailInput, productsUncheckedCreateWithoutThumbnailInput>
  }

  export type productsUpdateWithWhereUniqueWithoutThumbnailInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutThumbnailInput, productsUncheckedUpdateWithoutThumbnailInput>
  }

  export type productsUpdateManyWithWhereWithoutThumbnailInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutThumbnailInput>
  }

  export type productGalleriesUpsertWithWhereUniqueWithoutMediaInput = {
    where: productGalleriesWhereUniqueInput
    update: XOR<productGalleriesUpdateWithoutMediaInput, productGalleriesUncheckedUpdateWithoutMediaInput>
    create: XOR<productGalleriesCreateWithoutMediaInput, productGalleriesUncheckedCreateWithoutMediaInput>
  }

  export type productGalleriesUpdateWithWhereUniqueWithoutMediaInput = {
    where: productGalleriesWhereUniqueInput
    data: XOR<productGalleriesUpdateWithoutMediaInput, productGalleriesUncheckedUpdateWithoutMediaInput>
  }

  export type productGalleriesUpdateManyWithWhereWithoutMediaInput = {
    where: productGalleriesScalarWhereInput
    data: XOR<productGalleriesUpdateManyMutationInput, productGalleriesUncheckedUpdateManyWithoutMediaInput>
  }

  export type users_metaCreateWithoutOrdersInput = {
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: usersCreateNestedOneWithoutMetaInput
    products?: productsCreateNestedManyWithoutAuthorInput
    carts?: productCartsCreateNestedManyWithoutUserInput
    media?: mediaCreateNestedManyWithoutUserInput
    addresses?: addressesCreateNestedManyWithoutUserInput
    wishlists?: wishlistsCreateNestedManyWithoutUserInput
    product_reviews?: productReviewsCreateNestedManyWithoutUserInput
  }

  export type users_metaUncheckedCreateWithoutOrdersInput = {
    id?: number
    userId: number
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: productsUncheckedCreateNestedManyWithoutAuthorInput
    carts?: productCartsUncheckedCreateNestedManyWithoutUserInput
    media?: mediaUncheckedCreateNestedManyWithoutUserInput
    addresses?: addressesUncheckedCreateNestedManyWithoutUserInput
    wishlists?: wishlistsUncheckedCreateNestedManyWithoutUserInput
    product_reviews?: productReviewsUncheckedCreateNestedManyWithoutUserInput
  }

  export type users_metaCreateOrConnectWithoutOrdersInput = {
    where: users_metaWhereUniqueInput
    create: XOR<users_metaCreateWithoutOrdersInput, users_metaUncheckedCreateWithoutOrdersInput>
  }

  export type addressesCreateWithoutBilling_ordersInput = {
    type?: $Enums.AddressType
    full_name: string
    email: string
    phone: string
    street_address: string
    street_address_2?: string | null
    district: string
    country: string
    zip_code: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: users_metaCreateNestedOneWithoutAddressesInput
    shipping_orders?: ordersCreateNestedManyWithoutShipping_addressInput
  }

  export type addressesUncheckedCreateWithoutBilling_ordersInput = {
    id?: number
    type?: $Enums.AddressType
    full_name: string
    email: string
    phone: string
    street_address: string
    street_address_2?: string | null
    district: string
    country: string
    zip_code: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    shipping_orders?: ordersUncheckedCreateNestedManyWithoutShipping_addressInput
  }

  export type addressesCreateOrConnectWithoutBilling_ordersInput = {
    where: addressesWhereUniqueInput
    create: XOR<addressesCreateWithoutBilling_ordersInput, addressesUncheckedCreateWithoutBilling_ordersInput>
  }

  export type addressesCreateWithoutShipping_ordersInput = {
    type?: $Enums.AddressType
    full_name: string
    email: string
    phone: string
    street_address: string
    street_address_2?: string | null
    district: string
    country: string
    zip_code: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: users_metaCreateNestedOneWithoutAddressesInput
    billing_orders?: ordersCreateNestedManyWithoutBilling_addressInput
  }

  export type addressesUncheckedCreateWithoutShipping_ordersInput = {
    id?: number
    type?: $Enums.AddressType
    full_name: string
    email: string
    phone: string
    street_address: string
    street_address_2?: string | null
    district: string
    country: string
    zip_code: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    billing_orders?: ordersUncheckedCreateNestedManyWithoutBilling_addressInput
  }

  export type addressesCreateOrConnectWithoutShipping_ordersInput = {
    where: addressesWhereUniqueInput
    create: XOR<addressesCreateWithoutShipping_ordersInput, addressesUncheckedCreateWithoutShipping_ordersInput>
  }

  export type orderItemsCreateWithoutOrderInput = {
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    product: productsCreateNestedOneWithoutOrder_itemsInput
  }

  export type orderItemsUncheckedCreateWithoutOrderInput = {
    id?: number
    quantity: number
    price: number
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderItemsCreateOrConnectWithoutOrderInput = {
    where: orderItemsWhereUniqueInput
    create: XOR<orderItemsCreateWithoutOrderInput, orderItemsUncheckedCreateWithoutOrderInput>
  }

  export type orderItemsCreateManyOrderInputEnvelope = {
    data: orderItemsCreateManyOrderInput | orderItemsCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type users_metaUpsertWithoutOrdersInput = {
    update: XOR<users_metaUpdateWithoutOrdersInput, users_metaUncheckedUpdateWithoutOrdersInput>
    create: XOR<users_metaCreateWithoutOrdersInput, users_metaUncheckedCreateWithoutOrdersInput>
    where?: users_metaWhereInput
  }

  export type users_metaUpdateToOneWithWhereWithoutOrdersInput = {
    where?: users_metaWhereInput
    data: XOR<users_metaUpdateWithoutOrdersInput, users_metaUncheckedUpdateWithoutOrdersInput>
  }

  export type users_metaUpdateWithoutOrdersInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: usersUpdateOneRequiredWithoutMetaNestedInput
    products?: productsUpdateManyWithoutAuthorNestedInput
    carts?: productCartsUpdateManyWithoutUserNestedInput
    media?: mediaUpdateManyWithoutUserNestedInput
    addresses?: addressesUpdateManyWithoutUserNestedInput
    wishlists?: wishlistsUpdateManyWithoutUserNestedInput
    product_reviews?: productReviewsUpdateManyWithoutUserNestedInput
  }

  export type users_metaUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productsUncheckedUpdateManyWithoutAuthorNestedInput
    carts?: productCartsUncheckedUpdateManyWithoutUserNestedInput
    media?: mediaUncheckedUpdateManyWithoutUserNestedInput
    addresses?: addressesUncheckedUpdateManyWithoutUserNestedInput
    wishlists?: wishlistsUncheckedUpdateManyWithoutUserNestedInput
    product_reviews?: productReviewsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type addressesUpsertWithoutBilling_ordersInput = {
    update: XOR<addressesUpdateWithoutBilling_ordersInput, addressesUncheckedUpdateWithoutBilling_ordersInput>
    create: XOR<addressesCreateWithoutBilling_ordersInput, addressesUncheckedCreateWithoutBilling_ordersInput>
    where?: addressesWhereInput
  }

  export type addressesUpdateToOneWithWhereWithoutBilling_ordersInput = {
    where?: addressesWhereInput
    data: XOR<addressesUpdateWithoutBilling_ordersInput, addressesUncheckedUpdateWithoutBilling_ordersInput>
  }

  export type addressesUpdateWithoutBilling_ordersInput = {
    type?: EnumAddressTypeFieldUpdateOperationsInput | $Enums.AddressType
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    street_address_2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: users_metaUpdateOneRequiredWithoutAddressesNestedInput
    shipping_orders?: ordersUpdateManyWithoutShipping_addressNestedInput
  }

  export type addressesUncheckedUpdateWithoutBilling_ordersInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumAddressTypeFieldUpdateOperationsInput | $Enums.AddressType
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    street_address_2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shipping_orders?: ordersUncheckedUpdateManyWithoutShipping_addressNestedInput
  }

  export type addressesUpsertWithoutShipping_ordersInput = {
    update: XOR<addressesUpdateWithoutShipping_ordersInput, addressesUncheckedUpdateWithoutShipping_ordersInput>
    create: XOR<addressesCreateWithoutShipping_ordersInput, addressesUncheckedCreateWithoutShipping_ordersInput>
    where?: addressesWhereInput
  }

  export type addressesUpdateToOneWithWhereWithoutShipping_ordersInput = {
    where?: addressesWhereInput
    data: XOR<addressesUpdateWithoutShipping_ordersInput, addressesUncheckedUpdateWithoutShipping_ordersInput>
  }

  export type addressesUpdateWithoutShipping_ordersInput = {
    type?: EnumAddressTypeFieldUpdateOperationsInput | $Enums.AddressType
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    street_address_2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: users_metaUpdateOneRequiredWithoutAddressesNestedInput
    billing_orders?: ordersUpdateManyWithoutBilling_addressNestedInput
  }

  export type addressesUncheckedUpdateWithoutShipping_ordersInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumAddressTypeFieldUpdateOperationsInput | $Enums.AddressType
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    street_address_2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billing_orders?: ordersUncheckedUpdateManyWithoutBilling_addressNestedInput
  }

  export type orderItemsUpsertWithWhereUniqueWithoutOrderInput = {
    where: orderItemsWhereUniqueInput
    update: XOR<orderItemsUpdateWithoutOrderInput, orderItemsUncheckedUpdateWithoutOrderInput>
    create: XOR<orderItemsCreateWithoutOrderInput, orderItemsUncheckedCreateWithoutOrderInput>
  }

  export type orderItemsUpdateWithWhereUniqueWithoutOrderInput = {
    where: orderItemsWhereUniqueInput
    data: XOR<orderItemsUpdateWithoutOrderInput, orderItemsUncheckedUpdateWithoutOrderInput>
  }

  export type orderItemsUpdateManyWithWhereWithoutOrderInput = {
    where: orderItemsScalarWhereInput
    data: XOR<orderItemsUpdateManyMutationInput, orderItemsUncheckedUpdateManyWithoutOrderInput>
  }

  export type productsCreateWithoutOrder_itemsInput = {
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    author: users_metaCreateNestedOneWithoutProductsInput
    thumbnail?: mediaCreateNestedOneWithoutProductInput
    categories?: categoriesOnProductsCreateNestedManyWithoutProductInput
    carts?: productCartsCreateNestedManyWithoutProductInput
    galleries?: productGalleriesCreateNestedManyWithoutProductInput
    wishlists?: wishlistsCreateNestedManyWithoutProductInput
    reviews?: productReviewsCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutOrder_itemsInput = {
    id?: number
    authorId: number
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    thumbnailId?: number | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: categoriesOnProductsUncheckedCreateNestedManyWithoutProductInput
    carts?: productCartsUncheckedCreateNestedManyWithoutProductInput
    galleries?: productGalleriesUncheckedCreateNestedManyWithoutProductInput
    wishlists?: wishlistsUncheckedCreateNestedManyWithoutProductInput
    reviews?: productReviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutOrder_itemsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutOrder_itemsInput, productsUncheckedCreateWithoutOrder_itemsInput>
  }

  export type ordersCreateWithoutItemsInput = {
    order_status?: $Enums.OrderStatus
    payment_method: string
    payment_status?: $Enums.PaymentStatus
    sub_total: number
    tax_rate: number
    tax_total: number
    discount: number
    order_total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: users_metaCreateNestedOneWithoutOrdersInput
    billing_address: addressesCreateNestedOneWithoutBilling_ordersInput
    shipping_address: addressesCreateNestedOneWithoutShipping_ordersInput
  }

  export type ordersUncheckedCreateWithoutItemsInput = {
    id?: number
    order_status?: $Enums.OrderStatus
    payment_method: string
    payment_status?: $Enums.PaymentStatus
    sub_total: number
    tax_rate: number
    tax_total: number
    discount: number
    order_total: number
    userId: number
    billing_address_id: number
    shipping_address_id: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ordersCreateOrConnectWithoutItemsInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutItemsInput, ordersUncheckedCreateWithoutItemsInput>
  }

  export type productsUpsertWithoutOrder_itemsInput = {
    update: XOR<productsUpdateWithoutOrder_itemsInput, productsUncheckedUpdateWithoutOrder_itemsInput>
    create: XOR<productsCreateWithoutOrder_itemsInput, productsUncheckedCreateWithoutOrder_itemsInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutOrder_itemsInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutOrder_itemsInput, productsUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type productsUpdateWithoutOrder_itemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: users_metaUpdateOneRequiredWithoutProductsNestedInput
    thumbnail?: mediaUpdateOneWithoutProductNestedInput
    categories?: categoriesOnProductsUpdateManyWithoutProductNestedInput
    carts?: productCartsUpdateManyWithoutProductNestedInput
    galleries?: productGalleriesUpdateManyWithoutProductNestedInput
    wishlists?: wishlistsUpdateManyWithoutProductNestedInput
    reviews?: productReviewsUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutOrder_itemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailId?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: categoriesOnProductsUncheckedUpdateManyWithoutProductNestedInput
    carts?: productCartsUncheckedUpdateManyWithoutProductNestedInput
    galleries?: productGalleriesUncheckedUpdateManyWithoutProductNestedInput
    wishlists?: wishlistsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: productReviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ordersUpsertWithoutItemsInput = {
    update: XOR<ordersUpdateWithoutItemsInput, ordersUncheckedUpdateWithoutItemsInput>
    create: XOR<ordersCreateWithoutItemsInput, ordersUncheckedCreateWithoutItemsInput>
    where?: ordersWhereInput
  }

  export type ordersUpdateToOneWithWhereWithoutItemsInput = {
    where?: ordersWhereInput
    data: XOR<ordersUpdateWithoutItemsInput, ordersUncheckedUpdateWithoutItemsInput>
  }

  export type ordersUpdateWithoutItemsInput = {
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    payment_method?: StringFieldUpdateOperationsInput | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    sub_total?: FloatFieldUpdateOperationsInput | number
    tax_rate?: FloatFieldUpdateOperationsInput | number
    tax_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    order_total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: users_metaUpdateOneRequiredWithoutOrdersNestedInput
    billing_address?: addressesUpdateOneRequiredWithoutBilling_ordersNestedInput
    shipping_address?: addressesUpdateOneRequiredWithoutShipping_ordersNestedInput
  }

  export type ordersUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    payment_method?: StringFieldUpdateOperationsInput | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    sub_total?: FloatFieldUpdateOperationsInput | number
    tax_rate?: FloatFieldUpdateOperationsInput | number
    tax_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    order_total?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    billing_address_id?: IntFieldUpdateOperationsInput | number
    shipping_address_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type users_metaCreateWithoutWishlistsInput = {
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: usersCreateNestedOneWithoutMetaInput
    products?: productsCreateNestedManyWithoutAuthorInput
    carts?: productCartsCreateNestedManyWithoutUserInput
    media?: mediaCreateNestedManyWithoutUserInput
    addresses?: addressesCreateNestedManyWithoutUserInput
    orders?: ordersCreateNestedManyWithoutUserInput
    product_reviews?: productReviewsCreateNestedManyWithoutUserInput
  }

  export type users_metaUncheckedCreateWithoutWishlistsInput = {
    id?: number
    userId: number
    name?: string | null
    photo?: string | null
    phone?: string | null
    role?: $Enums.Role
    access_token?: string | null
    isVerified?: boolean
    isInTrash?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: productsUncheckedCreateNestedManyWithoutAuthorInput
    carts?: productCartsUncheckedCreateNestedManyWithoutUserInput
    media?: mediaUncheckedCreateNestedManyWithoutUserInput
    addresses?: addressesUncheckedCreateNestedManyWithoutUserInput
    orders?: ordersUncheckedCreateNestedManyWithoutUserInput
    product_reviews?: productReviewsUncheckedCreateNestedManyWithoutUserInput
  }

  export type users_metaCreateOrConnectWithoutWishlistsInput = {
    where: users_metaWhereUniqueInput
    create: XOR<users_metaCreateWithoutWishlistsInput, users_metaUncheckedCreateWithoutWishlistsInput>
  }

  export type productsCreateWithoutWishlistsInput = {
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    author: users_metaCreateNestedOneWithoutProductsInput
    thumbnail?: mediaCreateNestedOneWithoutProductInput
    categories?: categoriesOnProductsCreateNestedManyWithoutProductInput
    carts?: productCartsCreateNestedManyWithoutProductInput
    galleries?: productGalleriesCreateNestedManyWithoutProductInput
    order_items?: orderItemsCreateNestedManyWithoutProductInput
    reviews?: productReviewsCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutWishlistsInput = {
    id?: number
    authorId: number
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    thumbnailId?: number | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: categoriesOnProductsUncheckedCreateNestedManyWithoutProductInput
    carts?: productCartsUncheckedCreateNestedManyWithoutProductInput
    galleries?: productGalleriesUncheckedCreateNestedManyWithoutProductInput
    order_items?: orderItemsUncheckedCreateNestedManyWithoutProductInput
    reviews?: productReviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutWishlistsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutWishlistsInput, productsUncheckedCreateWithoutWishlistsInput>
  }

  export type users_metaUpsertWithoutWishlistsInput = {
    update: XOR<users_metaUpdateWithoutWishlistsInput, users_metaUncheckedUpdateWithoutWishlistsInput>
    create: XOR<users_metaCreateWithoutWishlistsInput, users_metaUncheckedCreateWithoutWishlistsInput>
    where?: users_metaWhereInput
  }

  export type users_metaUpdateToOneWithWhereWithoutWishlistsInput = {
    where?: users_metaWhereInput
    data: XOR<users_metaUpdateWithoutWishlistsInput, users_metaUncheckedUpdateWithoutWishlistsInput>
  }

  export type users_metaUpdateWithoutWishlistsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: usersUpdateOneRequiredWithoutMetaNestedInput
    products?: productsUpdateManyWithoutAuthorNestedInput
    carts?: productCartsUpdateManyWithoutUserNestedInput
    media?: mediaUpdateManyWithoutUserNestedInput
    addresses?: addressesUpdateManyWithoutUserNestedInput
    orders?: ordersUpdateManyWithoutUserNestedInput
    product_reviews?: productReviewsUpdateManyWithoutUserNestedInput
  }

  export type users_metaUncheckedUpdateWithoutWishlistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isInTrash?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productsUncheckedUpdateManyWithoutAuthorNestedInput
    carts?: productCartsUncheckedUpdateManyWithoutUserNestedInput
    media?: mediaUncheckedUpdateManyWithoutUserNestedInput
    addresses?: addressesUncheckedUpdateManyWithoutUserNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUserNestedInput
    product_reviews?: productReviewsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productsUpsertWithoutWishlistsInput = {
    update: XOR<productsUpdateWithoutWishlistsInput, productsUncheckedUpdateWithoutWishlistsInput>
    create: XOR<productsCreateWithoutWishlistsInput, productsUncheckedCreateWithoutWishlistsInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutWishlistsInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutWishlistsInput, productsUncheckedUpdateWithoutWishlistsInput>
  }

  export type productsUpdateWithoutWishlistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: users_metaUpdateOneRequiredWithoutProductsNestedInput
    thumbnail?: mediaUpdateOneWithoutProductNestedInput
    categories?: categoriesOnProductsUpdateManyWithoutProductNestedInput
    carts?: productCartsUpdateManyWithoutProductNestedInput
    galleries?: productGalleriesUpdateManyWithoutProductNestedInput
    order_items?: orderItemsUpdateManyWithoutProductNestedInput
    reviews?: productReviewsUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutWishlistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailId?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: categoriesOnProductsUncheckedUpdateManyWithoutProductNestedInput
    carts?: productCartsUncheckedUpdateManyWithoutProductNestedInput
    galleries?: productGalleriesUncheckedUpdateManyWithoutProductNestedInput
    order_items?: orderItemsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: productReviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsCreateManyAuthorInput = {
    id?: number
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    thumbnailId?: number | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type productCartsCreateManyUserInput = {
    id?: number
    productId: number
    quantity: number
  }

  export type mediaCreateManyUserInput = {
    id?: number
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type addressesCreateManyUserInput = {
    id?: number
    type?: $Enums.AddressType
    full_name: string
    email: string
    phone: string
    street_address: string
    street_address_2?: string | null
    district: string
    country: string
    zip_code: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ordersCreateManyUserInput = {
    id?: number
    order_status?: $Enums.OrderStatus
    payment_method: string
    payment_status?: $Enums.PaymentStatus
    sub_total: number
    tax_rate: number
    tax_total: number
    discount: number
    order_total: number
    billing_address_id: number
    shipping_address_id: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type wishlistsCreateManyUserInput = {
    id?: number
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type productReviewsCreateManyUserInput = {
    id?: number
    rating: number
    comment?: string | null
    status?: $Enums.ProductReviewStatus
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type productsUpdateWithoutAuthorInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thumbnail?: mediaUpdateOneWithoutProductNestedInput
    categories?: categoriesOnProductsUpdateManyWithoutProductNestedInput
    carts?: productCartsUpdateManyWithoutProductNestedInput
    galleries?: productGalleriesUpdateManyWithoutProductNestedInput
    order_items?: orderItemsUpdateManyWithoutProductNestedInput
    wishlists?: wishlistsUpdateManyWithoutProductNestedInput
    reviews?: productReviewsUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailId?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: categoriesOnProductsUncheckedUpdateManyWithoutProductNestedInput
    carts?: productCartsUncheckedUpdateManyWithoutProductNestedInput
    galleries?: productGalleriesUncheckedUpdateManyWithoutProductNestedInput
    order_items?: orderItemsUncheckedUpdateManyWithoutProductNestedInput
    wishlists?: wishlistsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: productReviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailId?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productCartsUpdateWithoutUserInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    product?: productsUpdateOneRequiredWithoutCartsNestedInput
  }

  export type productCartsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type productCartsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type mediaUpdateWithoutUserInput = {
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productCategories?: productCategoriesUpdateManyWithoutPhotoNestedInput
    product?: productsUpdateManyWithoutThumbnailNestedInput
    galleries?: productGalleriesUpdateManyWithoutMediaNestedInput
  }

  export type mediaUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productCategories?: productCategoriesUncheckedUpdateManyWithoutPhotoNestedInput
    product?: productsUncheckedUpdateManyWithoutThumbnailNestedInput
    galleries?: productGalleriesUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type mediaUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type addressesUpdateWithoutUserInput = {
    type?: EnumAddressTypeFieldUpdateOperationsInput | $Enums.AddressType
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    street_address_2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billing_orders?: ordersUpdateManyWithoutBilling_addressNestedInput
    shipping_orders?: ordersUpdateManyWithoutShipping_addressNestedInput
  }

  export type addressesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumAddressTypeFieldUpdateOperationsInput | $Enums.AddressType
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    street_address_2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billing_orders?: ordersUncheckedUpdateManyWithoutBilling_addressNestedInput
    shipping_orders?: ordersUncheckedUpdateManyWithoutShipping_addressNestedInput
  }

  export type addressesUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumAddressTypeFieldUpdateOperationsInput | $Enums.AddressType
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    street_address_2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip_code?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ordersUpdateWithoutUserInput = {
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    payment_method?: StringFieldUpdateOperationsInput | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    sub_total?: FloatFieldUpdateOperationsInput | number
    tax_rate?: FloatFieldUpdateOperationsInput | number
    tax_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    order_total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billing_address?: addressesUpdateOneRequiredWithoutBilling_ordersNestedInput
    shipping_address?: addressesUpdateOneRequiredWithoutShipping_ordersNestedInput
    items?: orderItemsUpdateManyWithoutOrderNestedInput
  }

  export type ordersUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    payment_method?: StringFieldUpdateOperationsInput | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    sub_total?: FloatFieldUpdateOperationsInput | number
    tax_rate?: FloatFieldUpdateOperationsInput | number
    tax_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    order_total?: FloatFieldUpdateOperationsInput | number
    billing_address_id?: IntFieldUpdateOperationsInput | number
    shipping_address_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: orderItemsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type ordersUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    payment_method?: StringFieldUpdateOperationsInput | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    sub_total?: FloatFieldUpdateOperationsInput | number
    tax_rate?: FloatFieldUpdateOperationsInput | number
    tax_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    order_total?: FloatFieldUpdateOperationsInput | number
    billing_address_id?: IntFieldUpdateOperationsInput | number
    shipping_address_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wishlistsUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productsUpdateOneRequiredWithoutWishlistsNestedInput
  }

  export type wishlistsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wishlistsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productReviewsUpdateWithoutUserInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProductReviewStatusFieldUpdateOperationsInput | $Enums.ProductReviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productsUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type productReviewsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProductReviewStatusFieldUpdateOperationsInput | $Enums.ProductReviewStatus
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productReviewsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProductReviewStatusFieldUpdateOperationsInput | $Enums.ProductReviewStatus
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ordersCreateManyBilling_addressInput = {
    id?: number
    order_status?: $Enums.OrderStatus
    payment_method: string
    payment_status?: $Enums.PaymentStatus
    sub_total: number
    tax_rate: number
    tax_total: number
    discount: number
    order_total: number
    userId: number
    shipping_address_id: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ordersCreateManyShipping_addressInput = {
    id?: number
    order_status?: $Enums.OrderStatus
    payment_method: string
    payment_status?: $Enums.PaymentStatus
    sub_total: number
    tax_rate: number
    tax_total: number
    discount: number
    order_total: number
    userId: number
    billing_address_id: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ordersUpdateWithoutBilling_addressInput = {
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    payment_method?: StringFieldUpdateOperationsInput | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    sub_total?: FloatFieldUpdateOperationsInput | number
    tax_rate?: FloatFieldUpdateOperationsInput | number
    tax_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    order_total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: users_metaUpdateOneRequiredWithoutOrdersNestedInput
    shipping_address?: addressesUpdateOneRequiredWithoutShipping_ordersNestedInput
    items?: orderItemsUpdateManyWithoutOrderNestedInput
  }

  export type ordersUncheckedUpdateWithoutBilling_addressInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    payment_method?: StringFieldUpdateOperationsInput | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    sub_total?: FloatFieldUpdateOperationsInput | number
    tax_rate?: FloatFieldUpdateOperationsInput | number
    tax_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    order_total?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    shipping_address_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: orderItemsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type ordersUncheckedUpdateManyWithoutBilling_addressInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    payment_method?: StringFieldUpdateOperationsInput | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    sub_total?: FloatFieldUpdateOperationsInput | number
    tax_rate?: FloatFieldUpdateOperationsInput | number
    tax_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    order_total?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    shipping_address_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ordersUpdateWithoutShipping_addressInput = {
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    payment_method?: StringFieldUpdateOperationsInput | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    sub_total?: FloatFieldUpdateOperationsInput | number
    tax_rate?: FloatFieldUpdateOperationsInput | number
    tax_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    order_total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: users_metaUpdateOneRequiredWithoutOrdersNestedInput
    billing_address?: addressesUpdateOneRequiredWithoutBilling_ordersNestedInput
    items?: orderItemsUpdateManyWithoutOrderNestedInput
  }

  export type ordersUncheckedUpdateWithoutShipping_addressInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    payment_method?: StringFieldUpdateOperationsInput | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    sub_total?: FloatFieldUpdateOperationsInput | number
    tax_rate?: FloatFieldUpdateOperationsInput | number
    tax_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    order_total?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    billing_address_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: orderItemsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type ordersUncheckedUpdateManyWithoutShipping_addressInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    payment_method?: StringFieldUpdateOperationsInput | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    sub_total?: FloatFieldUpdateOperationsInput | number
    tax_rate?: FloatFieldUpdateOperationsInput | number
    tax_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    order_total?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    billing_address_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoriesOnProductsCreateManyProductInput = {
    categoryId: number
  }

  export type productCartsCreateManyProductInput = {
    id?: number
    userId: number
    quantity: number
  }

  export type productGalleriesCreateManyProductInput = {
    mediaId: number
  }

  export type orderItemsCreateManyProductInput = {
    id?: number
    quantity: number
    price: number
    orderId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type wishlistsCreateManyProductInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type productReviewsCreateManyProductInput = {
    id?: number
    rating: number
    comment?: string | null
    status?: $Enums.ProductReviewStatus
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type categoriesOnProductsUpdateWithoutProductInput = {
    category?: productCategoriesUpdateOneRequiredWithoutProductsNestedInput
  }

  export type categoriesOnProductsUncheckedUpdateWithoutProductInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type categoriesOnProductsUncheckedUpdateManyWithoutProductInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type productCartsUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    user?: users_metaUpdateOneRequiredWithoutCartsNestedInput
  }

  export type productCartsUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type productCartsUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type productGalleriesUpdateWithoutProductInput = {
    media?: mediaUpdateOneRequiredWithoutGalleriesNestedInput
  }

  export type productGalleriesUncheckedUpdateWithoutProductInput = {
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type productGalleriesUncheckedUpdateManyWithoutProductInput = {
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type orderItemsUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: ordersUpdateOneRequiredWithoutItemsNestedInput
  }

  export type orderItemsUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderItemsUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wishlistsUpdateWithoutProductInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: users_metaUpdateOneRequiredWithoutWishlistsNestedInput
  }

  export type wishlistsUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wishlistsUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productReviewsUpdateWithoutProductInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProductReviewStatusFieldUpdateOperationsInput | $Enums.ProductReviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: users_metaUpdateOneRequiredWithoutProduct_reviewsNestedInput
  }

  export type productReviewsUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProductReviewStatusFieldUpdateOperationsInput | $Enums.ProductReviewStatus
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productReviewsUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProductReviewStatusFieldUpdateOperationsInput | $Enums.ProductReviewStatus
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoriesOnProductsCreateManyCategoryInput = {
    productId: number
  }

  export type categoriesOnProductsUpdateWithoutCategoryInput = {
    product?: productsUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type categoriesOnProductsUncheckedUpdateWithoutCategoryInput = {
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type categoriesOnProductsUncheckedUpdateManyWithoutCategoryInput = {
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type productCategoriesCreateManyPhotoInput = {
    id?: number
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type productsCreateManyThumbnailInput = {
    id?: number
    authorId: number
    name: string
    slug: string
    price: number
    regular_price: number
    sale_price?: number | null
    stock_quantity?: number | null
    stock_status?: $Enums.StockStatus
    sku?: string | null
    description?: string | null
    short_description?: string | null
    weight?: number | null
    length?: number | null
    width?: number | null
    height?: number | null
    status?: $Enums.ProductStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type productGalleriesCreateManyMediaInput = {
    productId: number
  }

  export type productCategoriesUpdateWithoutPhotoInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: categoriesOnProductsUpdateManyWithoutCategoryNestedInput
  }

  export type productCategoriesUncheckedUpdateWithoutPhotoInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: categoriesOnProductsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type productCategoriesUncheckedUpdateManyWithoutPhotoInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productsUpdateWithoutThumbnailInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: users_metaUpdateOneRequiredWithoutProductsNestedInput
    categories?: categoriesOnProductsUpdateManyWithoutProductNestedInput
    carts?: productCartsUpdateManyWithoutProductNestedInput
    galleries?: productGalleriesUpdateManyWithoutProductNestedInput
    order_items?: orderItemsUpdateManyWithoutProductNestedInput
    wishlists?: wishlistsUpdateManyWithoutProductNestedInput
    reviews?: productReviewsUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutThumbnailInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: categoriesOnProductsUncheckedUpdateManyWithoutProductNestedInput
    carts?: productCartsUncheckedUpdateManyWithoutProductNestedInput
    galleries?: productGalleriesUncheckedUpdateManyWithoutProductNestedInput
    order_items?: orderItemsUncheckedUpdateManyWithoutProductNestedInput
    wishlists?: wishlistsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: productReviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateManyWithoutThumbnailInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    regular_price?: FloatFieldUpdateOperationsInput | number
    sale_price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    stock_status?: EnumStockStatusFieldUpdateOperationsInput | $Enums.StockStatus
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productGalleriesUpdateWithoutMediaInput = {
    product?: productsUpdateOneRequiredWithoutGalleriesNestedInput
  }

  export type productGalleriesUncheckedUpdateWithoutMediaInput = {
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type productGalleriesUncheckedUpdateManyWithoutMediaInput = {
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type orderItemsCreateManyOrderInput = {
    id?: number
    quantity: number
    price: number
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderItemsUpdateWithoutOrderInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productsUpdateOneRequiredWithoutOrder_itemsNestedInput
  }

  export type orderItemsUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderItemsUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use Users_metaCountOutputTypeDefaultArgs instead
     */
    export type Users_metaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Users_metaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AddressesCountOutputTypeDefaultArgs instead
     */
    export type AddressesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AddressesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductsCountOutputTypeDefaultArgs instead
     */
    export type ProductsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductCategoriesCountOutputTypeDefaultArgs instead
     */
    export type ProductCategoriesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductCategoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MediaCountOutputTypeDefaultArgs instead
     */
    export type MediaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MediaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrdersCountOutputTypeDefaultArgs instead
     */
    export type OrdersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrdersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use users_metaDefaultArgs instead
     */
    export type users_metaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = users_metaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use addressesDefaultArgs instead
     */
    export type addressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = addressesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use productsDefaultArgs instead
     */
    export type productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = productsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use productGalleriesDefaultArgs instead
     */
    export type productGalleriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = productGalleriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use productCategoriesDefaultArgs instead
     */
    export type productCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = productCategoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use categoriesOnProductsDefaultArgs instead
     */
    export type categoriesOnProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = categoriesOnProductsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use productCartsDefaultArgs instead
     */
    export type productCartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = productCartsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use productReviewsDefaultArgs instead
     */
    export type productReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = productReviewsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use mediaDefaultArgs instead
     */
    export type mediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = mediaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ordersDefaultArgs instead
     */
    export type ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ordersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use orderItemsDefaultArgs instead
     */
    export type orderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = orderItemsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use wishlistsDefaultArgs instead
     */
    export type wishlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = wishlistsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}